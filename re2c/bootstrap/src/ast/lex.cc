/* Generated by re2c 1.1.1 on Thu Dec 27 22:37:13 2018 */
#line 1 "../src/ast/lex.re"
#include "src/util/c99_stdint.h"
#include <stddef.h>
#include <string.h>
#include <algorithm>
#include <limits>
#include <string>

#include "src/conf/msg.h"
#include "src/code/output.h"
#include "src/re/encoding/enc.h"
#include "src/ast/input.h"
#include "src/ast/ast.h"
#include "src/ast/scanner.h"
#include "src/ast/parser.h" // needed by "y.tab.h"
#include "src/ast/unescape.h"
#include "src/util/range.h"
#include "src/util/s_to_n32_unsafe.h"
#include "src/util/string_utils.h"
#include "y.tab.h"

extern YYSTYPE yylval;

namespace re2c {

#define YYCTYPE   unsigned char
#define YYCURSOR  cur
#define YYLIMIT   lim
#define YYMARKER  mar
#define YYFILL(n) { if (!fill (n)) fatal("unexpected end of input"); }

#line 55 "../src/ast/lex.re"


#line 108 "../src/ast/lex.re"


Scanner::ParseMode Scanner::echo(Output &out)
{
    if (is_eof()) return Stop;

next:
    tok = cur;
loop:
    ptr = cur;

#line 49 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 18) YYFILL(18);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 204 "../src/ast/lex.re"
	{
        if (is_eof()) {
            out.wraw(tok, ptr);
            return Stop;
        }
        goto loop;
    }
#line 115 "src/ast/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 223 "../src/ast/lex.re"
	{ goto loop; }
#line 121 "src/ast/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 218 "../src/ast/lex.re"
	{
        next_line();
        goto loop;
    }
#line 135 "src/ast/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy7;
	} else {
		goto yy5;
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 119 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        return Parse;
    }
#line 183 "src/ast/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'h':	goto yy23;
	case 'i':	goto yy24;
	case 'm':	goto yy25;
	case 'r':	goto yy26;
	case 's':	goto yy27;
	case 't':	goto yy28;
	case 'u':	goto yy29;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy30;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy31;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy32;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy33;
	if (yych == 'n') goto yy34;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy35;
	if (yych == 't') goto yy36;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy37;
	if (yych == 'u') goto yy38;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy39;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy40;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy41;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy42;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy43;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy44;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy45;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy46;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy47;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy48;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy49;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy50;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy51;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy52;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy53;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy55;
	if (yych <= '9') goto yy13;
	goto yy55;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy56;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy57;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy58;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy59;
	goto yy13;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy60;
	if (yych == 'n') goto yy61;
	goto yy13;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy62;
	goto yy13;
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy63;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy64;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy65;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy66;
	goto yy13;
yy54:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy55:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy54;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy54;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy67;
		}
		goto yy13;
	}
yy56:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy69;
	goto yy13;
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy70;
	goto yy13;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy71;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy72;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy73;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy74;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy75;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy76;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy77;
	goto yy13;
yy65:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy78;
	goto yy13;
yy66:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy79;
	goto yy13;
yy67:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy67;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy80;
		if (yych <= '\n') goto yy82;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy84;
		if (yych == ' ') goto yy80;
		goto yy13;
	}
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy85;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy86;
	goto yy13;
yy71:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy87;
	goto yy13;
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy88;
	goto yy13;
yy73:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy89;
	goto yy13;
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy90;
	goto yy13;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy91;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy92;
	goto yy13;
yy77:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy93;
	goto yy13;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy94;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy95;
	goto yy13;
yy80:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy80;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy80;
		if (yych == '"') goto yy96;
		goto yy13;
	}
yy82:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 212 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr + 1);
        set_sourceline();
        goto next;
    }
#line 485 "src/ast/lex.cc"
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy82;
	goto yy13;
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy98;
	goto yy13;
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy99;
	goto yy13;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy100;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy101;
	goto yy13;
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy102;
	goto yy13;
yy90:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy103;
	goto yy13;
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy104;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy105;
	goto yy13;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy106;
	goto yy13;
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy107;
	goto yy13;
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy108;
	goto yy13;
yy96:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy96;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy109;
	goto yy110;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy111;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy112;
	goto yy13;
yy100:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy113;
	goto yy13;
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy114;
	goto yy13;
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy115;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy117;
	goto yy13;
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy118;
	goto yy13;
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy119;
	goto yy13;
yy106:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy120;
	goto yy13;
yy107:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy121;
	goto yy13;
yy108:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy122;
	goto yy13;
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy82;
	if (yych == '\r') goto yy84;
	goto yy13;
yy110:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy96;
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy124;
	goto yy13;
yy112:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy125;
	goto yy13;
yy113:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy126;
	goto yy13;
yy114:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy127;
	goto yy13;
yy115:
	++YYCURSOR;
#line 140 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_yymaxfill();
        lex_end_of_comment(out);
        goto next;
    }
#line 625 "src/ast/lex.cc"
yy117:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'h') goto yy128;
	goto yy13;
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy129;
	goto yy13;
yy119:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy130;
	goto yy13;
yy120:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy131;
	goto yy13;
yy121:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy132;
	goto yy13;
yy122:
	++YYCURSOR;
#line 129 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        return Reuse;
    }
#line 653 "src/ast/lex.cc"
yy124:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy133;
	goto yy13;
yy125:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy134;
	goto yy13;
yy126:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy135;
	goto yy13;
yy127:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy136;
	goto yy13;
yy128:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy137;
	goto yy13;
yy129:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy138;
	goto yy13;
yy130:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy140;
	goto yy13;
yy131:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy142;
	goto yy13;
yy132:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy144;
	goto yy13;
yy133:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy146;
	goto yy13;
yy134:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy147;
	goto yy13;
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy148;
	goto yy13;
yy136:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy150;
	goto yy13;
yy137:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy151;
	goto yy13;
yy138:
	++YYCURSOR;
#line 176 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, true);
        goto next;
    }
#line 718 "src/ast/lex.cc"
yy140:
	++YYCURSOR;
#line 124 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        return Rules;
    }
#line 726 "src/ast/lex.cc"
yy142:
	++YYCURSOR;
#line 170 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, false);
        goto next;
    }
#line 735 "src/ast/lex.cc"
yy144:
	++YYCURSOR;
#line 161 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_line_info_output();
        out.wdelay_types();
        out.wdelay_line_info_input(get_line(), get_fname());
        lex_end_of_comment(out);
        goto next;
    }
#line 747 "src/ast/lex.cc"
yy146:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy152;
	goto yy13;
yy147:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy153;
	goto yy13;
yy148:
	++YYCURSOR;
#line 134 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        lex_end_of_comment(out);
        goto next;
    }
#line 764 "src/ast/lex.cc"
yy150:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy154;
	goto yy13;
yy151:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy156;
	goto yy13;
yy152:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy157;
	goto yy13;
yy153:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy159;
	goto yy13;
yy154:
	++YYCURSOR;
#line 198 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        lex_include();
        goto next;
    }
#line 789 "src/ast/lex.cc"
yy156:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy160;
	goto yy13;
yy157:
	++YYCURSOR;
#line 154 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_state_goto(0);
        lex_end_of_comment(out);
        goto next;
    }
#line 803 "src/ast/lex.cc"
yy159:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy161;
	if (yych == 'n') goto yy162;
	goto yy13;
yy160:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy164;
	goto yy13;
yy161:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy166;
	goto yy13;
yy162:
	++YYCURSOR;
#line 182 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(true);
        out.need_header = true;
        lex_end_of_comment(out);
        goto next;
    }
#line 827 "src/ast/lex.cc"
yy164:
	++YYCURSOR;
#line 147 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_yymaxnmatch();
        lex_end_of_comment(out);
        goto next;
    }
#line 837 "src/ast/lex.cc"
yy166:
	++YYCURSOR;
#line 190 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(false);
        out.wdelay_line_info_input(get_line(), get_fname());
        lex_end_of_comment(out);
        goto next;
    }
#line 848 "src/ast/lex.cc"
}
#line 224 "../src/ast/lex.re"

}

void Scanner::lex_end_of_comment(Output &out)
{
    bool multiline = false;
loop:

#line 859 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy170;
		if (yych == '\n') goto yy174;
		goto yy172;
	} else {
		if (yych <= '\r') goto yy176;
		if (yych == '*') goto yy177;
		goto yy172;
	}
yy170:
	++YYCURSOR;
#line 233 "../src/ast/lex.re"
	{
        fatal_lc(get_line(), get_column(), "expected end of block");
    }
#line 879 "src/ast/lex.cc"
yy172:
	++YYCURSOR;
yy173:
#line 232 "../src/ast/lex.re"
	{ goto loop; }
#line 885 "src/ast/lex.cc"
yy174:
	++YYCURSOR;
#line 236 "../src/ast/lex.re"
	{
        next_line();
        multiline = true;
        goto loop;
    }
#line 894 "src/ast/lex.cc"
yy176:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy174;
	goto yy173;
yy177:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy173;
	++YYCURSOR;
#line 241 "../src/ast/lex.re"
	{
        if (multiline) {
            out.wdelay_line_info_input(get_line(), get_fname());
        }
        return;
    }
#line 910 "src/ast/lex.cc"
}
#line 247 "../src/ast/lex.re"

}

void Scanner::lex_include()
{
    const char *x, *y;

#line 920 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 192,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') goto yy184;
	if (yych == ' ') goto yy184;
	++YYCURSOR;
yy183:
#line 254 "../src/ast/lex.re"
	{
        fatal_lc(get_line(), get_column(), "syntax error in include directive");
    }
#line 967 "src/ast/lex.cc"
yy184:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy185;
	}
	if (yych == '"') {
		yyt1 = YYCURSOR;
		goto yy188;
	}
	goto yy183;
yy185:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy185;
	}
	if (yych == '"') {
		yyt1 = YYCURSOR;
		goto yy188;
	}
yy187:
	YYCURSOR = YYMARKER;
	goto yy183;
yy188:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy188;
	}
	if (yych <= '\n') goto yy187;
	if (yych >= '#') goto yy191;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = YYCURSOR;
			goto yy192;
		}
		goto yy187;
	} else {
		if (yych <= ' ') {
			yyt2 = YYCURSOR;
			goto yy192;
		}
		if (yych == '*') {
			yyt2 = YYCURSOR;
			goto yy194;
		}
		goto yy187;
	}
yy191:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy187;
	if (yych == '\n') goto yy187;
	goto yy188;
yy192:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy192;
		goto yy187;
	} else {
		if (yych <= ' ') goto yy192;
		if (yych != '*') goto yy187;
	}
yy194:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy187;
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
#line 258 "../src/ast/lex.re"
	{
        include(std::string(x + 1, static_cast<size_t>(y - x) - 2));
        return;
    }
#line 1048 "src/ast/lex.cc"
}
#line 262 "../src/ast/lex.re"

}

void Scanner::lex_tags(Output &out, bool mtags)
{
    std::string fmt, sep;
loop:

#line 1059 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy201;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy204;
		} else {
			if (yych == '\r') goto yy206;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy207;
			if (yych >= 'f') goto yy208;
		} else {
			if (yych == 's') goto yy209;
		}
	}
	++YYCURSOR;
yy200:
#line 270 "../src/ast/lex.re"
	{
        fatal_lc(get_line(), get_column(), "unrecognized configuration");
    }
#line 1121 "src/ast/lex.cc"
yy201:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy201;
	}
#line 281 "../src/ast/lex.re"
	{
        goto loop;
    }
#line 1133 "src/ast/lex.cc"
yy204:
	++YYCURSOR;
#line 284 "../src/ast/lex.re"
	{
        next_line();
        goto loop;
    }
#line 1141 "src/ast/lex.cc"
yy206:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy204;
	goto yy200;
yy207:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy210;
	goto yy200;
yy208:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy212;
	goto yy200;
yy209:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy214;
	goto yy200;
yy210:
	++YYCURSOR;
#line 288 "../src/ast/lex.re"
	{
        out.wdelay_tags(new ConfTags(fmt, sep), mtags);
        return;
    }
#line 1165 "src/ast/lex.cc"
yy212:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy215;
yy213:
	YYCURSOR = YYMARKER;
	goto yy200;
yy214:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy216;
	goto yy213;
yy215:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy217;
	goto yy213;
yy216:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy218;
	goto yy213;
yy217:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy219;
	goto yy213;
yy218:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy220;
	goto yy213;
yy219:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy221;
	goto yy213;
yy220:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy223;
	goto yy213;
yy221:
	++YYCURSOR;
#line 273 "../src/ast/lex.re"
	{
        fmt = lex_conf_string();
        goto loop;
    }
#line 1207 "src/ast/lex.cc"
yy223:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy213;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy213;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy213;
	++YYCURSOR;
#line 277 "../src/ast/lex.re"
	{
        sep = lex_conf_string();
        goto loop;
    }
#line 1221 "src/ast/lex.cc"
}
#line 292 "../src/ast/lex.re"

}

int Scanner::scan()
{
    const char *p;
scan:
    tok = cur;

#line 1233 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy232;
	}
	if (yych <= '9') {
		if (yych <= '%') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy230;
				if (yych <= '\n') goto yy235;
				if (yych >= '\r') goto yy237;
			} else {
				if (yych <= '"') {
					if (yych >= '"') goto yy238;
				} else {
					if (yych <= '#') goto yy240;
					if (yych <= '$') goto yy241;
					goto yy243;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') goto yy230;
				if (yych <= '\'') goto yy244;
				if (yych <= ')') goto yy241;
				goto yy246;
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy241;
				} else {
					if (yych <= '.') goto yy247;
					if (yych <= '/') goto yy249;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy250;
				if (yych <= ';') goto yy241;
				if (yych <= '<') goto yy251;
				goto yy253;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy241;
				} else {
					if (yych <= '@') goto yy240;
					if (yych <= 'Z') goto yy254;
					goto yy257;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy241;
				} else {
					if (yych != '`') goto yy254;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy259;
					goto yy254;
				} else {
					if (yych <= '{') goto yy260;
					if (yych <= '|') goto yy241;
				}
			}
		}
	}
yy230:
	++YYCURSOR;
yy231:
#line 417 "../src/ast/lex.re"
	{
        fatal_lc(get_line(), get_column(), "unexpected character: '%c'", *tok);
        goto scan;
    }
#line 1348 "src/ast/lex.cc"
yy232:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy232;
	}
#line 399 "../src/ast/lex.re"
	{ goto scan; }
#line 1358 "src/ast/lex.cc"
yy235:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy262;
	} else {
		if (yych <= ' ') goto yy262;
		if (yych == '#') goto yy265;
	}
yy236:
#line 406 "../src/ast/lex.re"
	{
        next_line();
        if (lexer_state == LEX_FLEX_NAME) {
            lexer_state = LEX_NORMAL;
            return TOKEN_FID_END;
        }
        else {
            goto scan;
        }
    }
#line 1380 "src/ast/lex.cc"
yy237:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy235;
	goto yy231;
yy238:
	++YYCURSOR;
#line 317 "../src/ast/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1389 "src/ast/lex.cc"
yy240:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy231;
		if (yych <= 'Z') goto yy267;
		goto yy231;
	} else {
		if (yych == '`') goto yy231;
		if (yych <= 'z') goto yy267;
		goto yy231;
	}
yy241:
	++YYCURSOR;
yy242:
#line 327 "../src/ast/lex.re"
	{ return *tok; }
#line 1406 "src/ast/lex.cc"
yy243:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy270;
	goto yy231;
yy244:
	++YYCURSOR;
#line 316 "../src/ast/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1415 "src/ast/lex.cc"
yy246:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy270;
	goto yy242;
yy247:
	++YYCURSOR;
#line 394 "../src/ast/lex.re"
	{
        yylval.regexp = ast_dot(get_line(), get_column());
        return TOKEN_REGEXP;
    }
#line 1427 "src/ast/lex.cc"
yy249:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy272;
	if (yych == '/') goto yy274;
	goto yy242;
yy250:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy276;
	goto yy231;
yy251:
	++YYCURSOR;
#line 309 "../src/ast/lex.re"
	{ return lex_clist(); }
#line 1441 "src/ast/lex.cc"
yy253:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy278;
	goto yy242;
yy254:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy255:
	if (yybm[0+yych] & 32) {
		goto yy254;
	}
#line 371 "../src/ast/lex.re"
	{
        if (!globopts->FFlag || lex_namedef_context_re2c()) {
            yylval.str = new std::string (tok, tok_len());
            return TOKEN_ID;
        }
        else if (lex_namedef_context_flex()) {
            yylval.str = new std::string (tok, tok_len());
            lexer_state = LEX_FLEX_NAME;
            return TOKEN_FID;
        }
        else {
            std::vector<ASTChar> *str = new std::vector<ASTChar>;
            for (const char *s = tok; s < cur; ++s) {
                const uint32_t
                    chr = static_cast<uint8_t>(*s),
                    col = static_cast<uint32_t>(s - tok);
                str->push_back(ASTChar(chr, col));
            }
            yylval.regexp = ast_str(get_line(), get_column(), str, false);
            return TOKEN_REGEXP;
        }
    }
#line 1478 "src/ast/lex.cc"
yy257:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy280;
#line 318 "../src/ast/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1484 "src/ast/lex.cc"
yy259:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy282;
	goto yy255;
yy260:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy285;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy283;
		if (yych >= 'A') goto yy287;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy287;
		} else {
			if (yych <= '`') goto yy261;
			if (yych <= 'z') goto yy287;
		}
	}
yy261:
#line 301 "../src/ast/lex.re"
	{ lex_code_in_braces(); return TOKEN_CODE; }
#line 1509 "src/ast/lex.cc"
yy262:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy262;
	} else {
		if (yych <= ' ') goto yy262;
		if (yych == '#') goto yy265;
	}
yy264:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 2) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy236;
			} else {
				goto yy242;
			}
		} else {
			goto yy261;
		}
	} else {
		if (yyaccept == 3) {
			goto yy277;
		} else {
			goto yy284;
		}
	}
yy265:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy265;
		goto yy264;
	} else {
		if (yych <= ' ') goto yy265;
		if (yych == 'l') goto yy289;
		goto yy264;
	}
yy267:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy269;
		if (yych <= '9') goto yy267;
		if (yych >= 'A') goto yy267;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy267;
		} else {
			if (yych <= '`') goto yy269;
			if (yych <= 'z') goto yy267;
		}
	}
yy269:
#line 321 "../src/ast/lex.re"
	{
        const std::string *name = new std::string(tok + 1, tok_len() - 1);
        yylval.regexp = ast_tag(get_line(), get_column(), name, tok[0] == '#');
        return TOKEN_REGEXP;
    }
#line 1574 "src/ast/lex.cc"
yy270:
	++YYCURSOR;
#line 314 "../src/ast/lex.re"
	{ tok = cur; return 0; }
#line 1579 "src/ast/lex.cc"
yy272:
	++YYCURSOR;
#line 312 "../src/ast/lex.re"
	{ lex_c_comment(); goto scan; }
#line 1584 "src/ast/lex.cc"
yy274:
	++YYCURSOR;
#line 311 "../src/ast/lex.re"
	{ lex_cpp_comment(); goto scan; }
#line 1589 "src/ast/lex.cc"
yy276:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy278;
yy277:
#line 302 "../src/ast/lex.re"
	{ lex_code_indented(); return TOKEN_CODE; }
#line 1597 "src/ast/lex.cc"
yy278:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy264;
			goto yy278;
		} else {
			if (yych == ' ') goto yy278;
			goto yy264;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = YYCURSOR;
				goto yy290;
			}
			if (yych <= '^') goto yy264;
			yyt1 = YYCURSOR;
			goto yy290;
		} else {
			if (yych <= '`') goto yy264;
			if (yych <= 'z') {
				yyt1 = YYCURSOR;
				goto yy290;
			}
			goto yy264;
		}
	}
yy280:
	++YYCURSOR;
#line 319 "../src/ast/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1632 "src/ast/lex.cc"
yy282:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy293;
	goto yy255;
yy283:
	++YYCURSOR;
yy284:
#line 355 "../src/ast/lex.re"
	{
        fatal_lc(get_line(), get_column(),
            "illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
    }
#line 1645 "src/ast/lex.cc"
yy285:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy285;
	}
	if (yych == ',') {
		yyt1 = YYCURSOR;
		goto yy294;
	}
	if (yych == '}') goto yy295;
	goto yy264;
yy287:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy264;
			goto yy287;
		} else {
			if (yych <= '@') goto yy264;
			if (yych <= 'Z') goto yy287;
			goto yy264;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy264;
			goto yy287;
		} else {
			if (yych == '}') goto yy297;
			goto yy264;
		}
	}
yy289:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy299;
	goto yy264;
yy290:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy292;
		if (yych <= '9') goto yy290;
		if (yych >= 'A') goto yy290;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy290;
		} else {
			if (yych <= '`') goto yy292;
			if (yych <= 'z') goto yy290;
		}
	}
yy292:
	p = yyt1;
#line 304 "../src/ast/lex.re"
	{
        yylval.str = new std::string(p, static_cast<size_t>(cur - p));
        return tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT;
    }
#line 1708 "src/ast/lex.cc"
yy293:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy300;
	goto yy255;
yy294:
	yyaccept = 4;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy284;
	if (yych <= '9') goto yy301;
	if (yych == '}') goto yy303;
	goto yy284;
yy295:
	++YYCURSOR;
#line 329 "../src/ast/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            fatal_lc(get_line(), get_column(), "repetition count overflow");
        }
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_CLOSESIZE;
    }
#line 1730 "src/ast/lex.cc"
yy297:
	++YYCURSOR;
#line 360 "../src/ast/lex.re"
	{
        if (!globopts->FFlag) {
            fatal_lc(get_line(), get_column(),
                "curly braces for names only allowed with -F switch");
        }
        yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
        return TOKEN_ID;
    }
#line 1742 "src/ast/lex.cc"
yy299:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy305;
	goto yy264;
yy300:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy306;
	goto yy255;
yy301:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy264;
	if (yych <= '9') goto yy301;
	if (yych == '}') goto yy308;
	goto yy264;
yy303:
	++YYCURSOR;
#line 347 "../src/ast/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            fatal_lc(get_line(), get_column(), "repetition lower bound overflow");
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        return TOKEN_CLOSESIZE;
    }
#line 1769 "src/ast/lex.cc"
yy305:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy310;
	goto yy264;
yy306:
	++YYCURSOR;
#line 369 "../src/ast/lex.re"
	{ return TOKEN_CONF; }
#line 1778 "src/ast/lex.cc"
yy308:
	++YYCURSOR;
	p = yyt1;
#line 337 "../src/ast/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min)) {
            fatal_lc(get_line(), get_column(), "repetition lower bound overflow");
        }
        if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max)) {
            fatal_lc(get_line(), get_column(), "repetition upper bound overflow");
        }
        return TOKEN_CLOSESIZE;
    }
#line 1792 "src/ast/lex.cc"
yy310:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy312;
	if (yych <= '9') goto yy264;
	goto yy312;
yy311:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy312:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy311;
		goto yy264;
	} else {
		if (yych <= ' ') goto yy311;
		if (yych <= '0') goto yy264;
		if (yych >= ':') goto yy264;
		yyt1 = YYCURSOR;
	}
yy313:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy264;
		} else {
			if (yych <= '\n') goto yy317;
			if (yych <= '\f') goto yy264;
			goto yy319;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy264;
		} else {
			if (yych <= '/') goto yy264;
			if (yych <= '9') goto yy313;
			goto yy264;
		}
	}
yy315:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy315;
		goto yy264;
	} else {
		if (yych <= ' ') goto yy315;
		if (yych == '"') goto yy320;
		goto yy264;
	}
yy317:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 401 "../src/ast/lex.re"
	{
        set_sourceline ();
        return TOKEN_LINE_INFO;
    }
#line 1853 "src/ast/lex.cc"
yy319:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy317;
	goto yy264;
yy320:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy320;
	}
	if (yych <= '\n') goto yy264;
	if (yych >= '#') goto yy323;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy317;
	if (yych == '\r') goto yy319;
	goto yy264;
yy323:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy264;
	if (yych == '\n') goto yy264;
	goto yy320;
}
#line 421 "../src/ast/lex.re"

}

bool Scanner::lex_namedef_context_re2c()
{

#line 1886 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = YYCURSOR;
			goto yy327;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = YYCURSOR;
			goto yy327;
		}
		if (yych == '=') {
			yyt1 = YYCURSOR;
			goto yy330;
		}
	}
yy326:
#line 428 "../src/ast/lex.re"
	{ return false; }
#line 1943 "src/ast/lex.cc"
yy327:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy327;
	}
	if (yych == '=') goto yy330;
yy329:
	YYCURSOR = YYMARKER;
	goto yy326;
yy330:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy329;
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 427 "../src/ast/lex.re"
	{ return true; }
#line 1962 "src/ast/lex.cc"
}
#line 429 "../src/ast/lex.re"

}

bool Scanner::lex_namedef_context_flex()
{

#line 1971 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') {
		yyt1 = YYCURSOR;
		goto yy336;
	}
	if (yych == ' ') {
		yyt1 = YYCURSOR;
		goto yy336;
	}
#line 437 "../src/ast/lex.re"
	{ return false; }
#line 2020 "src/ast/lex.cc"
yy336:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy336;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy339;
	} else {
		if (yych <= '=') goto yy339;
		if (yych == '{') goto yy339;
	}
	YYCURSOR = yyt1;
#line 436 "../src/ast/lex.re"
	{ return true; }
#line 2037 "src/ast/lex.cc"
yy339:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 435 "../src/ast/lex.re"
	{ return false; }
#line 2043 "src/ast/lex.cc"
}
#line 438 "../src/ast/lex.re"

}

int Scanner::lex_clist()
{
    int kind = TOKEN_CLIST;
    CondList *cl = new CondList;

#line 2054 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy341;
yy342:
	++YYCURSOR;
yy341:
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy342;
	}
	if (yych <= 0x1F) goto yy344;
	if (yych <= '!') goto yy345;
	if (yych == '>') goto yy348;
yy344:
#line 448 "../src/ast/lex.re"
	{ goto cond; }
#line 2106 "src/ast/lex.cc"
yy345:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') goto yy345;
	if (yych == ' ') goto yy345;
#line 446 "../src/ast/lex.re"
	{ kind = TOKEN_CSETUP; goto cond; }
#line 2115 "src/ast/lex.cc"
yy348:
	++YYCURSOR;
#line 447 "../src/ast/lex.re"
	{ kind = TOKEN_CZERO; goto end; }
#line 2120 "src/ast/lex.cc"
}
#line 449 "../src/ast/lex.re"

cond:
    tok = cur;

#line 2127 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych == '*') goto yy354;
		if (yych >= 'A') goto yy356;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy356;
		} else {
			if (yych <= '`') goto yy352;
			if (yych <= 'z') goto yy356;
		}
	}
yy352:
	++YYCURSOR;
#line 455 "../src/ast/lex.re"
	{ goto error; }
#line 2181 "src/ast/lex.cc"
yy354:
	++YYCURSOR;
#line 454 "../src/ast/lex.re"
	{ if (!cl->empty()) goto error; cl->insert("*"); goto next; }
#line 2186 "src/ast/lex.cc"
yy356:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy356;
	}
#line 453 "../src/ast/lex.re"
	{ cl->insert(std::string(tok, tok_len())); goto next; }
#line 2196 "src/ast/lex.cc"
}
#line 456 "../src/ast/lex.re"

next:

#line 2202 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy363;
		if (yych >= ' ') goto yy363;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy364;
		} else {
			if (yych == '>') goto yy367;
		}
	}
	++YYCURSOR;
yy362:
#line 461 "../src/ast/lex.re"
	{ goto error; }
#line 2255 "src/ast/lex.cc"
yy363:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= ' ') {
		if (yych == '\t') goto yy369;
		if (yych <= 0x1F) goto yy362;
		goto yy369;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy362;
		} else {
			if (yych == '>') goto yy367;
			goto yy362;
		}
	}
yy364:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy364;
	}
#line 459 "../src/ast/lex.re"
	{ goto cond; }
#line 2279 "src/ast/lex.cc"
yy367:
	++YYCURSOR;
#line 460 "../src/ast/lex.re"
	{ goto end; }
#line 2284 "src/ast/lex.cc"
yy369:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy369;
		if (yych >= ' ') goto yy369;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy364;
		} else {
			if (yych == '>') goto yy367;
		}
	}
	YYCURSOR = YYMARKER;
	goto yy362;
}
#line 462 "../src/ast/lex.re"

end:
    yylval.clist = cl;
    return kind;
error:
    delete cl;
    fatal_l(get_line(), "syntax error in condition list");
}

void Scanner::lex_code_indented()
{
    const uint32_t line = get_line();
    tok = cur;
code:

#line 2318 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy374;
			if (yych == '\n') goto yy378;
			goto yy376;
		} else {
			if (yych <= '\r') goto yy380;
			if (yych == '"') goto yy381;
			goto yy376;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy381;
			if (yych == '/') goto yy383;
			goto yy376;
		} else {
			if (yych == '|') goto yy376;
			if (yych <= '}') goto yy384;
			goto yy376;
		}
	}
yy374:
	++YYCURSOR;
#line 485 "../src/ast/lex.re"
	{ fail_if_eof(); goto code; }
#line 2348 "src/ast/lex.cc"
yy376:
	++YYCURSOR;
yy377:
#line 490 "../src/ast/lex.re"
	{ goto code; }
#line 2354 "src/ast/lex.cc"
yy378:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy379;
		if (yych <= '\n') goto yy386;
	} else {
		if (yych <= '\r') goto yy386;
		if (yych == ' ') goto yy386;
	}
yy379:
#line 478 "../src/ast/lex.re"
	{
        while (isspace(tok[0])) ++tok;
        while (cur > tok && isspace(cur[-1])) --cur;
        yylval.code = new Code(get_fname (), line, tok, tok_len ());
        return;
    }
#line 2372 "src/ast/lex.cc"
yy380:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy378;
	goto yy377;
yy381:
	++YYCURSOR;
#line 489 "../src/ast/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2381 "src/ast/lex.cc"
yy383:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy388;
	if (yych == '/') goto yy390;
	goto yy377;
yy384:
	++YYCURSOR;
#line 486 "../src/ast/lex.re"
	{ fatal_l(get_line(), "Curly braces are not allowed after ':='"); }
#line 2391 "src/ast/lex.cc"
yy386:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 477 "../src/ast/lex.re"
	{ goto code; }
#line 2397 "src/ast/lex.cc"
yy388:
	++YYCURSOR;
#line 487 "../src/ast/lex.re"
	{ lex_c_comment(); goto code; }
#line 2402 "src/ast/lex.cc"
yy390:
	++YYCURSOR;
#line 488 "../src/ast/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2407 "src/ast/lex.cc"
}
#line 491 "../src/ast/lex.re"

}

void Scanner::lex_code_in_braces()
{
    const uint32_t line = get_line();
    uint32_t depth = 1;
code:

#line 2419 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy394;
			if (yych == '\n') goto yy398;
			goto yy396;
		} else {
			if (yych <= '\r') goto yy400;
			if (yych == '"') goto yy401;
			goto yy396;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy401;
			if (yych == '/') goto yy403;
			goto yy396;
		} else {
			if (yych <= '{') goto yy404;
			if (yych == '}') goto yy406;
			goto yy396;
		}
	}
yy394:
	++YYCURSOR;
#line 511 "../src/ast/lex.re"
	{ fail_if_eof(); goto code; }
#line 2483 "src/ast/lex.cc"
yy396:
	++YYCURSOR;
yy397:
#line 515 "../src/ast/lex.re"
	{ goto code; }
#line 2489 "src/ast/lex.cc"
yy398:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy408;
	}
	if (yych == '#') goto yy411;
yy399:
#line 510 "../src/ast/lex.re"
	{ next_line(); goto code; }
#line 2499 "src/ast/lex.cc"
yy400:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy398;
	goto yy397;
yy401:
	++YYCURSOR;
#line 514 "../src/ast/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2508 "src/ast/lex.cc"
yy403:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy413;
	if (yych == '/') goto yy415;
	goto yy397;
yy404:
	++YYCURSOR;
#line 508 "../src/ast/lex.re"
	{ ++depth; goto code; }
#line 2518 "src/ast/lex.cc"
yy406:
	++YYCURSOR;
#line 500 "../src/ast/lex.re"
	{
        if (--depth == 0) {
            yylval.code = new Code(get_fname (), line, tok, tok_len ());
            return;
        }
        goto code;
    }
#line 2529 "src/ast/lex.cc"
yy408:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy408;
	}
	if (yych == '#') goto yy411;
yy410:
	YYCURSOR = YYMARKER;
	goto yy399;
yy411:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy411;
		goto yy410;
	} else {
		if (yych <= ' ') goto yy411;
		if (yych == 'l') goto yy417;
		goto yy410;
	}
yy413:
	++YYCURSOR;
#line 512 "../src/ast/lex.re"
	{ lex_c_comment(); goto code; }
#line 2557 "src/ast/lex.cc"
yy415:
	++YYCURSOR;
#line 513 "../src/ast/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2562 "src/ast/lex.cc"
yy417:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy410;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy410;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy410;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy422;
	if (yych <= '9') goto yy410;
	goto yy422;
yy421:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy422:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy421;
		goto yy410;
	} else {
		if (yych <= ' ') goto yy421;
		if (yych <= '0') goto yy410;
		if (yych >= ':') goto yy410;
		yyt1 = YYCURSOR;
	}
yy423:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy423;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy410;
		if (yych <= '\t') goto yy425;
		if (yych <= '\n') goto yy427;
		goto yy410;
	} else {
		if (yych <= '\r') goto yy429;
		if (yych != ' ') goto yy410;
	}
yy425:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy425;
		goto yy410;
	} else {
		if (yych <= ' ') goto yy425;
		if (yych == '"') goto yy430;
		goto yy410;
	}
yy427:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 509 "../src/ast/lex.re"
	{ set_sourceline (); goto code; }
#line 2621 "src/ast/lex.cc"
yy429:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy427;
	goto yy410;
yy430:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy430;
	}
	if (yych <= '\n') goto yy410;
	if (yych >= '#') goto yy433;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy427;
	if (yych == '\r') goto yy429;
	goto yy410;
yy433:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy410;
	if (yych == '\n') goto yy410;
	goto yy430;
}
#line 516 "../src/ast/lex.re"

}

void Scanner::lex_string(char delim)
{
loop:

#line 2655 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy436;
			if (yych <= '\t') goto yy438;
			goto yy440;
		} else {
			if (yych == '\r') goto yy442;
			goto yy438;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy443;
			if (yych <= '&') goto yy438;
			goto yy443;
		} else {
			if (yych == '\\') goto yy445;
			goto yy438;
		}
	}
yy436:
	++YYCURSOR;
#line 526 "../src/ast/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2683 "src/ast/lex.cc"
yy438:
	++YYCURSOR;
yy439:
#line 527 "../src/ast/lex.re"
	{ goto loop; }
#line 2689 "src/ast/lex.cc"
yy440:
	++YYCURSOR;
#line 525 "../src/ast/lex.re"
	{ next_line(); goto loop; }
#line 2694 "src/ast/lex.cc"
yy442:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy440;
	goto yy439;
yy443:
	++YYCURSOR;
#line 523 "../src/ast/lex.re"
	{ if (cur[-1] == delim) return; else goto loop; }
#line 2703 "src/ast/lex.cc"
yy445:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '&') {
		if (yych != '"') goto yy439;
	} else {
		if (yych <= '\'') goto yy446;
		if (yych != '\\') goto yy439;
	}
yy446:
	++YYCURSOR;
#line 524 "../src/ast/lex.re"
	{ goto loop; }
#line 2716 "src/ast/lex.cc"
}
#line 528 "../src/ast/lex.re"

}

void Scanner::lex_c_comment()
{
loop:

#line 2726 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy450;
		if (yych == '\n') goto yy454;
		goto yy452;
	} else {
		if (yych <= '\r') goto yy456;
		if (yych == '*') goto yy457;
		goto yy452;
	}
yy450:
	++YYCURSOR;
#line 537 "../src/ast/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2744 "src/ast/lex.cc"
yy452:
	++YYCURSOR;
yy453:
#line 538 "../src/ast/lex.re"
	{ goto loop; }
#line 2750 "src/ast/lex.cc"
yy454:
	++YYCURSOR;
#line 536 "../src/ast/lex.re"
	{ next_line(); goto loop; }
#line 2755 "src/ast/lex.cc"
yy456:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy454;
	goto yy453;
yy457:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy453;
	++YYCURSOR;
#line 535 "../src/ast/lex.re"
	{ return; }
#line 2766 "src/ast/lex.cc"
}
#line 539 "../src/ast/lex.re"

}

void Scanner::lex_cpp_comment()
{
loop:

#line 2776 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy462;
		if (yych <= '\t') goto yy464;
		goto yy466;
	} else {
		if (yych == '\r') goto yy468;
		goto yy464;
	}
yy462:
	++YYCURSOR;
#line 547 "../src/ast/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2793 "src/ast/lex.cc"
yy464:
	++YYCURSOR;
yy465:
#line 548 "../src/ast/lex.re"
	{ goto loop; }
#line 2799 "src/ast/lex.cc"
yy466:
	++YYCURSOR;
#line 546 "../src/ast/lex.re"
	{ next_line(); return; }
#line 2804 "src/ast/lex.cc"
yy468:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy466;
	goto yy465;
}
#line 549 "../src/ast/lex.re"

}

const AST *Scanner::lex_cls(bool neg)
{
    std::vector<ASTRange> *cls = new std::vector<ASTRange>;
    uint32_t u, l, c, c0 = get_column();
fst:
    tok = cur;
    c = get_column();

#line 2822 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy472;
#line 561 "../src/ast/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 2830 "src/ast/lex.cc"
yy472:
	++YYCURSOR;
#line 560 "../src/ast/lex.re"
	{ return ast_cls(get_line(), c0, cls, neg); }
#line 2835 "src/ast/lex.cc"
}
#line 562 "../src/ast/lex.re"

snd:

#line 2841 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy477;
yy476:
#line 565 "../src/ast/lex.re"
	{ u = l; goto add; }
#line 2850 "src/ast/lex.cc"
yy477:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy479;
	YYCURSOR = YYMARKER;
	goto yy476;
yy479:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 566 "../src/ast/lex.re"
	{
        u = lex_cls_chr();
        if (l > u) {
            warn.swapped_range(get_line(), l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 2868 "src/ast/lex.cc"
}
#line 574 "../src/ast/lex.re"

add:
    cls->push_back(ASTRange(l, u, c));
    goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
    tok = cur;
    const uint32_t l = get_line(), c = get_column();

#line 2882 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy483;
		if (yych == '\n') goto yy487;
		goto yy485;
	} else {
		if (yych <= '\r') goto yy489;
		if (yych == '\\') goto yy490;
		goto yy485;
	}
yy483:
	++YYCURSOR;
#line 586 "../src/ast/lex.re"
	{ fail_if_eof(); return 0; }
#line 2901 "src/ast/lex.cc"
yy485:
	++YYCURSOR;
yy486:
#line 592 "../src/ast/lex.re"
	{ return static_cast<uint8_t>(tok[0]); }
#line 2907 "src/ast/lex.cc"
yy487:
	++YYCURSOR;
#line 587 "../src/ast/lex.re"
	{ fatal_lc(l, c, "newline in character class"); }
#line 2912 "src/ast/lex.cc"
yy489:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy487;
	goto yy486;
yy490:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy491;
				if (yych == '\n') goto yy487;
				goto yy492;
			} else {
				if (yych <= '\r') goto yy494;
				if (yych == '-') goto yy495;
				goto yy492;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy497;
				if (yych <= '7') goto yy499;
				if (yych <= 'T') goto yy492;
				goto yy500;
			} else {
				if (yych == 'X') goto yy502;
				if (yych <= '[') goto yy492;
				goto yy503;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy505;
				if (yych <= '`') goto yy492;
				if (yych <= 'a') goto yy507;
				goto yy509;
			} else {
				if (yych == 'f') goto yy511;
				if (yych <= 'm') goto yy492;
				goto yy513;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy515;
				if (yych <= 's') goto yy492;
				goto yy517;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy502;
					goto yy519;
				} else {
					if (yych == 'x') goto yy521;
					goto yy492;
				}
			}
		}
	}
yy491:
#line 590 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in escape sequence"); }
#line 2973 "src/ast/lex.cc"
yy492:
	++YYCURSOR;
yy493:
#line 605 "../src/ast/lex.re"
	{
        warn.useless_escape(l, c, tok[1]);
        return static_cast<uint8_t>(tok[1]);
    }
#line 2982 "src/ast/lex.cc"
yy494:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy487;
	goto yy493;
yy495:
	++YYCURSOR;
#line 603 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 2991 "src/ast/lex.cc"
yy497:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy498;
	if (yych <= '7') goto yy522;
yy498:
#line 589 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in octal escape sequence"); }
#line 3000 "src/ast/lex.cc"
yy499:
	++YYCURSOR;
	goto yy498;
yy500:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy501;
		if (yych <= '9') goto yy524;
	} else {
		if (yych <= 'F') goto yy524;
		if (yych <= '`') goto yy501;
		if (yych <= 'f') goto yy524;
	}
yy501:
#line 588 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in hexadecimal escape sequence"); }
#line 3018 "src/ast/lex.cc"
yy502:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy501;
		if (yych <= '9') goto yy525;
		goto yy501;
	} else {
		if (yych <= 'F') goto yy525;
		if (yych <= '`') goto yy501;
		if (yych <= 'f') goto yy525;
		goto yy501;
	}
yy503:
	++YYCURSOR;
#line 602 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3036 "src/ast/lex.cc"
yy505:
	++YYCURSOR;
#line 604 "../src/ast/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 3041 "src/ast/lex.cc"
yy507:
	++YYCURSOR;
#line 595 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3046 "src/ast/lex.cc"
yy509:
	++YYCURSOR;
#line 596 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3051 "src/ast/lex.cc"
yy511:
	++YYCURSOR;
#line 597 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3056 "src/ast/lex.cc"
yy513:
	++YYCURSOR;
#line 598 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3061 "src/ast/lex.cc"
yy515:
	++YYCURSOR;
#line 599 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3066 "src/ast/lex.cc"
yy517:
	++YYCURSOR;
#line 600 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3071 "src/ast/lex.cc"
yy519:
	++YYCURSOR;
#line 601 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3076 "src/ast/lex.cc"
yy521:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy501;
		if (yych <= '9') goto yy526;
		goto yy501;
	} else {
		if (yych <= 'F') goto yy526;
		if (yych <= '`') goto yy501;
		if (yych <= 'f') goto yy526;
		goto yy501;
	}
yy522:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy523;
	if (yych <= '7') goto yy527;
yy523:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy498;
	} else {
		goto yy501;
	}
yy524:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy523;
		if (yych <= '9') goto yy529;
		goto yy523;
	} else {
		if (yych <= 'F') goto yy529;
		if (yych <= '`') goto yy523;
		if (yych <= 'f') goto yy529;
		goto yy523;
	}
yy525:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy523;
		if (yych <= '9') goto yy530;
		goto yy523;
	} else {
		if (yych <= 'F') goto yy530;
		if (yych <= '`') goto yy523;
		if (yych <= 'f') goto yy530;
		goto yy523;
	}
yy526:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy523;
		if (yych <= '9') goto yy531;
		goto yy523;
	} else {
		if (yych <= 'F') goto yy531;
		if (yych <= '`') goto yy523;
		if (yych <= 'f') goto yy531;
		goto yy523;
	}
yy527:
	++YYCURSOR;
#line 594 "../src/ast/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3141 "src/ast/lex.cc"
yy529:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy523;
		if (yych <= '9') goto yy533;
		goto yy523;
	} else {
		if (yych <= 'F') goto yy533;
		if (yych <= '`') goto yy523;
		if (yych <= 'f') goto yy533;
		goto yy523;
	}
yy530:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy523;
		if (yych <= '9') goto yy526;
		goto yy523;
	} else {
		if (yych <= 'F') goto yy526;
		if (yych <= '`') goto yy523;
		if (yych <= 'f') goto yy526;
		goto yy523;
	}
yy531:
	++YYCURSOR;
#line 593 "../src/ast/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3170 "src/ast/lex.cc"
yy533:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy523;
		if (yych >= ':') goto yy523;
	} else {
		if (yych <= 'F') goto yy534;
		if (yych <= '`') goto yy523;
		if (yych >= 'g') goto yy523;
	}
yy534:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy523;
		if (yych <= '9') goto yy525;
		goto yy523;
	} else {
		if (yych <= 'F') goto yy525;
		if (yych <= '`') goto yy523;
		if (yych <= 'f') goto yy525;
		goto yy523;
	}
}
#line 609 "../src/ast/lex.re"

}

uint32_t Scanner::lex_str_chr(char quote, bool &end)
{
    end = false;
    tok = cur;
    const uint32_t l = get_line(), c = get_column();

#line 3204 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy537;
		if (yych == '\n') goto yy541;
		goto yy539;
	} else {
		if (yych <= '\r') goto yy543;
		if (yych == '\\') goto yy544;
		goto yy539;
	}
yy537:
	++YYCURSOR;
#line 619 "../src/ast/lex.re"
	{ fail_if_eof(); return 0; }
#line 3223 "src/ast/lex.cc"
yy539:
	++YYCURSOR;
yy540:
#line 625 "../src/ast/lex.re"
	{
        end = tok[0] == quote;
        return static_cast<uint8_t>(tok[0]);
    }
#line 3232 "src/ast/lex.cc"
yy541:
	++YYCURSOR;
#line 620 "../src/ast/lex.re"
	{ fatal_lc(l, c, "newline in character string"); }
#line 3237 "src/ast/lex.cc"
yy543:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy541;
	goto yy540;
yy544:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy545;
				if (yych <= '\t') goto yy546;
				goto yy541;
			} else {
				if (yych == '\r') goto yy548;
				if (yych <= '/') goto yy546;
				goto yy549;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy551;
				if (yych == 'U') goto yy552;
				goto yy546;
			} else {
				if (yych <= 'X') goto yy554;
				if (yych == '\\') goto yy555;
				goto yy546;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy557;
				if (yych <= 'b') goto yy559;
				goto yy546;
			} else {
				if (yych <= 'f') goto yy561;
				if (yych == 'n') goto yy563;
				goto yy546;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy565;
				if (yych <= 's') goto yy546;
				if (yych <= 't') goto yy567;
				goto yy554;
			} else {
				if (yych <= 'v') goto yy569;
				if (yych == 'x') goto yy571;
				goto yy546;
			}
		}
	}
yy545:
#line 623 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in escape sequence"); }
#line 3293 "src/ast/lex.cc"
yy546:
	++YYCURSOR;
yy547:
#line 639 "../src/ast/lex.re"
	{
        if (tok[1] != quote) {
            warn.useless_escape(l, c, tok[1]);
        }
        return static_cast<uint8_t>(tok[1]);
    }
#line 3304 "src/ast/lex.cc"
yy548:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy541;
	goto yy547;
yy549:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy550;
	if (yych <= '7') goto yy572;
yy550:
#line 622 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in octal escape sequence"); }
#line 3317 "src/ast/lex.cc"
yy551:
	++YYCURSOR;
	goto yy550;
yy552:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy553;
		if (yych <= '9') goto yy574;
	} else {
		if (yych <= 'F') goto yy574;
		if (yych <= '`') goto yy553;
		if (yych <= 'f') goto yy574;
	}
yy553:
#line 621 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in hexadecimal escape sequence"); }
#line 3335 "src/ast/lex.cc"
yy554:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy553;
		if (yych <= '9') goto yy575;
		goto yy553;
	} else {
		if (yych <= 'F') goto yy575;
		if (yych <= '`') goto yy553;
		if (yych <= 'f') goto yy575;
		goto yy553;
	}
yy555:
	++YYCURSOR;
#line 638 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3353 "src/ast/lex.cc"
yy557:
	++YYCURSOR;
#line 631 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3358 "src/ast/lex.cc"
yy559:
	++YYCURSOR;
#line 632 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3363 "src/ast/lex.cc"
yy561:
	++YYCURSOR;
#line 633 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3368 "src/ast/lex.cc"
yy563:
	++YYCURSOR;
#line 634 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3373 "src/ast/lex.cc"
yy565:
	++YYCURSOR;
#line 635 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3378 "src/ast/lex.cc"
yy567:
	++YYCURSOR;
#line 636 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3383 "src/ast/lex.cc"
yy569:
	++YYCURSOR;
#line 637 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3388 "src/ast/lex.cc"
yy571:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy553;
		if (yych <= '9') goto yy576;
		goto yy553;
	} else {
		if (yych <= 'F') goto yy576;
		if (yych <= '`') goto yy553;
		if (yych <= 'f') goto yy576;
		goto yy553;
	}
yy572:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy573;
	if (yych <= '7') goto yy577;
yy573:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy550;
	} else {
		goto yy553;
	}
yy574:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy573;
		if (yych <= '9') goto yy579;
		goto yy573;
	} else {
		if (yych <= 'F') goto yy579;
		if (yych <= '`') goto yy573;
		if (yych <= 'f') goto yy579;
		goto yy573;
	}
yy575:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy573;
		if (yych <= '9') goto yy580;
		goto yy573;
	} else {
		if (yych <= 'F') goto yy580;
		if (yych <= '`') goto yy573;
		if (yych <= 'f') goto yy580;
		goto yy573;
	}
yy576:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy573;
		if (yych <= '9') goto yy581;
		goto yy573;
	} else {
		if (yych <= 'F') goto yy581;
		if (yych <= '`') goto yy573;
		if (yych <= 'f') goto yy581;
		goto yy573;
	}
yy577:
	++YYCURSOR;
#line 630 "../src/ast/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3453 "src/ast/lex.cc"
yy579:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy573;
		if (yych <= '9') goto yy583;
		goto yy573;
	} else {
		if (yych <= 'F') goto yy583;
		if (yych <= '`') goto yy573;
		if (yych <= 'f') goto yy583;
		goto yy573;
	}
yy580:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy573;
		if (yych <= '9') goto yy576;
		goto yy573;
	} else {
		if (yych <= 'F') goto yy576;
		if (yych <= '`') goto yy573;
		if (yych <= 'f') goto yy576;
		goto yy573;
	}
yy581:
	++YYCURSOR;
#line 629 "../src/ast/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3482 "src/ast/lex.cc"
yy583:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy573;
		if (yych >= ':') goto yy573;
	} else {
		if (yych <= 'F') goto yy584;
		if (yych <= '`') goto yy573;
		if (yych >= 'g') goto yy573;
	}
yy584:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy573;
		if (yych <= '9') goto yy575;
		goto yy573;
	} else {
		if (yych <= 'F') goto yy575;
		if (yych <= '`') goto yy573;
		if (yych <= 'f') goto yy575;
		goto yy573;
	}
}
#line 645 "../src/ast/lex.re"

}

const AST *Scanner::lex_str(char quote)
{
    const uint32_t line = get_line(), column = get_column();
    std::vector<ASTChar> *str = new std::vector<ASTChar>;
    for (bool end;;) {
        const uint32_t c = lex_str_chr(quote, end);
        if (end) return ast_str(line, column, str, quote == '\'');
        str->push_back(ASTChar(c, get_column()));
    }
}

void Scanner::set_sourceline ()
{
sourceline:
    tok = cur;

#line 3526 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy589;
		} else {
			if (yych <= '\n') goto yy591;
			if (yych <= '\f') goto yy589;
			goto yy593;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy589;
			goto yy594;
		} else {
			if (yych <= '0') goto yy589;
			if (yych <= '9') goto yy595;
			goto yy589;
		}
	}
	++YYCURSOR;
#line 681 "../src/ast/lex.re"
	{ --cur; return; }
#line 3586 "src/ast/lex.cc"
yy589:
	++YYCURSOR;
yy590:
#line 682 "../src/ast/lex.re"
	{ goto sourceline; }
#line 3592 "src/ast/lex.cc"
yy591:
	++YYCURSOR;
#line 680 "../src/ast/lex.re"
	{ tok = cur; return; }
#line 3597 "src/ast/lex.cc"
yy593:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy591;
	goto yy590;
yy594:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x00) goto yy590;
	if (yych == '\n') goto yy590;
	goto yy599;
yy595:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy595;
	}
#line 664 "../src/ast/lex.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe (tok, cur, l)) {
            fatal_lc(get_line(), get_column(), "line number overflow");
        }
        set_line(l);
        goto sourceline;
    }
#line 3623 "src/ast/lex.cc"
yy598:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy599:
	if (yybm[0+yych] & 128) {
		goto yy598;
	}
	if (yych <= '\n') goto yy600;
	if (yych <= '"') goto yy601;
	goto yy603;
yy600:
	YYCURSOR = YYMARKER;
	goto yy590;
yy601:
	++YYCURSOR;
#line 673 "../src/ast/lex.re"
	{
        std::string &name = get_input().escaped_name;
        name = std::string(tok + 1, tok_len () - 2); // strip quotes
        strrreplace(name, "\\", "\\\\");
        goto sourceline;
    }
#line 3647 "src/ast/lex.cc"
yy603:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy600;
	if (yych == '\n') goto yy600;
	goto yy598;
}
#line 683 "../src/ast/lex.re"

}

void Scanner::fail_if_eof() const
{
    if (is_eof()) {
        const uint32_t col = static_cast<uint32_t>(cur - pos) - 1;
        fatal_lc(get_line(), col, "unexpected end of input");
    }
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL

} // end namespace re2c
