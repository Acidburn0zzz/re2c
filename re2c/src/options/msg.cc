#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string>

#include "config.h"
#include "src/options/msg.h"
#include "src/options/ver_to_vernum.h"

extern const char *help; // autogenerated

namespace re2c {

void error(const char *fmt, ...)
{
    fprintf(stderr, "re2c: error: ");

    va_list args;
    va_start(args, fmt);
    vfprintf(stderr, fmt, args);
    va_end(args);

    fprintf(stderr, "\n");
}

void fatal(const char *fmt, ...)
{
    fprintf(stderr, "re2c: error: ");

    va_list args;
    va_start(args, fmt);
    vfprintf(stderr, fmt, args);
    va_end(args);

    fprintf(stderr, "\n");
    exit(1);
}

void fatal_l(const std::string &fname, uint32_t line, const char *fmt, ...)
{
    fprintf(stderr, "%s:%u: error: ", fname.c_str(), line);

    va_list args;
    va_start(args, fmt);
    vfprintf(stderr, fmt, args);
    va_end(args);

    fprintf(stderr, "\n");
    exit(1);
}

void fatal_lc(const std::string &fname, uint32_t line, uint32_t column
    , const char *fmt, ...)
{
    fprintf(stderr, "%s:%u:%u: error: ", fname.c_str(), line, column);

    va_list args;
    va_start(args, fmt);
    vfprintf(stderr, fmt, args);
    va_end(args);

    fprintf(stderr, "\n");
    exit(1);
}

void error_arg(const char *option)
{
    error("expected argument to option %s", option);
}

void warning_start(const std::string &fname, uint32_t line, bool error)
{
    const char *msg = error ? "error" : "warning";
    fprintf(stderr, "%s:%u: %s: ", fname.c_str(), line, msg);
}

void warning_start_lc(const std::string &fname, uint32_t line, uint32_t coln
    , bool error)
{
    const char *msg = error ? "error" : "warning";
    fprintf(stderr, "%s:%u:%u: %s: ", fname.c_str(), line, coln, msg);
}

void warning_end(const char *type, bool error)
{
    if (type != NULL) {
        const char *prefix = error ? "error-" : "";
        fprintf(stderr, " [-W%s%s]", prefix, type);
    }
    fprintf(stderr, "\n");
}

void warning(const char *type, const std::string &fname, uint32_t line
    , bool error, const char *fmt, ...)
{
    warning_start(fname, line, error);

    va_list args;
    va_start(args, fmt);
    vfprintf(stderr, fmt, args);
    va_end(args);

    warning_end(type, error);
}

void warning_lc(const char *type, const std::string &fname, uint32_t line
    , uint32_t coln, bool error, const char *fmt, ...)
{
    warning_start_lc(fname, line, coln, error);

    va_list args;
    va_start(args, fmt);
    vfprintf(stderr, fmt, args);
    va_end(args);

    warning_end(type, error);
}

void usage()
{
    fprintf(stdout, "%s", help);
}

void vernum()
{
    const std::string vn = ver_to_vernum(PACKAGE_VERSION);
    if (vn.empty()) {
        fatal("failed to convert version to vernum");
    }
    printf ("%s\n", vn.c_str ());
}

void version()
{
#ifdef RE2C_DEBUG
    printf("re2c %s (debug)\n", PACKAGE_VERSION);
#else
    printf("re2c %s\n", PACKAGE_VERSION);
#endif
}

std::string incond(const std::string &cond)
{
    std::string s;
    if (!cond.empty()) {
        s += "in condition '";
        s += cond;
        s += "' ";
    }
    return s;
}

} // namespace re2c
