/* Generated by re2c 0.16 on Sun Mar 27 19:51:34 2016 */
#line 1 "../src/parse/lex.re"
#include "src/util/c99_stdint.h"
#include <stddef.h>
#include <string.h>
#include <algorithm>
#include <limits>
#include <string>

#include "src/codegen/output.h"
#include "src/conf/opt.h"
#include "src/conf/warn.h"
#include "src/globals.h"
#include "src/ir/regexp/encoding/enc.h"
#include "src/ir/regexp/regexp.h"
#include "src/parse/code.h"
#include "src/parse/extop.h"
#include "src/parse/input.h"
#include "src/parse/scanner.h"
#include "src/parse/parser.h" // needed by "y.tab.h"
#include "src/parse/unescape.h"
#include "src/util/range.h"
#include "src/util/s_to_n32_unsafe.h"
#include "y.tab.h"

extern YYSTYPE yylval;

#define	YYCTYPE		unsigned char
#define	YYCURSOR	cur
#define	YYLIMIT		lim
#define	YYMARKER	ptr
#define	YYCTXMARKER ctx
#define	YYFILL(n)	{ fill (n); }

namespace re2c
{

// source code is in ASCII: pointers have type 'char *'
// but re2c makes an implicit assumption that YYCTYPE is unsigned
// when it generates comparisons
#line 41 "../src/parse/lex.re"


#line 61 "../src/parse/lex.re"


Scanner::ParseMode Scanner::echo()
{
	bool ignore_eoc = false;
	int  ignore_cnt = 0;

	if (eof && cur == eof) // Catch EOF
	{
		return Stop;
	}

	tok = cur;
echo:

#line 61 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 16) YYFILL(16);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '%') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '$') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '*') {
			if (yych <= ')') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 201 "../src/parse/lex.re"
	{
					if (!ignore_eoc && opts->target == opt_t::CODE)
					{
						out.wraw(tok, tok_len () - 1);
						// -1 so we don't write out the \0
					}
					if(cur == eof)
					{
						return Stop;
					}
				}
#line 131 "src/parse/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 212 "../src/parse/lex.re"
	{
					goto echo;
				}
#line 139 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 188 "../src/parse/lex.re"
	{
					if (ignore_eoc)
					{
						ignore_cnt++;
					}
					else if (opts->target == opt_t::CODE)
					{
						out.wraw(tok, tok_len ());
					}
					tok = pos = cur;
					cline++;
					goto echo;
				}
#line 162 "src/parse/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy18;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy20;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy7;
		} else {
			goto yy5;
		}
	} else {
		goto yy19;
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy21;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 77 "../src/parse/lex.re"
	{
					if (opts->rFlag)
					{
						fatal("found standard 're2c' block while using -r flag");
					}
					if (opts->target == opt_t::CODE)
					{
						const size_t lexeme_len = cur[-1] == '{'
							? sizeof ("%{") - 1
							: sizeof ("/*!re2c") - 1;
						out.wraw(tok, tok_len () - lexeme_len);
					}
					tok = cur;
					return Parse;
				}
#line 225 "src/parse/lex.cc"
yy18:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy22;
	if (yych == '\r') goto yy24;
yy19:
#line 167 "../src/parse/lex.re"
	{
					if (ignore_eoc)
					{
						if (ignore_cnt)
						{
							out.ws("\n").wline_info (cline, get_fname ().c_str ());
						}
						ignore_eoc = false;
						ignore_cnt = 0;
					}
					else if (opts->target == opt_t::CODE)
					{
						out.wraw(tok, tok_len ());
					}
					tok = pos = cur;
					goto echo;
				}
#line 250 "src/parse/lex.cc"
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy25;
	goto yy13;
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy26;
	goto yy13;
yy22:
	++YYCURSOR;
#line 149 "../src/parse/lex.re"
	{
					cline++;
					if (ignore_eoc)
					{
						if (ignore_cnt)
						{
							out.wline_info (cline, get_fname ().c_str ());
						}
						ignore_eoc = false;
						ignore_cnt = 0;
					}
					else if (opts->target == opt_t::CODE)
					{
						out.wraw(tok, tok_len ());
					}
					tok = pos = cur;
					goto echo;
				}
#line 280 "src/parse/lex.cc"
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy22;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy27;
	case 'i':	goto yy28;
	case 'm':	goto yy29;
	case 'r':	goto yy30;
	case 't':	goto yy31;
	case 'u':	goto yy32;
	default:	goto yy13;
	}
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy33;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy34;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy35;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy36;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy37;
	if (yych == 'u') goto yy38;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy39;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy40;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy41;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy42;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy43;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy44;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy45;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy46;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy47;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy48;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy50;
	if (yych <= '9') goto yy13;
	goto yy50;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy51;
	goto yy13;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy52;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy53;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy54;
	goto yy13;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy55;
	goto yy13;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy56;
	goto yy13;
yy49:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	YYCTXMARKER = YYCURSOR;
yy50:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy49;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy49;
		if (yych <= '0') goto yy13;
		if (yych <= '9') goto yy57;
		goto yy13;
	}
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy59;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy60;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy61;
	goto yy13;
yy54:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy62;
	goto yy13;
yy55:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy63;
	goto yy13;
yy56:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy64;
	goto yy13;
yy57:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy57;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy65;
		if (yych <= '\n') goto yy67;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy69;
		if (yych == ' ') goto yy65;
		goto yy13;
	}
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy70;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy71;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy72;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy73;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy74;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy75;
	goto yy13;
yy65:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy65;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy65;
		if (yych == '"') goto yy76;
		goto yy13;
	}
yy67:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 184 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto echo;
				}
#line 490 "src/parse/lex.cc"
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy67;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy78;
	goto yy13;
yy71:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy79;
	goto yy13;
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy80;
	goto yy13;
yy73:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy81;
	goto yy13;
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy82;
	goto yy13;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy83;
	goto yy13;
yy76:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy76;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy84;
	goto yy85;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy86;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy87;
	goto yy13;
yy80:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy88;
	goto yy13;
yy81:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy90;
	goto yy13;
yy82:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy91;
	goto yy13;
yy83:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy92;
	goto yy13;
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy67;
	if (yych == '\r') goto yy69;
	goto yy13;
yy85:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy13;
	goto yy76;
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy94;
	goto yy13;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy95;
	goto yy13;
yy88:
	++YYCURSOR;
#line 118 "../src/parse/lex.re"
	{
					if (opts->target != opt_t::DOT)
					{
						out.wdelay_yymaxfill ();
					}
					tok = pos = cur;
					ignore_eoc = true;
					goto echo;
				}
#line 584 "src/parse/lex.cc"
yy90:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy96;
	goto yy13;
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy97;
	goto yy13;
yy92:
	++YYCURSOR;
#line 104 "../src/parse/lex.re"
	{
					if (!opts->rFlag)
					{
						fatal("found 'use:re2c' block without -r flag");
					}
					reuse();
					if (opts->target == opt_t::CODE)
					{
						const size_t lexeme_len = sizeof ("/*!use:re2c") - 1;
						out.wraw(tok, tok_len () - lexeme_len);
					}
					tok = cur;
					return Reuse;
				}
#line 610 "src/parse/lex.cc"
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy98;
	goto yy13;
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy99;
	goto yy13;
yy96:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy100;
	goto yy13;
yy97:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy102;
	goto yy13;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy104;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy105;
	goto yy13;
yy100:
	++YYCURSOR;
#line 92 "../src/parse/lex.re"
	{
					if (opts->rFlag)
					{
						opts.reset_mapCodeName ();
					}
					else
					{
						fatal("found 'rules:re2c' block without -r flag");
					}
					tok = cur;
					return Rules;
				}
#line 650 "src/parse/lex.cc"
yy102:
	++YYCURSOR;
#line 138 "../src/parse/lex.re"
	{
					tok = pos = cur;
					ignore_eoc = true;
					if (opts->target != opt_t::DOT)
					{
						out.wdelay_line_info ().ws("\n")
							.wdelay_types ().ws("\n")
							.wline_info (cline, get_fname ().c_str ());
					}
					goto echo;
				}
#line 665 "src/parse/lex.cc"
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy107;
	goto yy13;
yy105:
	++YYCURSOR;
#line 133 "../src/parse/lex.re"
	{
					tok = pos = cur;
					ignore_eoc = true;
					goto echo;
				}
#line 678 "src/parse/lex.cc"
yy107:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
#line 127 "../src/parse/lex.re"
	{
					tok = pos = cur;
					out.wdelay_state_goto (opts->topIndent);
					ignore_eoc = true;
					goto echo;
				}
#line 690 "src/parse/lex.cc"
}
#line 215 "../src/parse/lex.re"

}

int Scanner::scan()
{
	uint32_t depth;

scan:
	tchar = cur - pos;
	tline = cline;
	tok = cur;
	switch (lexer_state)
	{
		case LEX_NORMAL:    goto start;
		case LEX_FLEX_NAME: goto flex_name;
	}

start:

#line 712 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 6) YYFILL(6);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy114;
	}
	if (yych <= '9') {
		if (yych <= '&') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy112;
				if (yych <= '\n') goto yy117;
				if (yych >= '\r') goto yy119;
			} else {
				if (yych <= '"') {
					if (yych >= '"') goto yy120;
				} else {
					if (yych == '%') goto yy122;
				}
			}
		} else {
			if (yych <= '+') {
				if (yych <= '\'') goto yy123;
				if (yych <= ')') goto yy125;
				if (yych <= '*') goto yy127;
				goto yy129;
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy125;
				} else {
					if (yych <= '.') goto yy131;
					if (yych <= '/') goto yy133;
					goto yy134;
				}
			}
		}
	} else {
		if (yych <= '\\') {
			if (yych <= '>') {
				if (yych <= ':') goto yy135;
				if (yych == '<') goto yy136;
				goto yy125;
			} else {
				if (yych <= '@') {
					if (yych <= '?') goto yy129;
					goto yy137;
				} else {
					if (yych <= 'Z') goto yy134;
					if (yych <= '[') goto yy138;
					goto yy125;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych == '_') goto yy134;
				if (yych >= 'a') goto yy134;
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy140;
					goto yy134;
				} else {
					if (yych <= '{') goto yy141;
					if (yych <= '|') goto yy125;
				}
			}
		}
	}
yy112:
	++YYCURSOR;
yy113:
#line 393 "../src/parse/lex.re"
	{
					fatalf("unexpected character: '%c'", *tok);
					goto scan;
				}
#line 823 "src/parse/lex.cc"
yy114:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy114;
	}
#line 377 "../src/parse/lex.re"
	{
					goto scan;
				}
#line 835 "src/parse/lex.cc"
yy117:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy143;
	} else {
		if (yych <= ' ') goto yy143;
		if (yych == '#') goto yy146;
	}
yy118:
#line 386 "../src/parse/lex.re"
	{
					if (cur == eof) return 0;
					pos = cur;
					cline++;
					goto scan;
				}
#line 853 "src/parse/lex.cc"
yy119:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy117;
	goto yy113;
yy120:
	++YYCURSOR;
#line 264 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"',  opts->bCaseInsensitive ||  opts->bCaseInverted); return TOKEN_REGEXP; }
#line 862 "src/parse/lex.cc"
yy122:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy148;
	goto yy113;
yy123:
	++YYCURSOR;
#line 263 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\'', opts->bCaseInsensitive || !opts->bCaseInverted); return TOKEN_REGEXP; }
#line 871 "src/parse/lex.cc"
yy125:
	++YYCURSOR;
yy126:
#line 280 "../src/parse/lex.re"
	{
					return *tok;
				}
#line 879 "src/parse/lex.cc"
yy127:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '/') goto yy148;
#line 284 "../src/parse/lex.re"
	{
					yylval.op = *tok;
					return TOKEN_STAR;
				}
#line 888 "src/parse/lex.cc"
yy129:
	++YYCURSOR;
#line 288 "../src/parse/lex.re"
	{
					yylval.op = *tok;
					return TOKEN_CLOSE;
				}
#line 896 "src/parse/lex.cc"
yy131:
	++YYCURSOR;
#line 372 "../src/parse/lex.re"
	{
					yylval.regexp = mkDot();
					return TOKEN_REGEXP;
				}
#line 904 "src/parse/lex.cc"
yy133:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy150;
	if (yych == '/') goto yy152;
	goto yy126;
yy134:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	goto yy160;
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy161;
	goto yy113;
yy136:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '!') goto yy163;
	if (yych == '>') goto yy165;
	goto yy126;
yy137:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy113;
		if (yych <= '9') goto yy166;
		if (yych <= '@') goto yy113;
		goto yy166;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy113;
			goto yy166;
		} else {
			if (yych <= '`') goto yy113;
			if (yych <= 'z') goto yy166;
			goto yy113;
		}
	}
yy138:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '^') goto yy169;
#line 265 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 946 "src/parse/lex.cc"
yy140:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	if (yych == 'e') goto yy171;
	goto yy160;
yy141:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy174;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy172;
		if (yych >= 'A') goto yy176;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy176;
		} else {
			if (yych <= '`') goto yy142;
			if (yych <= 'z') goto yy176;
		}
	}
yy142:
#line 234 "../src/parse/lex.re"
	{
					depth = 1;
					goto code;
				}
#line 975 "src/parse/lex.cc"
yy143:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy143;
	} else {
		if (yych <= ' ') goto yy143;
		if (yych == '#') goto yy146;
	}
yy145:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy118;
		} else {
			goto yy126;
		}
	} else {
		if (yyaccept == 2) {
			goto yy142;
		} else {
			goto yy173;
		}
	}
yy146:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy146;
		goto yy145;
	} else {
		if (yych <= ' ') goto yy146;
		if (yych == 'l') goto yy178;
		goto yy145;
	}
yy148:
	++YYCURSOR;
#line 258 "../src/parse/lex.re"
	{
					tok = cur;
					return 0;
				}
#line 1020 "src/parse/lex.cc"
yy150:
	++YYCURSOR;
#line 252 "../src/parse/lex.re"
	{
					depth = 1;
					goto comment;
				}
#line 1028 "src/parse/lex.cc"
yy152:
	++YYCURSOR;
#line 249 "../src/parse/lex.re"
	{
				goto nextLine;
			}
#line 1035 "src/parse/lex.cc"
yy154:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 356 "../src/parse/lex.re"
	{
					if (!opts->FFlag) {
						yylval.str = new std::string (tok, tok_len());
						return TOKEN_ID;
					} else {
						const RegExp *r = NULL;
						const bool casing = opts->bCaseInsensitive || opts->bCaseInverted;
						for (char *s = tok; s < cur; ++s) {
							const uint32_t c = static_cast<uint8_t>(*s);
							r = doCat(r, casing ? ichr(c) : schr(c));
						}
						yylval.regexp = r ? r : RegExp::nil();
						return TOKEN_REGEXP;
					}
				}
#line 1055 "src/parse/lex.cc"
yy156:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy182;
yy157:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 351 "../src/parse/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					return TOKEN_ID;
				}
#line 1067 "src/parse/lex.cc"
yy159:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	YYCTXMARKER = YYCURSOR;
yy160:
	if (yybm[0+yych] & 32) {
		goto yy159;
	}
	if (yych <= ' ') {
		if (yych == '\t') goto yy156;
		if (yych <= 0x1F) goto yy154;
		goto yy156;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy154;
			goto yy157;
		} else {
			if (yych <= '<') goto yy154;
			if (yych <= '>') goto yy157;
			goto yy154;
		}
	}
yy161:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '>') goto yy183;
#line 243 "../src/parse/lex.re"
	{
					tok += 2; /* skip ":=" */
					depth = 0;
					goto code;
				}
#line 1100 "src/parse/lex.cc"
yy163:
	++YYCURSOR;
#line 271 "../src/parse/lex.re"
	{
					return TOKEN_SETUP;
				}
#line 1107 "src/parse/lex.cc"
yy165:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	goto yy186;
yy166:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy168;
		if (yych <= '9') goto yy166;
		if (yych >= 'A') goto yy166;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy166;
		} else {
			if (yych <= '`') goto yy168;
			if (yych <= 'z') goto yy166;
		}
	}
yy168:
#line 275 "../src/parse/lex.re"
	{
		yylval.str = new std::string(tok + 1, tok_len() - 1);
		return TOKEN_CTX;
	}
#line 1134 "src/parse/lex.cc"
yy169:
	++YYCURSOR;
#line 266 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1139 "src/parse/lex.cc"
yy171:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	if (yych == '2') goto yy191;
	goto yy160;
yy172:
	++YYCURSOR;
yy173:
#line 324 "../src/parse/lex.re"
	{
					fatal("illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
				}
#line 1152 "src/parse/lex.cc"
yy174:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy174;
	}
	if (yych <= '^') {
		if (yych <= ',') {
			if (yych <= '+') goto yy145;
			goto yy192;
		} else {
			if (yych <= '@') goto yy145;
			if (yych >= '[') goto yy145;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy145;
		} else {
			if (yych == '}') goto yy193;
			goto yy145;
		}
	}
yy176:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy145;
			goto yy176;
		} else {
			if (yych <= '@') goto yy145;
			if (yych <= 'Z') goto yy176;
			goto yy145;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy145;
			goto yy176;
		} else {
			if (yych == '}') goto yy195;
			goto yy145;
		}
	}
yy178:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy197;
	goto yy145;
yy179:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 338 "../src/parse/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					if (opts->FFlag)
					{
						lexer_state = LEX_FLEX_NAME;
						return TOKEN_FID;
					}
					else
					{
						return TOKEN_ID;
					}
				}
#line 1218 "src/parse/lex.cc"
yy181:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy182:
	if (yych <= ' ') {
		if (yych == '\t') goto yy181;
		if (yych <= 0x1F) goto yy179;
		goto yy181;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy179;
			goto yy157;
		} else {
			if (yych <= '<') goto yy179;
			if (yych <= '>') goto yy157;
			goto yy179;
		}
	}
yy183:
	++YYCURSOR;
	YYCURSOR -= 2;
#line 239 "../src/parse/lex.re"
	{
					return *tok;
				}
#line 1245 "src/parse/lex.cc"
yy185:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
yy186:
	if (yych <= '9') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy145;
			goto yy185;
		} else {
			if (yych == ' ') goto yy185;
			goto yy145;
		}
	} else {
		if (yych <= '=') {
			if (yych <= ':') goto yy187;
			if (yych <= '<') goto yy145;
			goto yy188;
		} else {
			if (yych == '{') goto yy189;
			goto yy145;
		}
	}
yy187:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy189;
	goto yy145;
yy188:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '>') goto yy145;
yy189:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 268 "../src/parse/lex.re"
	{
					return TOKEN_NOCOND;
				}
#line 1283 "src/parse/lex.cc"
yy191:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	if (yych == 'c') goto yy198;
	goto yy160;
yy192:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy173;
	if (yych <= '9') goto yy199;
	if (yych == '}') goto yy201;
	goto yy173;
yy193:
	++YYCURSOR;
#line 293 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.extop.min))
					{
						fatal ("repetition count overflow");
					}
					yylval.extop.max = yylval.extop.min;
					return TOKEN_CLOSESIZE;
				}
#line 1307 "src/parse/lex.cc"
yy195:
	++YYCURSOR;
#line 328 "../src/parse/lex.re"
	{
					if (!opts->FFlag) {
						fatal("curly braces for names only allowed with -F switch");
					}
					yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
					return TOKEN_ID;
				}
#line 1318 "src/parse/lex.cc"
yy197:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy203;
	goto yy145;
yy198:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	if (yych == ':') goto yy204;
	goto yy160;
yy199:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy145;
	if (yych <= '9') goto yy199;
	if (yych == '}') goto yy206;
	goto yy145;
yy201:
	++YYCURSOR;
#line 315 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					yylval.extop.max = std::numeric_limits<uint32_t>::max();
					return TOKEN_CLOSESIZE;
				}
#line 1347 "src/parse/lex.cc"
yy203:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy208;
	goto yy145;
yy204:
	++YYCURSOR;
#line 336 "../src/parse/lex.re"
	{ lex_conf (); return TOKEN_CONF; }
#line 1356 "src/parse/lex.cc"
yy206:
	++YYCURSOR;
#line 302 "../src/parse/lex.re"
	{
					const char * p = strchr (tok, ',');
					if (!s_to_u32_unsafe (tok + 1, p, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.extop.max))
					{
						fatal ("repetition upper bound overflow");
					}
					return TOKEN_CLOSESIZE;
				}
#line 1372 "src/parse/lex.cc"
yy208:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy210;
	if (yych <= '9') goto yy145;
	goto yy210;
yy209:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	YYCTXMARKER = YYCURSOR;
yy210:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy209;
		goto yy145;
	} else {
		if (yych <= ' ') goto yy209;
		if (yych <= '0') goto yy145;
		if (yych >= ':') goto yy145;
	}
yy211:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy145;
		} else {
			if (yych <= '\n') goto yy215;
			if (yych <= '\f') goto yy145;
			goto yy217;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy145;
		} else {
			if (yych <= '/') goto yy145;
			if (yych <= '9') goto yy211;
			goto yy145;
		}
	}
yy213:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy213;
		goto yy145;
	} else {
		if (yych <= ' ') goto yy213;
		if (yych == '"') goto yy218;
		goto yy145;
	}
yy215:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 381 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto scan;
				}
#line 1433 "src/parse/lex.cc"
yy217:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy215;
	goto yy145;
yy218:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy218;
	}
	if (yych <= '\n') goto yy145;
	if (yych >= '#') goto yy221;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy215;
	if (yych == '\r') goto yy217;
	goto yy145;
yy221:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy145;
	goto yy218;
}
#line 397 "../src/parse/lex.re"


flex_name:

#line 1463 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy226;
	if (yych == '\r') goto yy228;
	++YYCURSOR;
yy225:
#line 408 "../src/parse/lex.re"
	{
		YYCURSOR = tok;
		goto start;
	}
#line 1477 "src/parse/lex.cc"
yy226:
	++YYCURSOR;
#line 402 "../src/parse/lex.re"
	{
		YYCURSOR = tok;
		lexer_state = LEX_NORMAL;
		return TOKEN_FID_END;
	}
#line 1486 "src/parse/lex.cc"
yy228:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '\n') goto yy226;
	goto yy225;
}
#line 412 "../src/parse/lex.re"


code:

#line 1497 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96, 112,   0,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		112,  96,  64,  96,  96,  96,  96,  32, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,   0,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy231;
			if (yych <= '\t') goto yy233;
			goto yy235;
		} else {
			if (yych == '"') goto yy237;
			goto yy233;
		}
	} else {
		if (yych <= '{') {
			if (yych <= '\'') goto yy238;
			if (yych <= 'z') goto yy233;
			goto yy239;
		} else {
			if (yych == '}') goto yy241;
			goto yy233;
		}
	}
yy231:
	++YYCURSOR;
#line 475 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						if (depth)
						{
							fatal("missing '}'");
						}
						return 0;
					}
					goto code;
				}
#line 1570 "src/parse/lex.cc"
yy233:
	++YYCURSOR;
yy234:
#line 489 "../src/parse/lex.re"
	{
					goto code;
				}
#line 1578 "src/parse/lex.cc"
yy235:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy243;
		} else {
			if (yych <= '\n') goto yy245;
			if (yych >= '\r') goto yy245;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy243;
		} else {
			if (yych == '#') goto yy246;
		}
	}
yy236:
#line 456 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						tok += strspn(tok, " \t\r\n");
						while (cur > tok && strchr(" \t\r\n", cur[-1]))
						{
							--cur;
						}
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return TOKEN_CODE;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1617 "src/parse/lex.cc"
yy237:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy234;
	goto yy250;
yy238:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy234;
	goto yy255;
yy239:
	++YYCURSOR;
#line 428 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else
					{
						++depth;
					}
					goto code;
				}
#line 1642 "src/parse/lex.cc"
yy241:
	++YYCURSOR;
#line 416 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else if (--depth == 0)
					{
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return TOKEN_CODE;
					}
					goto code;
				}
#line 1658 "src/parse/lex.cc"
yy243:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy257;
	} else {
		if (yych <= ' ') goto yy257;
		if (yych == '#') goto yy246;
	}
yy244:
	YYCURSOR -= 1;
#line 443 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						goto code;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1684 "src/parse/lex.cc"
yy245:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy244;
yy246:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy246;
	}
	if (yych == 'l') goto yy259;
yy248:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy236;
		} else {
			goto yy234;
		}
	} else {
		goto yy244;
	}
yy249:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy250:
	if (yybm[0+yych] & 32) {
		goto yy249;
	}
	if (yych <= '\n') goto yy248;
	if (yych >= '#') goto yy253;
yy251:
	++YYCURSOR;
#line 486 "../src/parse/lex.re"
	{
					goto code;
				}
#line 1723 "src/parse/lex.cc"
yy253:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy248;
	goto yy249;
yy254:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy255:
	if (yybm[0+yych] & 64) {
		goto yy254;
	}
	if (yych <= '\n') goto yy248;
	if (yych <= '\'') goto yy251;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy248;
	goto yy254;
yy257:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy257;
		goto yy248;
	} else {
		if (yych <= ' ') goto yy257;
		if (yych == '#') goto yy246;
		goto yy248;
	}
yy259:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy248;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy248;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy248;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy264;
	if (yych <= '9') goto yy248;
	goto yy264;
yy263:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	YYCTXMARKER = YYCURSOR;
yy264:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy263;
		goto yy248;
	} else {
		if (yych <= ' ') goto yy263;
		if (yych <= '0') goto yy248;
		if (yych >= ':') goto yy248;
	}
yy265:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy265;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy248;
		if (yych <= '\t') goto yy267;
		if (yych <= '\n') goto yy269;
		goto yy248;
	} else {
		if (yych <= '\r') goto yy271;
		if (yych != ' ') goto yy248;
	}
yy267:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy267;
		goto yy248;
	} else {
		if (yych <= ' ') goto yy267;
		if (yych == '"') goto yy272;
		goto yy248;
	}
yy269:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 439 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto code;
				}
#line 1818 "src/parse/lex.cc"
yy271:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy269;
	goto yy248;
yy272:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy248;
		goto yy272;
	} else {
		if (yych <= '"') goto yy274;
		if (yych == '\\') goto yy275;
		goto yy272;
	}
yy274:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy269;
	if (yych == '\r') goto yy271;
	goto yy248;
yy275:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy248;
	goto yy272;
}
#line 492 "../src/parse/lex.re"


comment:

#line 1852 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ')') {
		if (yych == '\n') goto yy280;
	} else {
		if (yych <= '*') goto yy282;
		if (yych == '/') goto yy283;
	}
	++YYCURSOR;
yy279:
#line 524 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					goto comment;
				}
#line 1907 "src/parse/lex.cc"
yy280:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy284;
	}
	if (yych == '#') goto yy287;
yy281:
#line 515 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					tok = pos = cur;
					cline++;
					goto comment;
				}
#line 1925 "src/parse/lex.cc"
yy282:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy289;
	goto yy279;
yy283:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy291;
	goto yy279;
yy284:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy284;
	}
	if (yych == '#') goto yy287;
yy286:
	YYCURSOR = YYMARKER;
	goto yy281;
yy287:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy287;
		goto yy286;
	} else {
		if (yych <= ' ') goto yy287;
		if (yych == 'l') goto yy293;
		goto yy286;
	}
yy289:
	++YYCURSOR;
#line 496 "../src/parse/lex.re"
	{
					if (--depth == 0)
					{
						goto scan;
					}
					else
					{
						goto comment;
					}
				}
#line 1970 "src/parse/lex.cc"
yy291:
	++YYCURSOR;
#line 506 "../src/parse/lex.re"
	{
					++depth;
					fatal("ambiguous /* found");
					goto comment;
				}
#line 1979 "src/parse/lex.cc"
yy293:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy286;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy286;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy286;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy298;
	if (yych <= '9') goto yy286;
	goto yy298;
yy297:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	YYCTXMARKER = YYCURSOR;
yy298:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy297;
		goto yy286;
	} else {
		if (yych <= ' ') goto yy297;
		if (yych <= '0') goto yy286;
		if (yych >= ':') goto yy286;
	}
yy299:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy299;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy286;
		if (yych <= '\t') goto yy301;
		if (yych <= '\n') goto yy303;
		goto yy286;
	} else {
		if (yych <= '\r') goto yy305;
		if (yych != ' ') goto yy286;
	}
yy301:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy301;
		goto yy286;
	} else {
		if (yych <= ' ') goto yy301;
		if (yych == '"') goto yy306;
		goto yy286;
	}
yy303:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 511 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto comment;
				}
#line 2041 "src/parse/lex.cc"
yy305:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy303;
	goto yy286;
yy306:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy306;
	}
	if (yych <= '\n') goto yy286;
	if (yych >= '#') goto yy309;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy303;
	if (yych == '\r') goto yy305;
	goto yy286;
yy309:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy286;
	goto yy306;
}
#line 531 "../src/parse/lex.re"


nextLine:

#line 2071 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy314;
	++YYCURSOR;
#line 542 "../src/parse/lex.re"
	{  if(cur == eof) {
                  return 0;
               }
               goto nextLine;
            }
#line 2084 "src/parse/lex.cc"
yy314:
	++YYCURSOR;
#line 535 "../src/parse/lex.re"
	{ if(cur == eof) {
                  return 0;
               }
               tok = pos = cur;
               cline++;
               goto scan;
            }
#line 2095 "src/parse/lex.cc"
}
#line 547 "../src/parse/lex.re"

}

static void escape (std::string & dest, const std::string & src)
{
	dest = src;
	size_t l = dest.length();
	for (size_t p = 0; p < l; ++p)
	{
		if (dest[p] == '\\')
		{
			dest.insert(++p, "\\");
			++l;
		}
	}
}

const RegExp *Scanner::lex_cls(bool neg)
{
	Range *r = NULL, *s;
	uint32_t u, l;
fst:
	
#line 2121 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy319;
#line 571 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 2129 "src/parse/lex.cc"
yy319:
	++YYCURSOR;
#line 570 "../src/parse/lex.re"
	{ goto end; }
#line 2134 "src/parse/lex.cc"
}
#line 572 "../src/parse/lex.re"

snd:
	
#line 2140 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy324;
yy323:
#line 575 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 2149 "src/parse/lex.cc"
yy324:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy326;
	YYCURSOR = YYMARKER;
	goto yy323;
yy326:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 576 "../src/parse/lex.re"
	{
			u = lex_cls_chr();
			if (l > u) {
				warn.swapped_range(get_line(), l, u);
				std::swap(l, u);
			}
			goto add;
		}
#line 2167 "src/parse/lex.cc"
}
#line 584 "../src/parse/lex.re"

add:
	if (!(s = opts->encoding.encodeRange(l, u))) {
		fatalf ("Bad code point range: '0x%X - 0x%X'", l, u);
	}
	r = Range::add(r, s);
	goto fst;
end:
	if (neg) {
		r = Range::sub(opts->encoding.fullRange(), r);
	}
	return cls(r);
}

uint32_t Scanner::lex_cls_chr()
{
	tok = cur;
	
#line 2188 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy332;
	if (yych == '\\') goto yy334;
	++YYCURSOR;
#line 607 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(tok[0]); }
#line 2199 "src/parse/lex.cc"
yy332:
	++YYCURSOR;
#line 602 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error"); }
#line 2204 "src/parse/lex.cc"
yy334:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '`') {
		if (yych <= '7') {
			if (yych <= ',') {
				if (yych != '\n') goto yy336;
			} else {
				if (yych <= '-') goto yy338;
				if (yych <= '/') goto yy336;
				if (yych <= '3') goto yy340;
				goto yy342;
			}
		} else {
			if (yych <= 'X') {
				if (yych == 'U') goto yy343;
				if (yych <= 'W') goto yy336;
				goto yy345;
			} else {
				if (yych <= '[') goto yy336;
				if (yych <= '\\') goto yy346;
				if (yych <= ']') goto yy348;
				goto yy336;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy350;
				if (yych <= 'b') goto yy352;
				goto yy336;
			} else {
				if (yych <= 'f') goto yy354;
				if (yych == 'n') goto yy356;
				goto yy336;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy358;
				if (yych <= 's') goto yy336;
				if (yych <= 't') goto yy360;
				goto yy345;
			} else {
				if (yych <= 'v') goto yy362;
				if (yych == 'x') goto yy364;
				goto yy336;
			}
		}
	}
#line 605 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in escape sequence"); }
#line 2255 "src/parse/lex.cc"
yy336:
	++YYCURSOR;
#line 620 "../src/parse/lex.re"
	{
			warn.useless_escape(tline, tok - pos, tok[1]);
			return static_cast<uint8_t>(tok[1]);
		}
#line 2263 "src/parse/lex.cc"
yy338:
	++YYCURSOR;
#line 618 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 2268 "src/parse/lex.cc"
yy340:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy341;
	if (yych <= '7') goto yy365;
yy341:
#line 604 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in octal escape sequence"); }
#line 2277 "src/parse/lex.cc"
yy342:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy341;
yy343:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy344;
		if (yych <= '9') goto yy367;
	} else {
		if (yych <= 'F') goto yy367;
		if (yych <= '`') goto yy344;
		if (yych <= 'f') goto yy367;
	}
yy344:
#line 603 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2295 "src/parse/lex.cc"
yy345:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy344;
		if (yych <= '9') goto yy368;
		goto yy344;
	} else {
		if (yych <= 'F') goto yy368;
		if (yych <= '`') goto yy344;
		if (yych <= 'f') goto yy368;
		goto yy344;
	}
yy346:
	++YYCURSOR;
#line 617 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2313 "src/parse/lex.cc"
yy348:
	++YYCURSOR;
#line 619 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 2318 "src/parse/lex.cc"
yy350:
	++YYCURSOR;
#line 610 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2323 "src/parse/lex.cc"
yy352:
	++YYCURSOR;
#line 611 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2328 "src/parse/lex.cc"
yy354:
	++YYCURSOR;
#line 612 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2333 "src/parse/lex.cc"
yy356:
	++YYCURSOR;
#line 613 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2338 "src/parse/lex.cc"
yy358:
	++YYCURSOR;
#line 614 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2343 "src/parse/lex.cc"
yy360:
	++YYCURSOR;
#line 615 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2348 "src/parse/lex.cc"
yy362:
	++YYCURSOR;
#line 616 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2353 "src/parse/lex.cc"
yy364:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy344;
		if (yych <= '9') goto yy369;
		goto yy344;
	} else {
		if (yych <= 'F') goto yy369;
		if (yych <= '`') goto yy344;
		if (yych <= 'f') goto yy369;
		goto yy344;
	}
yy365:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy366;
	if (yych <= '7') goto yy370;
yy366:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy341;
	} else {
		goto yy344;
	}
yy367:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy366;
		if (yych <= '9') goto yy372;
		goto yy366;
	} else {
		if (yych <= 'F') goto yy372;
		if (yych <= '`') goto yy366;
		if (yych <= 'f') goto yy372;
		goto yy366;
	}
yy368:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy366;
		if (yych <= '9') goto yy373;
		goto yy366;
	} else {
		if (yych <= 'F') goto yy373;
		if (yych <= '`') goto yy366;
		if (yych <= 'f') goto yy373;
		goto yy366;
	}
yy369:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy366;
		if (yych <= '9') goto yy374;
		goto yy366;
	} else {
		if (yych <= 'F') goto yy374;
		if (yych <= '`') goto yy366;
		if (yych <= 'f') goto yy374;
		goto yy366;
	}
yy370:
	++YYCURSOR;
#line 609 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2418 "src/parse/lex.cc"
yy372:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy366;
		if (yych <= '9') goto yy376;
		goto yy366;
	} else {
		if (yych <= 'F') goto yy376;
		if (yych <= '`') goto yy366;
		if (yych <= 'f') goto yy376;
		goto yy366;
	}
yy373:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy366;
		if (yych <= '9') goto yy369;
		goto yy366;
	} else {
		if (yych <= 'F') goto yy369;
		if (yych <= '`') goto yy366;
		if (yych <= 'f') goto yy369;
		goto yy366;
	}
yy374:
	++YYCURSOR;
#line 608 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2447 "src/parse/lex.cc"
yy376:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy366;
		if (yych >= ':') goto yy366;
	} else {
		if (yych <= 'F') goto yy377;
		if (yych <= '`') goto yy366;
		if (yych >= 'g') goto yy366;
	}
yy377:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '@') {
		if (yych <= '/') goto yy366;
		if (yych <= '9') goto yy368;
		goto yy366;
	} else {
		if (yych <= 'F') goto yy368;
		if (yych <= '`') goto yy366;
		if (yych <= 'f') goto yy368;
		goto yy366;
	}
}
#line 624 "../src/parse/lex.re"

}

uint32_t Scanner::lex_str_chr(char quote, bool &end)
{
	end = false;
	tok = cur;
	
#line 2480 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy382;
	if (yych == '\\') goto yy384;
	++YYCURSOR;
#line 637 "../src/parse/lex.re"
	{
			end = tok[0] == quote;
			return static_cast<uint8_t>(tok[0]);
		}
#line 2494 "src/parse/lex.cc"
yy382:
	++YYCURSOR;
#line 632 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error"); }
#line 2499 "src/parse/lex.cc"
yy384:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= 'a') {
		if (yych <= 'T') {
			if (yych <= '/') {
				if (yych != '\n') goto yy386;
			} else {
				if (yych <= '3') goto yy388;
				if (yych <= '7') goto yy390;
				goto yy386;
			}
		} else {
			if (yych <= 'X') {
				if (yych <= 'U') goto yy391;
				if (yych <= 'W') goto yy386;
				goto yy393;
			} else {
				if (yych == '\\') goto yy394;
				if (yych <= '`') goto yy386;
				goto yy396;
			}
		}
	} else {
		if (yych <= 'r') {
			if (yych <= 'f') {
				if (yych <= 'b') goto yy398;
				if (yych <= 'e') goto yy386;
				goto yy400;
			} else {
				if (yych == 'n') goto yy402;
				if (yych <= 'q') goto yy386;
				goto yy404;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 's') goto yy386;
				if (yych <= 't') goto yy406;
				goto yy393;
			} else {
				if (yych <= 'v') goto yy408;
				if (yych == 'x') goto yy410;
				goto yy386;
			}
		}
	}
#line 635 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in escape sequence"); }
#line 2547 "src/parse/lex.cc"
yy386:
	++YYCURSOR;
#line 651 "../src/parse/lex.re"
	{
			if (tok[1] != quote) {
				warn.useless_escape(tline, tok - pos, tok[1]);
			}
			return static_cast<uint8_t>(tok[1]);
		}
#line 2557 "src/parse/lex.cc"
yy388:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy389;
	if (yych <= '7') goto yy411;
yy389:
#line 634 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in octal escape sequence"); }
#line 2566 "src/parse/lex.cc"
yy390:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy389;
yy391:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy392;
		if (yych <= '9') goto yy413;
	} else {
		if (yych <= 'F') goto yy413;
		if (yych <= '`') goto yy392;
		if (yych <= 'f') goto yy413;
	}
yy392:
#line 633 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2584 "src/parse/lex.cc"
yy393:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy392;
		if (yych <= '9') goto yy414;
		goto yy392;
	} else {
		if (yych <= 'F') goto yy414;
		if (yych <= '`') goto yy392;
		if (yych <= 'f') goto yy414;
		goto yy392;
	}
yy394:
	++YYCURSOR;
#line 650 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2602 "src/parse/lex.cc"
yy396:
	++YYCURSOR;
#line 643 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2607 "src/parse/lex.cc"
yy398:
	++YYCURSOR;
#line 644 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2612 "src/parse/lex.cc"
yy400:
	++YYCURSOR;
#line 645 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2617 "src/parse/lex.cc"
yy402:
	++YYCURSOR;
#line 646 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2622 "src/parse/lex.cc"
yy404:
	++YYCURSOR;
#line 647 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2627 "src/parse/lex.cc"
yy406:
	++YYCURSOR;
#line 648 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2632 "src/parse/lex.cc"
yy408:
	++YYCURSOR;
#line 649 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2637 "src/parse/lex.cc"
yy410:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy392;
		if (yych <= '9') goto yy415;
		goto yy392;
	} else {
		if (yych <= 'F') goto yy415;
		if (yych <= '`') goto yy392;
		if (yych <= 'f') goto yy415;
		goto yy392;
	}
yy411:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy412;
	if (yych <= '7') goto yy416;
yy412:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy389;
	} else {
		goto yy392;
	}
yy413:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy412;
		if (yych <= '9') goto yy418;
		goto yy412;
	} else {
		if (yych <= 'F') goto yy418;
		if (yych <= '`') goto yy412;
		if (yych <= 'f') goto yy418;
		goto yy412;
	}
yy414:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy412;
		if (yych <= '9') goto yy419;
		goto yy412;
	} else {
		if (yych <= 'F') goto yy419;
		if (yych <= '`') goto yy412;
		if (yych <= 'f') goto yy419;
		goto yy412;
	}
yy415:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy412;
		if (yych <= '9') goto yy420;
		goto yy412;
	} else {
		if (yych <= 'F') goto yy420;
		if (yych <= '`') goto yy412;
		if (yych <= 'f') goto yy420;
		goto yy412;
	}
yy416:
	++YYCURSOR;
#line 642 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2702 "src/parse/lex.cc"
yy418:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy412;
		if (yych <= '9') goto yy422;
		goto yy412;
	} else {
		if (yych <= 'F') goto yy422;
		if (yych <= '`') goto yy412;
		if (yych <= 'f') goto yy422;
		goto yy412;
	}
yy419:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy412;
		if (yych <= '9') goto yy415;
		goto yy412;
	} else {
		if (yych <= 'F') goto yy415;
		if (yych <= '`') goto yy412;
		if (yych <= 'f') goto yy415;
		goto yy412;
	}
yy420:
	++YYCURSOR;
#line 641 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2731 "src/parse/lex.cc"
yy422:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy412;
		if (yych >= ':') goto yy412;
	} else {
		if (yych <= 'F') goto yy423;
		if (yych <= '`') goto yy412;
		if (yych >= 'g') goto yy412;
	}
yy423:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '@') {
		if (yych <= '/') goto yy412;
		if (yych <= '9') goto yy414;
		goto yy412;
	} else {
		if (yych <= 'F') goto yy414;
		if (yych <= '`') goto yy412;
		if (yych <= 'f') goto yy414;
		goto yy412;
	}
}
#line 657 "../src/parse/lex.re"

}

const RegExp *Scanner::lex_str(char quote, bool casing)
{
	const RegExp *r = NULL;
	for (bool end;;) {
		const uint32_t c = lex_str_chr(quote, end);
		if (end) {
			return r ? r : RegExp::nil();
		}
		r = doCat(r, casing ? ichr(c) : schr(c));
	}
}

void Scanner::set_sourceline ()
{
sourceline:
	tok = cur;

#line 2776 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy428;
	} else {
		if (yych <= '"') goto yy430;
		if (yych <= '0') goto yy426;
		if (yych <= '9') goto yy431;
	}
yy426:
	++YYCURSOR;
yy427:
#line 700 "../src/parse/lex.re"
	{
  					goto sourceline;
  				}
#line 2829 "src/parse/lex.cc"
yy428:
	++YYCURSOR;
#line 688 "../src/parse/lex.re"
	{
  					if (cur == eof)
  					{
						--cur; 
					}
			  		else
			  		{
			  			pos = cur; 
			  		}
			  		tok = cur;
			  		return; 
				}
#line 2845 "src/parse/lex.cc"
yy430:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy427;
	goto yy435;
yy431:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy431;
	}
#line 677 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok, cur, cline))
					{
						fatal ("line number overflow");
					}
					goto sourceline; 
				}
#line 2865 "src/parse/lex.cc"
yy434:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy435:
	if (yybm[0+yych] & 128) {
		goto yy434;
	}
	if (yych <= '\n') goto yy436;
	if (yych <= '"') goto yy437;
	goto yy439;
yy436:
	YYCURSOR = YYMARKER;
	goto yy427;
yy437:
	++YYCURSOR;
#line 684 "../src/parse/lex.re"
	{
					escape (in.file_name, std::string (tok + 1, tok_len () - 2)); // -2 to omit quotes
			  		goto sourceline; 
				}
#line 2887 "src/parse/lex.cc"
yy439:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy436;
	goto yy434;
}
#line 703 "../src/parse/lex.re"

}

} // end namespace re2c
