/* Generated by re2c 0.13.4.dev on Mon Mar 24 18:41:16 2008 */
/* $Id$ */
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <sstream>
#include <stdarg.h>
#include "scanner.h"
#include "parser.h"
#include "y.tab.h"
#include "globals.h"
#include "dfa.h"

extern YYSTYPE yylval;

#ifndef MAX
#define MAX(a,b) (((a)>(b))?(a):(b))
#endif

#define	BSIZE		8192
#define	YYCTYPE		unsigned char
#define	YYCURSOR	cursor
#define	YYLIMIT		lim
#define	YYMARKER	ptr
#define	YYCTXMARKER ctx
#define	YYFILL(n)	{cursor = fill(cursor, n);}

#define	RETURN(i)	{cur = cursor; return i;}

namespace re2c
{

Scanner::ParseMode Scanner::echo()
{
	char *cursor = cur;
	bool ignore_eoc = false;
	int  ignore_cnt = 0;

	if (eof && cursor == eof) // Catch EOF
	{
		return Stop;
	}

	tok = cursor;
echo:

{
	YYCTYPE yych;
	unsigned int yyaccept = 0;

	if ((YYLIMIT - YYCURSOR) < 16) YYFILL(16);
	yych = *YYCURSOR;
	if (yych <= ')') {
		if (yych <= 0x00) goto yy7;
		if (yych == '\n') goto yy5;
		goto yy9;
	} else {
		if (yych <= '*') goto yy4;
		if (yych != '/') goto yy9;
	}
	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy16;
yy3:
	{
					goto echo;
				}
yy4:
	yych = *++YYCURSOR;
	if (yych == '/') goto yy10;
	goto yy3;
yy5:
	++YYCURSOR;
	{
					if (ignore_eoc)
					{
						ignore_cnt++;
					}
					else if (!DFlag)
					{
						out.write((const char*)(tok), (const char*)(cursor) - (const char*)(tok));
					}
					tok = pos = cursor;
					cline++;
					goto echo;
				}
yy7:
	++YYCURSOR;
	{
					if (!ignore_eoc && !DFlag)
					{
						out.write((const char*)(tok), (const char*)(cursor) - (const char*)(tok) - 1);
						// -1 so we don't write out the \0
					}
					if(cursor == eof)
					{
						RETURN(Stop);
					}
				}
yy9:
	yych = *++YYCURSOR;
	goto yy3;
yy10:
	yyaccept = 1;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy14;
	if (yych == '\r') goto yy12;
yy11:
	{
					if (ignore_eoc)
					{
						if (ignore_cnt)
						{
							out << "\n" << sourceFileInfo;
						}
						ignore_eoc = false;
						ignore_cnt = 0;
					}
					else if (!DFlag)
					{
						out.write((const char*)(tok), (const char*)(cursor) - (const char*)(tok));
					}
					tok = pos = cursor;
					goto echo;
				}
yy12:
	yych = *++YYCURSOR;
	if (yych == '\n') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 0) {
		goto yy3;
	} else {
		goto yy11;
	}
yy14:
	++YYCURSOR;
	{
					cline++;
					if (ignore_eoc)
					{
						if (ignore_cnt)
						{
							out << sourceFileInfo;
						}
						ignore_eoc = false;
						ignore_cnt = 0;
					}
					else if (!DFlag)
					{
						out.write((const char*)(tok), (const char*)(cursor) - (const char*)(tok));
					}
					tok = pos = cursor;
					goto echo;
				}
yy16:
	yych = *++YYCURSOR;
	if (yych != '!') goto yy13;
	yych = *++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy20;
	case 'i':	goto yy19;
	case 'm':	goto yy21;
	case 'r':	goto yy23;
	case 't':	goto yy18;
	case 'u':	goto yy22;
	default:	goto yy13;
	}
yy18:
	yych = *++YYCURSOR;
	if (yych == 'y') goto yy78;
	goto yy13;
yy19:
	yych = *++YYCURSOR;
	if (yych == 'g') goto yy67;
	goto yy13;
yy20:
	yych = *++YYCURSOR;
	if (yych == 'e') goto yy54;
	goto yy13;
yy21:
	yych = *++YYCURSOR;
	if (yych == 'a') goto yy46;
	goto yy13;
yy22:
	yych = *++YYCURSOR;
	if (yych == 's') goto yy38;
	goto yy13;
yy23:
	yych = *++YYCURSOR;
	if (yych == 'e') goto yy24;
	if (yych == 'u') goto yy25;
	goto yy13;
yy24:
	yych = *++YYCURSOR;
	if (yych == '2') goto yy35;
	goto yy13;
yy25:
	yych = *++YYCURSOR;
	if (yych != 'l') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy13;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy13;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
	{
					if (rFlag)
					{
						mapCodeName.clear();
					}
					else
					{
						fatal("found 'reules:re2c' block without -r flag");
					}
					if (bUsedYYMaxFill && bSinglePass)
					{
						fatal("found scanner block after YYMAXFILL declaration");
					}
					tok = cursor;
					RETURN(Rules);
				}
yy35:
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
	{
					if (rFlag)
					{
						fatal("found standard 're2c' block while using -r flag");
					}
					if (bUsedYYMaxFill && bSinglePass)
					{
						fatal("found scanner block after YYMAXFILL declaration");
					}
					if (!DFlag)
					{
						out.write((const char*)(tok), (const char*)(&cursor[-7]) - (const char*)(tok));
					}
					tok = cursor;
					RETURN(Parse);
				}
yy38:
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy13;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy13;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
	{
					if (!rFlag)
					{
						fatal("found 'use:re2c' block without -r flag");
					}
					reuse();
					if (bUsedYYMaxFill && bSinglePass)
					{
						fatal("found scanner block after YYMAXFILL declaration");
					}
					if (!DFlag)
					{
						out.write((const char*)(tok), (const char*)(&cursor[-11]) - (const char*)(tok));
					}
					tok = cursor;
					RETURN(Reuse);
				}
yy46:
	yych = *++YYCURSOR;
	if (yych != 'x') goto yy13;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy13;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
	{
					if (bUsedYYMaxFill)
					{
						fatal("cannot generate YYMAXFILL twice");
					}
					if (!DFlag)
					{
						out << "#define YYMAXFILL " << maxFill << std::endl;
					}
					tok = pos = cursor;
					ignore_eoc = true;
					bUsedYYMaxFill = true;
					goto echo;
				}
yy54:
	yych = *++YYCURSOR;
	if (yych != 't') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'a') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy13;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy13;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
	{
					tok = pos = cursor;
					genGetStateGoto(out, topIndent, 0);
					ignore_eoc = true;
					goto echo;
				}
yy67:
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy13;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy13;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
	{
					tok = pos = cursor;
					ignore_eoc = true;
					goto echo;
				}
yy78:
	yych = *++YYCURSOR;
	if (yych != 'p') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy13;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy13;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
	{
					if (bSinglePass)
					{
						fatal("cannot generate types inline in single pass mode");
					}
					tok = pos = cursor;
					ignore_eoc = true;
					if (bLastPass && !DFlag)
					{
						out << outputFileInfo;
						out << "\n";
						out << typesInline;
						out << "\n";
						out << sourceFileInfo;
					}
					goto echo;
				}
}

}

int Scanner::scan()
{
	char *cursor = cur;
	uint depth;

scan:
	tchar = cursor - pos;
	tline = cline;
	tok = cursor;
	if (iscfg == 1)
	{
		goto config;
	}
	else if (iscfg == 2)
	{
		goto value;
	}

{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 116,   0, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		116, 112,  48, 112, 112, 112, 112,  80, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 112, 112, 112, 112, 112, 112, 
		112, 120, 120, 120, 120, 120, 120, 120, 
		120, 120, 120, 120, 120, 120, 120, 120, 
		120, 120, 120, 120, 120, 120, 120, 120, 
		120, 120, 120, 112,   0,  96, 112, 120, 
		112, 120, 120, 120, 120, 120, 120, 120, 
		120, 120, 120, 120, 120, 120, 120, 120, 
		120, 120, 120, 120, 120, 120, 120, 120, 
		120, 120, 120, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
	};
	if ((YYLIMIT - YYCURSOR) < 6) YYFILL(6);
	yych = *YYCURSOR;
	if (yych <= '/') {
		if (yych <= '"') {
			if (yych <= '\f') {
				if (yych <= 0x08) goto yy117;
				if (yych <= '\t') goto yy112;
				if (yych <= '\n') goto yy114;
				goto yy117;
			} else {
				if (yych <= 0x1F) {
					if (yych <= '\r') goto yy116;
					goto yy117;
				} else {
					if (yych <= ' ') goto yy112;
					if (yych <= '!') goto yy117;
					goto yy98;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') goto yy117;
				if (yych <= '\'') goto yy100;
				if (yych <= ')') goto yy105;
				goto yy96;
			} else {
				if (yych <= ',') {
					if (yych <= '+') goto yy106;
					goto yy105;
				} else {
					if (yych <= '-') goto yy117;
					if (yych <= '.') goto yy110;
					goto yy94;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '<') {
				if (yych <= '9') goto yy117;
				if (yych <= ':') goto yy92;
				if (yych <= ';') goto yy105;
				goto yy104;
			} else {
				if (yych <= '?') {
					if (yych <= '>') goto yy105;
					goto yy106;
				} else {
					if (yych <= '@') goto yy117;
					if (yych <= 'Z') goto yy109;
					goto yy102;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy105;
					goto yy117;
				} else {
					if (yych == '`') goto yy117;
					goto yy109;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy108;
					goto yy109;
				} else {
					if (yych <= '{') goto yy90;
					if (yych <= '|') goto yy105;
					goto yy117;
				}
			}
		}
	}
yy90:
	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') {
			if (yych == ',') goto yy187;
		} else {
			if (yych <= '0') goto yy184;
			if (yych <= '9') goto yy185;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') goto yy182;
			if (yych >= '_') goto yy182;
		} else {
			if (yych <= '`') goto yy91;
			if (yych <= 'z') goto yy182;
		}
	}
yy91:
	{
					depth = 1;
					goto code;
				}
yy92:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if ((yych = *YYCURSOR) == '=') goto yy178;
yy93:
	{
					std::ostringstream msg;
					msg << "unexpected character: ";
					prtChOrHex(msg, *tok);
					fatal(msg.str().c_str());
					goto scan;
				}
yy94:
	++YYCURSOR;
	if ((yych = *YYCURSOR) == '*') goto yy176;
yy95:
	{
					RETURN(*tok);
				}
yy96:
	++YYCURSOR;
	if ((yych = *YYCURSOR) == '/') goto yy174;
	{
					yylval.op = *tok;
					RETURN(STAR);
				}
yy98:
	yyaccept = 1;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych != '\n') goto yy170;
yy99:
	{
					fatal("unterminated string constant (missing \")");
				}
yy100:
	yyaccept = 2;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych != '\n') goto yy165;
yy101:
	{
					fatal("unterminated string constant (missing ')");
				}
yy102:
	yyaccept = 3;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy103;
	if (yych == '^') goto yy156;
	goto yy155;
yy103:
	{
					fatal("unterminated range (missing ])");
				}
yy104:
	yyaccept = 4;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == '!') goto yy145;
	if (yych == '>') goto yy147;
	goto yy95;
yy105:
	yych = *++YYCURSOR;
	goto yy95;
yy106:
	++YYCURSOR;
	{
					yylval.op = *tok;
					RETURN(CLOSE);
				}
yy108:
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	if (yych == 'e') goto yy133;
	goto yy122;
yy109:
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	goto yy122;
yy110:
	++YYCURSOR;
	{
					cur = cursor;
					yylval.regexp = mkDot();
					return RANGE;
				}
yy112:
	++YYCURSOR;
	yych = *YYCURSOR;
	goto yy120;
yy113:
	{
					goto scan;
				}
yy114:
	++YYCURSOR;
yy115:
	{
					if (cursor == eof) RETURN(0);
					pos = cursor;
					cline++;
					goto scan;
				}
yy116:
	yych = *++YYCURSOR;
	if (yych == '\n') goto yy118;
	goto yy93;
yy117:
	yych = *++YYCURSOR;
	goto yy93;
yy118:
	yych = *++YYCURSOR;
	goto yy115;
yy119:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy120:
	if (yybm[0+yych] & 4) {
		goto yy119;
	}
	goto yy113;
yy121:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
yy122:
	if (yybm[0+yych] & 8) {
		goto yy121;
	}
	if (yych <= ' ') {
		if (yych == '\t') goto yy125;
		if (yych <= 0x1F) goto yy124;
		goto yy125;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy124;
			goto yy126;
		} else {
			if (yych <= '<') goto yy124;
			if (yych <= '>') goto yy126;
			goto yy124;
		}
	}
yy123:
	YYCURSOR = YYCTXMARKER;
	{
					if (!FFlag) {
						cur = cursor;
						yylval.symbol = Symbol::find(token());
						return ID;
					} else {
						/* Add one char in front and one behind instead of 's or "s */
						cur = cursor;
						if (bCaseInsensitive || bCaseInverted)
						{
							yylval.regexp = strToCaseInsensitiveRE(raw_token("\""));
						}
						else
						{
							yylval.regexp = strToRE(raw_token("\""));
						}
						return STRING;
					}
				}
yy124:
	yych = *++YYCURSOR;
	goto yy123;
yy125:
	yych = *++YYCURSOR;
	goto yy131;
yy126:
	++YYCURSOR;
yy127:
	YYCURSOR = YYCTXMARKER;
	{
					cur = ptr > tok ? ptr - 1 : cursor;
					yylval.symbol = Symbol::find(token());
					return ID;
				}
yy128:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
	{
					cur = ptr > tok ? ptr - 1 : cursor;
					yylval.symbol = Symbol::find(token());
					return FFlag ? FID : ID;
				}
yy130:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy131:
	if (yych <= ' ') {
		if (yych == '\t') goto yy130;
		if (yych <= 0x1F) goto yy128;
		goto yy130;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy128;
		} else {
			if (yych <= '<') goto yy128;
			if (yych >= '?') goto yy128;
		}
	}
	yych = *++YYCURSOR;
	goto yy127;
yy133:
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy122;
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy122;
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy122;
	yych = *++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy123;
		if (yych >= '[') goto yy123;
	} else {
		if (yych == '`') goto yy123;
		if (yych >= '{') goto yy123;
	}
yy137:
	yyaccept = 5;
	YYMARKER = ++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= '@') {
		if (yych <= '9') {
			if (yych >= '0') goto yy137;
		} else {
			if (yych <= ':') goto yy142;
			if (yych >= '@') goto yy140;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') goto yy137;
			if (yych >= '_') goto yy137;
		} else {
			if (yych <= '`') goto yy139;
			if (yych <= 'z') goto yy137;
		}
	}
yy139:
	{
					cur = cursor;
					tok += 5; /* skip "re2c:" */
					iscfg = 1;
					yylval.str = new Str(token());
					return CONFIG;
				}
yy140:
	yych = *++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy141;
		if (yych <= 'Z') goto yy143;
	} else {
		if (yych == '`') goto yy141;
		if (yych <= 'z') goto yy143;
	}
yy141:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept <= 0) {
				goto yy91;
			} else {
				goto yy99;
			}
		} else {
			if (yyaccept <= 2) {
				goto yy101;
			} else {
				goto yy103;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept <= 4) {
				goto yy95;
			} else {
				goto yy139;
			}
		} else {
			goto yy188;
		}
	}
yy142:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy141;
		if (yych <= 'Z') goto yy137;
		goto yy141;
	} else {
		if (yych == '`') goto yy141;
		if (yych <= 'z') goto yy137;
		goto yy141;
	}
yy143:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy139;
		if (yych <= '9') goto yy143;
		if (yych <= '@') goto yy139;
		goto yy143;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy139;
			goto yy143;
		} else {
			if (yych <= '`') goto yy139;
			if (yych <= 'z') goto yy143;
			goto yy139;
		}
	}
yy145:
	++YYCURSOR;
	{
					RETURN(SETUP);
				}
yy147:
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	goto yy149;
yy148:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
yy149:
	if (yych <= '9') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy141;
			goto yy148;
		} else {
			if (yych == ' ') goto yy148;
			goto yy141;
		}
	} else {
		if (yych <= '=') {
			if (yych <= ':') goto yy153;
			if (yych <= '<') goto yy141;
			goto yy152;
		} else {
			if (yych != '{') goto yy141;
		}
	}
yy150:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
	{
					RETURN(NOCOND);
				}
yy152:
	yych = *++YYCURSOR;
	if (yych == '>') goto yy150;
	goto yy141;
yy153:
	yych = *++YYCURSOR;
	if (yych == '=') goto yy150;
	goto yy141;
yy154:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy155:
	if (yybm[0+yych] & 16) {
		goto yy154;
	}
	if (yych <= '[') goto yy141;
	if (yych <= '\\') goto yy158;
	goto yy159;
yy156:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= '[') {
		if (yych == '\n') goto yy141;
		goto yy156;
	} else {
		if (yych <= '\\') goto yy161;
		if (yych <= ']') goto yy162;
		goto yy156;
	}
yy158:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy141;
	goto yy154;
yy159:
	++YYCURSOR;
	{
					cur = cursor;
					yylval.regexp = ranToRE(token());
					return RANGE;
				}
yy161:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy141;
	goto yy156;
yy162:
	++YYCURSOR;
	{
					cur = cursor;
					yylval.regexp = invToRE(token());
					return RANGE;
				}
yy164:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy165:
	if (yybm[0+yych] & 32) {
		goto yy164;
	}
	if (yych <= '&') goto yy141;
	if (yych <= '\'') goto yy167;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy141;
	goto yy164;
yy167:
	++YYCURSOR;
	{
					cur = cursor;
					if (bCaseInverted)
					{
						yylval.regexp = strToRE(token());
					}
					else
					{
						yylval.regexp = strToCaseInsensitiveRE(token());
					}
					return STRING;
				}
yy169:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy170:
	if (yybm[0+yych] & 64) {
		goto yy169;
	}
	if (yych <= '!') goto yy141;
	if (yych <= '"') goto yy172;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy141;
	goto yy169;
yy172:
	++YYCURSOR;
	{
					cur = cursor;
					if (bCaseInsensitive || bCaseInverted)
					{
						yylval.regexp = strToCaseInsensitiveRE(token());
					}
					else
					{
						yylval.regexp = strToRE(token());
					}
					return STRING;
				}
yy174:
	++YYCURSOR;
	{
					tok = cursor;
					RETURN(0);
				}
yy176:
	++YYCURSOR;
	{
					depth = 1;
					goto comment;
				}
yy178:
	++YYCURSOR;
	if ((yych = *YYCURSOR) == '>') goto yy180;
	{
					cur = cursor;
					tok += 2; /* skip ":=" */
					depth = 0;
					goto code;
				}
yy180:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
	{
					RETURN(*tok);
				}
yy182:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy141;
			goto yy182;
		} else {
			if (yych <= '@') goto yy141;
			if (yych <= 'Z') goto yy182;
			goto yy141;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy141;
			goto yy182;
		} else {
			if (yych == '}') goto yy201;
			goto yy141;
		}
	}
yy184:
	yych = *++YYCURSOR;
	if (yych == ',') goto yy198;
	goto yy186;
yy185:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
yy186:
	if (yybm[0+yych] & 128) {
		goto yy185;
	}
	if (yych == ',') goto yy191;
	if (yych == '}') goto yy189;
	goto yy141;
yy187:
	++YYCURSOR;
yy188:
	{
					fatal("illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
				}
yy189:
	++YYCURSOR;
	{
					yylval.extop.minsize = atoi((char *)tok+1);
					yylval.extop.maxsize = atoi((char *)tok+1);
					RETURN(CLOSESIZE);
				}
yy191:
	yyaccept = 6;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy188;
	if (yych <= '9') goto yy194;
	if (yych != '}') goto yy188;
	++YYCURSOR;
	{
					yylval.extop.minsize = atoi((char *)tok+1);
					yylval.extop.maxsize = -1;
					RETURN(CLOSESIZE);
				}
yy194:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= '/') goto yy141;
	if (yych <= '9') goto yy194;
	if (yych != '}') goto yy141;
	++YYCURSOR;
	{
					yylval.extop.minsize = atoi((char *)tok+1);
					yylval.extop.maxsize = MAX(yylval.extop.minsize,atoi(strchr((char *)tok, ',')+1));
					RETURN(CLOSESIZE);
				}
yy198:
	yyaccept = 6;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy188;
	if (yych <= '9') goto yy194;
	if (yych != '}') goto yy188;
	++YYCURSOR;
	{
					yylval.op = '*';
					RETURN(CLOSE);
				}
yy201:
	++YYCURSOR;
	{
					if (!FFlag) {
						fatal("curly braces for names only allowed with -F switch");
					}
					cur = cursor;
					yylval.symbol = Symbol::find(token(1, cur - tok - 2));
					return ID;
				}
}


code:

{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192,   0, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192,  64, 192, 192, 192, 192, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192,   0, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy211;
			if (yych <= '\t') goto yy213;
			goto yy209;
		} else {
			if (yych == '"') goto yy215;
			goto yy213;
		}
	} else {
		if (yych <= '{') {
			if (yych <= '\'') goto yy216;
			if (yych <= 'z') goto yy213;
			goto yy207;
		} else {
			if (yych != '}') goto yy213;
		}
	}
	++YYCURSOR;
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else if (--depth == 0)
					{
						cur = cursor;
						yylval.token = new Token(token(), tline);
						return CODE;
					}
					goto code;
				}
yy207:
	++YYCURSOR;
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else
					{
						++depth;
					}
					goto code;
				}
yy209:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if ((yych = *YYCURSOR) <= '\f') {
		if (yych <= 0x08) goto yy210;
		if (yych <= '\n') goto yy224;
	} else {
		if (yych <= '\r') goto yy224;
		if (yych == ' ') goto yy224;
	}
yy210:
	{
					if (depth == 0)
					{
						cur = cursor;
						tok += strspn(tok, " \t\r\n");
						while (cur > tok && strchr(" \t\r\n", cur[-1]))
						{
							--cur;
						}
						yylval.token = new Token(token(), tline);
						return CODE;
					}
					else if (cursor == eof)
					{
						fatal("missing '}'");
					}
					pos = cursor;
					cline++;
					goto code;
				}
yy211:
	++YYCURSOR;
	{
					if (cursor == eof)
					{
						if (depth)
						{
							fatal("missing '}'");
						}
						RETURN(0);
					}
					goto code;
				}
yy213:
	++YYCURSOR;
yy214:
	{
					goto code;
				}
yy215:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy214;
	goto yy222;
yy216:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy214;
	goto yy218;
yy217:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy218:
	if (yybm[0+yych] & 64) {
		goto yy217;
	}
	if (yych <= '&') goto yy219;
	if (yych <= '\'') goto yy213;
	goto yy220;
yy219:
	YYCURSOR = YYMARKER;
	goto yy214;
yy220:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy219;
	goto yy217;
yy221:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy222:
	if (yybm[0+yych] & 128) {
		goto yy221;
	}
	if (yych <= '!') goto yy219;
	if (yych <= '"') goto yy213;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy219;
	goto yy221;
yy224:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
	{
					if (depth == 0)
					{
						goto code;
					}
					else if (cursor == eof)
					{
						fatal("missing '}'");
					}
					pos = cursor;
					cline++;
					goto code;
				}
}


comment:

{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= ')') {
		if (yych == '\n') goto yy231;
		goto yy233;
	} else {
		if (yych <= '*') goto yy228;
		if (yych == '/') goto yy230;
		goto yy233;
	}
yy228:
	++YYCURSOR;
	if ((yych = *YYCURSOR) == '/') goto yy236;
yy229:
	{
					if (cursor == eof)
					{
						RETURN(0);
					}
					goto comment;
				}
yy230:
	yych = *++YYCURSOR;
	if (yych == '*') goto yy234;
	goto yy229;
yy231:
	++YYCURSOR;
	{
					if (cursor == eof)
					{
						RETURN(0);
					}
					tok = pos = cursor;
					cline++;
					goto comment;
				}
yy233:
	yych = *++YYCURSOR;
	goto yy229;
yy234:
	++YYCURSOR;
	{
					++depth;
					fatal("ambiguous /* found");
					goto comment;
				}
yy236:
	++YYCURSOR;
	{
					if (--depth == 0)
					{
						goto scan;
					}
					else
					{
						goto comment;
					}
				}
}


config:

{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych != '\t') goto yy244;
	} else {
		if (yych <= ' ') goto yy240;
		if (yych == '=') goto yy242;
		goto yy244;
	}
yy240:
	++YYCURSOR;
	yych = *YYCURSOR;
	goto yy249;
yy241:
	{
					goto config;
				}
yy242:
	++YYCURSOR;
	yych = *YYCURSOR;
	goto yy247;
yy243:
	{
					iscfg = 2;
					cur = cursor;
					RETURN('=');
				}
yy244:
	++YYCURSOR;
	{
					fatal("missing '='");
				}
yy246:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy247:
	if (yybm[0+yych] & 128) {
		goto yy246;
	}
	goto yy243;
yy248:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy249:
	if (yych == '\t') goto yy248;
	if (yych == ' ') goto yy248;
	goto yy241;
}


value:

{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 192,   0, 248, 248, 192, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		192, 248, 104, 248, 248, 248, 248, 152, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		252, 252, 252, 252, 252, 252, 252, 252, 
		252, 252, 248, 192, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248,   8, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\r') {
			if (yych <= 0x08) goto yy258;
			if (yych <= '\n') goto yy252;
			if (yych <= '\f') goto yy258;
		} else {
			if (yych <= ' ') {
				if (yych <= 0x1F) goto yy258;
			} else {
				if (yych == '"') goto yy260;
				goto yy258;
			}
		}
	} else {
		if (yych <= '/') {
			if (yych <= '\'') goto yy262;
			if (yych == '-') goto yy255;
			goto yy258;
		} else {
			if (yych <= '9') {
				if (yych <= '0') goto yy253;
				goto yy256;
			} else {
				if (yych != ';') goto yy258;
			}
		}
	}
yy252:
	{
					cur = cursor;
					yylval.str = new Str(token());
					iscfg = 0;
					return VALUE;
				}
yy253:
	++YYCURSOR;
	if (yybm[0+(yych = *YYCURSOR)] & 8) {
		goto yy258;
	}
yy254:
	{
					cur = cursor;
					yylval.number = atoi(token().to_string().c_str());
					iscfg = 0;
					return NUMBER;
				}
yy255:
	yych = *++YYCURSOR;
	if (yych <= '0') goto yy259;
	if (yych >= ':') goto yy259;
yy256:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 4) {
		goto yy256;
	}
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy258;
		if (yych <= '\n') goto yy254;
		if (yych >= '\r') goto yy254;
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy254;
		} else {
			if (yych == ';') goto yy254;
		}
	}
yy258:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy259:
	if (yybm[0+yych] & 8) {
		goto yy258;
	}
	goto yy252;
yy260:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy260;
	}
	if (yych <= '!') {
		if (yych == '\n') goto yy252;
		goto yy270;
	} else {
		if (yych <= '"') goto yy258;
		if (yych <= '[') goto yy270;
		goto yy272;
	}
yy262:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy262;
	}
	if (yych <= '&') {
		if (yych == '\n') goto yy252;
	} else {
		if (yych <= '\'') goto yy258;
		if (yych >= '\\') goto yy267;
	}
yy264:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy264;
	}
	if (yych <= '&') goto yy266;
	if (yych <= '\'') goto yy268;
	goto yy269;
yy266:
	YYCURSOR = YYMARKER;
	goto yy252;
yy267:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy262;
			goto yy264;
		} else {
			if (yych <= '\n') goto yy252;
			if (yych <= '\f') goto yy262;
			goto yy264;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy262;
			goto yy264;
		} else {
			if (yych == ';') goto yy264;
			goto yy262;
		}
	}
yy268:
	yych = *++YYCURSOR;
	goto yy252;
yy269:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy266;
	goto yy264;
yy270:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy270;
	}
	if (yych <= '!') goto yy266;
	if (yych <= '"') goto yy268;
	goto yy273;
yy272:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy260;
			goto yy270;
		} else {
			if (yych <= '\n') goto yy252;
			if (yych <= '\f') goto yy260;
			goto yy270;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy260;
			goto yy270;
		} else {
			if (yych == ';') goto yy270;
			goto yy260;
		}
	}
yy273:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy266;
	goto yy270;
}

}

} // end namespace re2c
