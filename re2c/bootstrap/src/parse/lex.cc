/* Generated by re2c 0.16 on Sat Apr  2 15:20:14 2016 */
#line 1 "../src/parse/lex.re"
#include "src/util/c99_stdint.h"
#include <stddef.h>
#include <string.h>
#include <algorithm>
#include <limits>
#include <string>

#include "src/codegen/output.h"
#include "src/conf/opt.h"
#include "src/conf/warn.h"
#include "src/globals.h"
#include "src/ir/regexp/encoding/enc.h"
#include "src/ir/regexp/regexp.h"
#include "src/parse/code.h"
#include "src/parse/extop.h"
#include "src/parse/input.h"
#include "src/parse/scanner.h"
#include "src/parse/parser.h" // needed by "y.tab.h"
#include "src/parse/unescape.h"
#include "src/util/range.h"
#include "src/util/s_to_n32_unsafe.h"
#include "y.tab.h"

extern YYSTYPE yylval;

#define	YYCTYPE		unsigned char
#define	YYCURSOR	cur
#define	YYLIMIT		lim
#define	YYMARKER	ptr
#define	YYCTXMARKER ctx
#define	YYFILL(n)	{ fill (n); }

namespace re2c
{

// source code is in ASCII: pointers have type 'char *'
// but re2c makes an implicit assumption that YYCTYPE is unsigned
// when it generates comparisons
#line 41 "../src/parse/lex.re"


#line 62 "../src/parse/lex.re"


Scanner::ParseMode Scanner::echo()
{
	uint32_t ignored = 0;

	if (eof && cur == eof) // Catch EOF
	{
		return Stop;
	}

	tok = cur;
echo:

#line 60 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 16) YYFILL(16);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 172 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, tok_len () - 1);
			// -1 so we don't write out the \0
		}
		if (cur == eof) {
			return Stop;
		}
	}
#line 128 "src/parse/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 182 "../src/parse/lex.re"
	{ goto echo; }
#line 134 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 163 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, tok_len ());
		}
		cline++;
		tok = pos = cur;
		goto echo;
	}
#line 152 "src/parse/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy7;
	} else {
		goto yy5;
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 77 "../src/parse/lex.re"
	{
					if (opts->rFlag)
					{
						fatal("found standard 're2c' block while using -r flag");
					}
					if (opts->target == opt_t::CODE)
					{
						const size_t lexeme_len = cur[-1] == '{'
							? sizeof ("%{") - 1
							: sizeof ("/*!re2c") - 1;
						out.wraw(tok, tok_len () - lexeme_len);
					}
					tok = cur;
					return Parse;
				}
#line 211 "src/parse/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'c':	goto yy22;
	case 'g':	goto yy23;
	case 'i':	goto yy24;
	case 'm':	goto yy25;
	case 'r':	goto yy26;
	case 't':	goto yy27;
	case 'u':	goto yy28;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy29;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy30;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy31;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy32;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy33;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy34;
	if (yych == 'u') goto yy35;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy36;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy37;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy38;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy39;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy40;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy41;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy42;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy43;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy44;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy45;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy46;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy48;
	if (yych <= '9') goto yy13;
	goto yy48;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy49;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy50;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy51;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy52;
	goto yy13;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy53;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy54;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy55;
	goto yy13;
yy47:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	YYCTXMARKER = YYCURSOR;
yy48:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy47;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy47;
		if (yych <= '0') goto yy13;
		if (yych <= '9') goto yy56;
		goto yy13;
	}
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy58;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy59;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy60;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy61;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy62;
	goto yy13;
yy54:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy63;
	goto yy13;
yy55:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy64;
	goto yy13;
yy56:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy56;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy65;
		if (yych <= '\n') goto yy67;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy69;
		if (yych == ' ') goto yy65;
		goto yy13;
	}
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy70;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy71;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy72;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy73;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy74;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy75;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy76;
	goto yy13;
yy65:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy65;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy65;
		if (yych == '"') goto yy77;
		goto yy13;
	}
yy67:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 158 "../src/parse/lex.re"
	{
		set_sourceline();
		goto echo;
	}
#line 446 "src/parse/lex.cc"
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy67;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy79;
	goto yy13;
yy71:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy80;
	goto yy13;
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy81;
	goto yy13;
yy73:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy82;
	goto yy13;
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy83;
	goto yy13;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy84;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy85;
	goto yy13;
yy77:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy77;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy86;
	goto yy87;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy88;
	goto yy13;
yy80:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy89;
	goto yy13;
yy81:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy90;
	goto yy13;
yy82:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy91;
	goto yy13;
yy83:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy93;
	goto yy13;
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy94;
	goto yy13;
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy95;
	goto yy13;
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy67;
	if (yych == '\r') goto yy69;
	goto yy13;
yy87:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy13;
	goto yy77;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy97;
	goto yy13;
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy98;
	goto yy13;
yy90:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy99;
	goto yy13;
yy91:
	++YYCURSOR;
#line 121 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wdelay_yymaxfill();
		}
		goto eoc;
	}
#line 549 "src/parse/lex.cc"
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy100;
	goto yy13;
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy101;
	goto yy13;
yy95:
	++YYCURSOR;
#line 104 "../src/parse/lex.re"
	{
					if (!opts->rFlag)
					{
						fatal("found 'use:re2c' block without -r flag");
					}
					reuse();
					if (opts->target == opt_t::CODE)
					{
						const size_t lexeme_len = sizeof ("/*!use:re2c") - 1;
						out.wraw(tok, tok_len () - lexeme_len);
					}
					tok = cur;
					return Reuse;
				}
#line 575 "src/parse/lex.cc"
yy97:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy102;
	goto yy13;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy103;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy104;
	goto yy13;
yy100:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy105;
	goto yy13;
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy107;
	goto yy13;
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy109;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy110;
	goto yy13;
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy111;
	goto yy13;
yy105:
	++YYCURSOR;
#line 92 "../src/parse/lex.re"
	{
					if (opts->rFlag)
					{
						opts.reset_mapCodeName ();
					}
					else
					{
						fatal("found 'rules:re2c' block without -r flag");
					}
					tok = cur;
					return Rules;
				}
#line 623 "src/parse/lex.cc"
yy107:
	++YYCURSOR;
#line 135 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wdelay_line_info().ws("\n")
				.wdelay_types().ws("\n")
				.wline_info(cline, get_fname().c_str());
		}
		goto eoc;
	}
#line 635 "src/parse/lex.cc"
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy113;
	goto yy13;
yy110:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy114;
	goto yy13;
yy111:
	++YYCURSOR;
#line 119 "../src/parse/lex.re"
	{ goto eoc; }
#line 648 "src/parse/lex.cc"
yy113:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy115;
	goto yy13;
yy114:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy117;
	goto yy13;
yy115:
	++YYCURSOR;
#line 144 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			const size_t len = sizeof("/*!contexts:re2c") - 1;
			out.wraw(tok, tok_len() - len);
		}
		ConfContexts *conf = new ConfContexts;
		lex_conf_contexts(*conf);
		if (opts->target == opt_t::CODE) {
			out.wdelay_contexts(opts->topIndent, conf);
		}
		tok = pos = cur;
		goto echo;
	}
#line 673 "src/parse/lex.cc"
yy117:
	++YYCURSOR;
#line 128 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wdelay_state_goto(opts->topIndent);
		}
		goto eoc;
	}
#line 683 "src/parse/lex.cc"
}
#line 183 "../src/parse/lex.re"


eoc:

#line 690 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy121;
		if (yych == '\n') goto yy125;
		goto yy123;
	} else {
		if (yych <= '\r') goto yy127;
		if (yych == '*') goto yy128;
		goto yy123;
	}
yy121:
	++YYCURSOR;
#line 187 "../src/parse/lex.re"
	{ fatal("expected end of block"); }
#line 708 "src/parse/lex.cc"
yy123:
	++YYCURSOR;
yy124:
#line 188 "../src/parse/lex.re"
	{ goto eoc; }
#line 714 "src/parse/lex.cc"
yy125:
	++YYCURSOR;
#line 189 "../src/parse/lex.re"
	{ ++ignored; goto eoc; }
#line 719 "src/parse/lex.cc"
yy127:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy125;
	goto yy124;
yy128:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy124;
	++YYCURSOR;
#line 190 "../src/parse/lex.re"
	{
		if (ignored > 0) {
			cline += ignored;
			ignored = 0;
			out.ws("\n").wline_info(cline, get_fname().c_str());
		}
		tok = pos = cur;
		goto echo;
	}
#line 738 "src/parse/lex.cc"
}
#line 199 "../src/parse/lex.re"

}

int Scanner::scan()
{
	uint32_t depth;

scan:
	tchar = cur - pos;
	tline = cline;
	tok = cur;
	switch (lexer_state)
	{
		case LEX_NORMAL:    goto start;
		case LEX_FLEX_NAME: goto flex_name;
	}

start:

#line 760 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 6) YYFILL(6);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy135;
	}
	if (yych <= '9') {
		if (yych <= '&') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy133;
				if (yych <= '\n') goto yy138;
				if (yych >= '\r') goto yy140;
			} else {
				if (yych <= '"') {
					if (yych >= '"') goto yy141;
				} else {
					if (yych == '%') goto yy143;
				}
			}
		} else {
			if (yych <= '+') {
				if (yych <= '\'') goto yy144;
				if (yych <= ')') goto yy146;
				if (yych <= '*') goto yy148;
				goto yy150;
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy146;
				} else {
					if (yych <= '.') goto yy152;
					if (yych <= '/') goto yy154;
					goto yy155;
				}
			}
		}
	} else {
		if (yych <= '\\') {
			if (yych <= '>') {
				if (yych <= ':') goto yy156;
				if (yych == '<') goto yy157;
				goto yy146;
			} else {
				if (yych <= '@') {
					if (yych <= '?') goto yy150;
					goto yy158;
				} else {
					if (yych <= 'Z') goto yy155;
					if (yych <= '[') goto yy159;
					goto yy146;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych == '_') goto yy155;
				if (yych >= 'a') goto yy155;
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy161;
					goto yy155;
				} else {
					if (yych <= '{') goto yy162;
					if (yych <= '|') goto yy146;
				}
			}
		}
	}
yy133:
	++YYCURSOR;
yy134:
#line 377 "../src/parse/lex.re"
	{
					fatalf("unexpected character: '%c'", *tok);
					goto scan;
				}
#line 871 "src/parse/lex.cc"
yy135:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy135;
	}
#line 361 "../src/parse/lex.re"
	{
					goto scan;
				}
#line 883 "src/parse/lex.cc"
yy138:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy164;
	} else {
		if (yych <= ' ') goto yy164;
		if (yych == '#') goto yy167;
	}
yy139:
#line 370 "../src/parse/lex.re"
	{
					if (cur == eof) return 0;
					pos = cur;
					cline++;
					goto scan;
				}
#line 901 "src/parse/lex.cc"
yy140:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy138;
	goto yy134;
yy141:
	++YYCURSOR;
#line 248 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"',  opts->bCaseInsensitive ||  opts->bCaseInverted); return TOKEN_REGEXP; }
#line 910 "src/parse/lex.cc"
yy143:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy169;
	goto yy134;
yy144:
	++YYCURSOR;
#line 247 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\'', opts->bCaseInsensitive || !opts->bCaseInverted); return TOKEN_REGEXP; }
#line 919 "src/parse/lex.cc"
yy146:
	++YYCURSOR;
yy147:
#line 264 "../src/parse/lex.re"
	{
					return *tok;
				}
#line 927 "src/parse/lex.cc"
yy148:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '/') goto yy169;
#line 268 "../src/parse/lex.re"
	{
					yylval.op = *tok;
					return TOKEN_STAR;
				}
#line 936 "src/parse/lex.cc"
yy150:
	++YYCURSOR;
#line 272 "../src/parse/lex.re"
	{
					yylval.op = *tok;
					return TOKEN_CLOSE;
				}
#line 944 "src/parse/lex.cc"
yy152:
	++YYCURSOR;
#line 356 "../src/parse/lex.re"
	{
					yylval.regexp = mkDot();
					return TOKEN_REGEXP;
				}
#line 952 "src/parse/lex.cc"
yy154:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy171;
	if (yych == '/') goto yy173;
	goto yy147;
yy155:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	goto yy181;
yy156:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy182;
	goto yy134;
yy157:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '!') goto yy184;
	if (yych == '>') goto yy186;
	goto yy147;
yy158:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy134;
		if (yych <= '9') goto yy187;
		if (yych <= '@') goto yy134;
		goto yy187;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy134;
			goto yy187;
		} else {
			if (yych <= '`') goto yy134;
			if (yych <= 'z') goto yy187;
			goto yy134;
		}
	}
yy159:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '^') goto yy190;
#line 249 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 994 "src/parse/lex.cc"
yy161:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	if (yych == 'e') goto yy192;
	goto yy181;
yy162:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy195;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy193;
		if (yych >= 'A') goto yy197;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy197;
		} else {
			if (yych <= '`') goto yy163;
			if (yych <= 'z') goto yy197;
		}
	}
yy163:
#line 218 "../src/parse/lex.re"
	{
					depth = 1;
					goto code;
				}
#line 1023 "src/parse/lex.cc"
yy164:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy164;
	} else {
		if (yych <= ' ') goto yy164;
		if (yych == '#') goto yy167;
	}
yy166:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy139;
		} else {
			goto yy147;
		}
	} else {
		if (yyaccept == 2) {
			goto yy163;
		} else {
			goto yy194;
		}
	}
yy167:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy167;
		goto yy166;
	} else {
		if (yych <= ' ') goto yy167;
		if (yych == 'l') goto yy199;
		goto yy166;
	}
yy169:
	++YYCURSOR;
#line 242 "../src/parse/lex.re"
	{
					tok = cur;
					return 0;
				}
#line 1068 "src/parse/lex.cc"
yy171:
	++YYCURSOR;
#line 236 "../src/parse/lex.re"
	{
					depth = 1;
					goto comment;
				}
#line 1076 "src/parse/lex.cc"
yy173:
	++YYCURSOR;
#line 233 "../src/parse/lex.re"
	{
				goto nextLine;
			}
#line 1083 "src/parse/lex.cc"
yy175:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 340 "../src/parse/lex.re"
	{
					if (!opts->FFlag) {
						yylval.str = new std::string (tok, tok_len());
						return TOKEN_ID;
					} else {
						const RegExp *r = NULL;
						const bool casing = opts->bCaseInsensitive || opts->bCaseInverted;
						for (char *s = tok; s < cur; ++s) {
							const uint32_t c = static_cast<uint8_t>(*s);
							r = doCat(r, casing ? ichr(c) : schr(c));
						}
						yylval.regexp = r ? r : RegExp::nil();
						return TOKEN_REGEXP;
					}
				}
#line 1103 "src/parse/lex.cc"
yy177:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy203;
yy178:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 335 "../src/parse/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					return TOKEN_ID;
				}
#line 1115 "src/parse/lex.cc"
yy180:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	YYCTXMARKER = YYCURSOR;
yy181:
	if (yybm[0+yych] & 32) {
		goto yy180;
	}
	if (yych <= ' ') {
		if (yych == '\t') goto yy177;
		if (yych <= 0x1F) goto yy175;
		goto yy177;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy175;
			goto yy178;
		} else {
			if (yych <= '<') goto yy175;
			if (yych <= '>') goto yy178;
			goto yy175;
		}
	}
yy182:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '>') goto yy204;
#line 227 "../src/parse/lex.re"
	{
					tok += 2; /* skip ":=" */
					depth = 0;
					goto code;
				}
#line 1148 "src/parse/lex.cc"
yy184:
	++YYCURSOR;
#line 255 "../src/parse/lex.re"
	{
					return TOKEN_SETUP;
				}
#line 1155 "src/parse/lex.cc"
yy186:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	goto yy207;
yy187:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy189;
		if (yych <= '9') goto yy187;
		if (yych >= 'A') goto yy187;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy187;
		} else {
			if (yych <= '`') goto yy189;
			if (yych <= 'z') goto yy187;
		}
	}
yy189:
#line 259 "../src/parse/lex.re"
	{
		yylval.str = new std::string(tok + 1, tok_len() - 1);
		return TOKEN_CTX;
	}
#line 1182 "src/parse/lex.cc"
yy190:
	++YYCURSOR;
#line 250 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1187 "src/parse/lex.cc"
yy192:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	if (yych == '2') goto yy212;
	goto yy181;
yy193:
	++YYCURSOR;
yy194:
#line 308 "../src/parse/lex.re"
	{
					fatal("illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
				}
#line 1200 "src/parse/lex.cc"
yy195:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy195;
	}
	if (yych <= '^') {
		if (yych <= ',') {
			if (yych <= '+') goto yy166;
			goto yy213;
		} else {
			if (yych <= '@') goto yy166;
			if (yych >= '[') goto yy166;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy166;
		} else {
			if (yych == '}') goto yy214;
			goto yy166;
		}
	}
yy197:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy166;
			goto yy197;
		} else {
			if (yych <= '@') goto yy166;
			if (yych <= 'Z') goto yy197;
			goto yy166;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy166;
			goto yy197;
		} else {
			if (yych == '}') goto yy216;
			goto yy166;
		}
	}
yy199:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy218;
	goto yy166;
yy200:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 322 "../src/parse/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					if (opts->FFlag)
					{
						lexer_state = LEX_FLEX_NAME;
						return TOKEN_FID;
					}
					else
					{
						return TOKEN_ID;
					}
				}
#line 1266 "src/parse/lex.cc"
yy202:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy203:
	if (yych <= ' ') {
		if (yych == '\t') goto yy202;
		if (yych <= 0x1F) goto yy200;
		goto yy202;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy200;
			goto yy178;
		} else {
			if (yych <= '<') goto yy200;
			if (yych <= '>') goto yy178;
			goto yy200;
		}
	}
yy204:
	++YYCURSOR;
	YYCURSOR -= 2;
#line 223 "../src/parse/lex.re"
	{
					return *tok;
				}
#line 1293 "src/parse/lex.cc"
yy206:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
yy207:
	if (yych <= '9') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy166;
			goto yy206;
		} else {
			if (yych == ' ') goto yy206;
			goto yy166;
		}
	} else {
		if (yych <= '=') {
			if (yych <= ':') goto yy208;
			if (yych <= '<') goto yy166;
			goto yy209;
		} else {
			if (yych == '{') goto yy210;
			goto yy166;
		}
	}
yy208:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy210;
	goto yy166;
yy209:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '>') goto yy166;
yy210:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 252 "../src/parse/lex.re"
	{
					return TOKEN_NOCOND;
				}
#line 1331 "src/parse/lex.cc"
yy212:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	if (yych == 'c') goto yy219;
	goto yy181;
yy213:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy194;
	if (yych <= '9') goto yy220;
	if (yych == '}') goto yy222;
	goto yy194;
yy214:
	++YYCURSOR;
#line 277 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.extop.min))
					{
						fatal ("repetition count overflow");
					}
					yylval.extop.max = yylval.extop.min;
					return TOKEN_CLOSESIZE;
				}
#line 1355 "src/parse/lex.cc"
yy216:
	++YYCURSOR;
#line 312 "../src/parse/lex.re"
	{
					if (!opts->FFlag) {
						fatal("curly braces for names only allowed with -F switch");
					}
					yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
					return TOKEN_ID;
				}
#line 1366 "src/parse/lex.cc"
yy218:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy224;
	goto yy166;
yy219:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	if (yych == ':') goto yy225;
	goto yy181;
yy220:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy166;
	if (yych <= '9') goto yy220;
	if (yych == '}') goto yy227;
	goto yy166;
yy222:
	++YYCURSOR;
#line 299 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					yylval.extop.max = std::numeric_limits<uint32_t>::max();
					return TOKEN_CLOSESIZE;
				}
#line 1395 "src/parse/lex.cc"
yy224:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy229;
	goto yy166;
yy225:
	++YYCURSOR;
#line 320 "../src/parse/lex.re"
	{ lex_conf (); return TOKEN_CONF; }
#line 1404 "src/parse/lex.cc"
yy227:
	++YYCURSOR;
#line 286 "../src/parse/lex.re"
	{
					const char * p = strchr (tok, ',');
					if (!s_to_u32_unsafe (tok + 1, p, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.extop.max))
					{
						fatal ("repetition upper bound overflow");
					}
					return TOKEN_CLOSESIZE;
				}
#line 1420 "src/parse/lex.cc"
yy229:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy231;
	if (yych <= '9') goto yy166;
	goto yy231;
yy230:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	YYCTXMARKER = YYCURSOR;
yy231:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy230;
		goto yy166;
	} else {
		if (yych <= ' ') goto yy230;
		if (yych <= '0') goto yy166;
		if (yych >= ':') goto yy166;
	}
yy232:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy166;
		} else {
			if (yych <= '\n') goto yy236;
			if (yych <= '\f') goto yy166;
			goto yy238;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy166;
		} else {
			if (yych <= '/') goto yy166;
			if (yych <= '9') goto yy232;
			goto yy166;
		}
	}
yy234:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy234;
		goto yy166;
	} else {
		if (yych <= ' ') goto yy234;
		if (yych == '"') goto yy239;
		goto yy166;
	}
yy236:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 365 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto scan;
				}
#line 1481 "src/parse/lex.cc"
yy238:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy236;
	goto yy166;
yy239:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy239;
	}
	if (yych <= '\n') goto yy166;
	if (yych >= '#') goto yy242;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy236;
	if (yych == '\r') goto yy238;
	goto yy166;
yy242:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy166;
	goto yy239;
}
#line 381 "../src/parse/lex.re"


flex_name:

#line 1511 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy247;
	if (yych == '\r') goto yy249;
	++YYCURSOR;
yy246:
#line 392 "../src/parse/lex.re"
	{
		YYCURSOR = tok;
		goto start;
	}
#line 1525 "src/parse/lex.cc"
yy247:
	++YYCURSOR;
#line 386 "../src/parse/lex.re"
	{
		YYCURSOR = tok;
		lexer_state = LEX_NORMAL;
		return TOKEN_FID_END;
	}
#line 1534 "src/parse/lex.cc"
yy249:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '\n') goto yy247;
	goto yy246;
}
#line 396 "../src/parse/lex.re"


code:

#line 1545 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96, 112,   0,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		112,  96,  64,  96,  96,  96,  96,  32, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,   0,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy252;
			if (yych <= '\t') goto yy254;
			goto yy256;
		} else {
			if (yych == '"') goto yy258;
			goto yy254;
		}
	} else {
		if (yych <= '{') {
			if (yych <= '\'') goto yy259;
			if (yych <= 'z') goto yy254;
			goto yy260;
		} else {
			if (yych == '}') goto yy262;
			goto yy254;
		}
	}
yy252:
	++YYCURSOR;
#line 459 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						if (depth)
						{
							fatal("missing '}'");
						}
						return 0;
					}
					goto code;
				}
#line 1618 "src/parse/lex.cc"
yy254:
	++YYCURSOR;
yy255:
#line 473 "../src/parse/lex.re"
	{
					goto code;
				}
#line 1626 "src/parse/lex.cc"
yy256:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy264;
		} else {
			if (yych <= '\n') goto yy266;
			if (yych >= '\r') goto yy266;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy264;
		} else {
			if (yych == '#') goto yy267;
		}
	}
yy257:
#line 440 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						tok += strspn(tok, " \t\r\n");
						while (cur > tok && strchr(" \t\r\n", cur[-1]))
						{
							--cur;
						}
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return TOKEN_CODE;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1665 "src/parse/lex.cc"
yy258:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy255;
	goto yy271;
yy259:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy255;
	goto yy276;
yy260:
	++YYCURSOR;
#line 412 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else
					{
						++depth;
					}
					goto code;
				}
#line 1690 "src/parse/lex.cc"
yy262:
	++YYCURSOR;
#line 400 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else if (--depth == 0)
					{
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return TOKEN_CODE;
					}
					goto code;
				}
#line 1706 "src/parse/lex.cc"
yy264:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy278;
	} else {
		if (yych <= ' ') goto yy278;
		if (yych == '#') goto yy267;
	}
yy265:
	YYCURSOR -= 1;
#line 427 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						goto code;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1732 "src/parse/lex.cc"
yy266:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy265;
yy267:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy267;
	}
	if (yych == 'l') goto yy280;
yy269:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy257;
		} else {
			goto yy255;
		}
	} else {
		goto yy265;
	}
yy270:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy271:
	if (yybm[0+yych] & 32) {
		goto yy270;
	}
	if (yych <= '\n') goto yy269;
	if (yych >= '#') goto yy274;
yy272:
	++YYCURSOR;
#line 470 "../src/parse/lex.re"
	{
					goto code;
				}
#line 1771 "src/parse/lex.cc"
yy274:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy269;
	goto yy270;
yy275:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy276:
	if (yybm[0+yych] & 64) {
		goto yy275;
	}
	if (yych <= '\n') goto yy269;
	if (yych <= '\'') goto yy272;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy269;
	goto yy275;
yy278:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy278;
		goto yy269;
	} else {
		if (yych <= ' ') goto yy278;
		if (yych == '#') goto yy267;
		goto yy269;
	}
yy280:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy269;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy269;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy269;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy285;
	if (yych <= '9') goto yy269;
	goto yy285;
yy284:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	YYCTXMARKER = YYCURSOR;
yy285:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy284;
		goto yy269;
	} else {
		if (yych <= ' ') goto yy284;
		if (yych <= '0') goto yy269;
		if (yych >= ':') goto yy269;
	}
yy286:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy286;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy269;
		if (yych <= '\t') goto yy288;
		if (yych <= '\n') goto yy290;
		goto yy269;
	} else {
		if (yych <= '\r') goto yy292;
		if (yych != ' ') goto yy269;
	}
yy288:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy288;
		goto yy269;
	} else {
		if (yych <= ' ') goto yy288;
		if (yych == '"') goto yy293;
		goto yy269;
	}
yy290:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 423 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto code;
				}
#line 1866 "src/parse/lex.cc"
yy292:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy290;
	goto yy269;
yy293:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy269;
		goto yy293;
	} else {
		if (yych <= '"') goto yy295;
		if (yych == '\\') goto yy296;
		goto yy293;
	}
yy295:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy290;
	if (yych == '\r') goto yy292;
	goto yy269;
yy296:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy269;
	goto yy293;
}
#line 476 "../src/parse/lex.re"


comment:

#line 1900 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ')') {
		if (yych == '\n') goto yy301;
	} else {
		if (yych <= '*') goto yy303;
		if (yych == '/') goto yy304;
	}
	++YYCURSOR;
yy300:
#line 508 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					goto comment;
				}
#line 1955 "src/parse/lex.cc"
yy301:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy305;
	}
	if (yych == '#') goto yy308;
yy302:
#line 499 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					tok = pos = cur;
					cline++;
					goto comment;
				}
#line 1973 "src/parse/lex.cc"
yy303:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy310;
	goto yy300;
yy304:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy312;
	goto yy300;
yy305:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy305;
	}
	if (yych == '#') goto yy308;
yy307:
	YYCURSOR = YYMARKER;
	goto yy302;
yy308:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy308;
		goto yy307;
	} else {
		if (yych <= ' ') goto yy308;
		if (yych == 'l') goto yy314;
		goto yy307;
	}
yy310:
	++YYCURSOR;
#line 480 "../src/parse/lex.re"
	{
					if (--depth == 0)
					{
						goto scan;
					}
					else
					{
						goto comment;
					}
				}
#line 2018 "src/parse/lex.cc"
yy312:
	++YYCURSOR;
#line 490 "../src/parse/lex.re"
	{
					++depth;
					fatal("ambiguous /* found");
					goto comment;
				}
#line 2027 "src/parse/lex.cc"
yy314:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy307;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy307;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy307;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy319;
	if (yych <= '9') goto yy307;
	goto yy319;
yy318:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	YYCTXMARKER = YYCURSOR;
yy319:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy318;
		goto yy307;
	} else {
		if (yych <= ' ') goto yy318;
		if (yych <= '0') goto yy307;
		if (yych >= ':') goto yy307;
	}
yy320:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy320;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy307;
		if (yych <= '\t') goto yy322;
		if (yych <= '\n') goto yy324;
		goto yy307;
	} else {
		if (yych <= '\r') goto yy326;
		if (yych != ' ') goto yy307;
	}
yy322:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy322;
		goto yy307;
	} else {
		if (yych <= ' ') goto yy322;
		if (yych == '"') goto yy327;
		goto yy307;
	}
yy324:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 495 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto comment;
				}
#line 2089 "src/parse/lex.cc"
yy326:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy324;
	goto yy307;
yy327:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy327;
	}
	if (yych <= '\n') goto yy307;
	if (yych >= '#') goto yy330;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy324;
	if (yych == '\r') goto yy326;
	goto yy307;
yy330:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy307;
	goto yy327;
}
#line 515 "../src/parse/lex.re"


nextLine:

#line 2119 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy335;
	++YYCURSOR;
#line 526 "../src/parse/lex.re"
	{  if(cur == eof) {
                  return 0;
               }
               goto nextLine;
            }
#line 2132 "src/parse/lex.cc"
yy335:
	++YYCURSOR;
#line 519 "../src/parse/lex.re"
	{ if(cur == eof) {
                  return 0;
               }
               tok = pos = cur;
               cline++;
               goto scan;
            }
#line 2143 "src/parse/lex.cc"
}
#line 531 "../src/parse/lex.re"

}

static void escape (std::string & dest, const std::string & src)
{
	dest = src;
	size_t l = dest.length();
	for (size_t p = 0; p < l; ++p)
	{
		if (dest[p] == '\\')
		{
			dest.insert(++p, "\\");
			++l;
		}
	}
}

const RegExp *Scanner::lex_cls(bool neg)
{
	Range *r = NULL, *s;
	uint32_t u, l;
fst:
	
#line 2169 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy340;
#line 555 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 2177 "src/parse/lex.cc"
yy340:
	++YYCURSOR;
#line 554 "../src/parse/lex.re"
	{ goto end; }
#line 2182 "src/parse/lex.cc"
}
#line 556 "../src/parse/lex.re"

snd:
	
#line 2188 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy345;
yy344:
#line 559 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 2197 "src/parse/lex.cc"
yy345:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy347;
	YYCURSOR = YYMARKER;
	goto yy344;
yy347:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 560 "../src/parse/lex.re"
	{
			u = lex_cls_chr();
			if (l > u) {
				warn.swapped_range(get_line(), l, u);
				std::swap(l, u);
			}
			goto add;
		}
#line 2215 "src/parse/lex.cc"
}
#line 568 "../src/parse/lex.re"

add:
	if (!(s = opts->encoding.encodeRange(l, u))) {
		fatalf ("Bad code point range: '0x%X - 0x%X'", l, u);
	}
	r = Range::add(r, s);
	goto fst;
end:
	if (neg) {
		r = Range::sub(opts->encoding.fullRange(), r);
	}
	return cls(r);
}

uint32_t Scanner::lex_cls_chr()
{
	tok = cur;
	
#line 2236 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy353;
	if (yych == '\\') goto yy355;
	++YYCURSOR;
#line 591 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(tok[0]); }
#line 2247 "src/parse/lex.cc"
yy353:
	++YYCURSOR;
#line 586 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error"); }
#line 2252 "src/parse/lex.cc"
yy355:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '`') {
		if (yych <= '7') {
			if (yych <= ',') {
				if (yych != '\n') goto yy357;
			} else {
				if (yych <= '-') goto yy359;
				if (yych <= '/') goto yy357;
				if (yych <= '3') goto yy361;
				goto yy363;
			}
		} else {
			if (yych <= 'X') {
				if (yych == 'U') goto yy364;
				if (yych <= 'W') goto yy357;
				goto yy366;
			} else {
				if (yych <= '[') goto yy357;
				if (yych <= '\\') goto yy367;
				if (yych <= ']') goto yy369;
				goto yy357;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy371;
				if (yych <= 'b') goto yy373;
				goto yy357;
			} else {
				if (yych <= 'f') goto yy375;
				if (yych == 'n') goto yy377;
				goto yy357;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy379;
				if (yych <= 's') goto yy357;
				if (yych <= 't') goto yy381;
				goto yy366;
			} else {
				if (yych <= 'v') goto yy383;
				if (yych == 'x') goto yy385;
				goto yy357;
			}
		}
	}
#line 589 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in escape sequence"); }
#line 2303 "src/parse/lex.cc"
yy357:
	++YYCURSOR;
#line 604 "../src/parse/lex.re"
	{
			warn.useless_escape(tline, tok - pos, tok[1]);
			return static_cast<uint8_t>(tok[1]);
		}
#line 2311 "src/parse/lex.cc"
yy359:
	++YYCURSOR;
#line 602 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 2316 "src/parse/lex.cc"
yy361:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy362;
	if (yych <= '7') goto yy386;
yy362:
#line 588 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in octal escape sequence"); }
#line 2325 "src/parse/lex.cc"
yy363:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy362;
yy364:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy365;
		if (yych <= '9') goto yy388;
	} else {
		if (yych <= 'F') goto yy388;
		if (yych <= '`') goto yy365;
		if (yych <= 'f') goto yy388;
	}
yy365:
#line 587 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2343 "src/parse/lex.cc"
yy366:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy365;
		if (yych <= '9') goto yy389;
		goto yy365;
	} else {
		if (yych <= 'F') goto yy389;
		if (yych <= '`') goto yy365;
		if (yych <= 'f') goto yy389;
		goto yy365;
	}
yy367:
	++YYCURSOR;
#line 601 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2361 "src/parse/lex.cc"
yy369:
	++YYCURSOR;
#line 603 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 2366 "src/parse/lex.cc"
yy371:
	++YYCURSOR;
#line 594 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2371 "src/parse/lex.cc"
yy373:
	++YYCURSOR;
#line 595 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2376 "src/parse/lex.cc"
yy375:
	++YYCURSOR;
#line 596 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2381 "src/parse/lex.cc"
yy377:
	++YYCURSOR;
#line 597 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2386 "src/parse/lex.cc"
yy379:
	++YYCURSOR;
#line 598 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2391 "src/parse/lex.cc"
yy381:
	++YYCURSOR;
#line 599 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2396 "src/parse/lex.cc"
yy383:
	++YYCURSOR;
#line 600 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2401 "src/parse/lex.cc"
yy385:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy365;
		if (yych <= '9') goto yy390;
		goto yy365;
	} else {
		if (yych <= 'F') goto yy390;
		if (yych <= '`') goto yy365;
		if (yych <= 'f') goto yy390;
		goto yy365;
	}
yy386:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy387;
	if (yych <= '7') goto yy391;
yy387:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy362;
	} else {
		goto yy365;
	}
yy388:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy387;
		if (yych <= '9') goto yy393;
		goto yy387;
	} else {
		if (yych <= 'F') goto yy393;
		if (yych <= '`') goto yy387;
		if (yych <= 'f') goto yy393;
		goto yy387;
	}
yy389:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy387;
		if (yych <= '9') goto yy394;
		goto yy387;
	} else {
		if (yych <= 'F') goto yy394;
		if (yych <= '`') goto yy387;
		if (yych <= 'f') goto yy394;
		goto yy387;
	}
yy390:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy387;
		if (yych <= '9') goto yy395;
		goto yy387;
	} else {
		if (yych <= 'F') goto yy395;
		if (yych <= '`') goto yy387;
		if (yych <= 'f') goto yy395;
		goto yy387;
	}
yy391:
	++YYCURSOR;
#line 593 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2466 "src/parse/lex.cc"
yy393:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy387;
		if (yych <= '9') goto yy397;
		goto yy387;
	} else {
		if (yych <= 'F') goto yy397;
		if (yych <= '`') goto yy387;
		if (yych <= 'f') goto yy397;
		goto yy387;
	}
yy394:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy387;
		if (yych <= '9') goto yy390;
		goto yy387;
	} else {
		if (yych <= 'F') goto yy390;
		if (yych <= '`') goto yy387;
		if (yych <= 'f') goto yy390;
		goto yy387;
	}
yy395:
	++YYCURSOR;
#line 592 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2495 "src/parse/lex.cc"
yy397:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy387;
		if (yych >= ':') goto yy387;
	} else {
		if (yych <= 'F') goto yy398;
		if (yych <= '`') goto yy387;
		if (yych >= 'g') goto yy387;
	}
yy398:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '@') {
		if (yych <= '/') goto yy387;
		if (yych <= '9') goto yy389;
		goto yy387;
	} else {
		if (yych <= 'F') goto yy389;
		if (yych <= '`') goto yy387;
		if (yych <= 'f') goto yy389;
		goto yy387;
	}
}
#line 608 "../src/parse/lex.re"

}

uint32_t Scanner::lex_str_chr(char quote, bool &end)
{
	end = false;
	tok = cur;
	
#line 2528 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy403;
	if (yych == '\\') goto yy405;
	++YYCURSOR;
#line 621 "../src/parse/lex.re"
	{
			end = tok[0] == quote;
			return static_cast<uint8_t>(tok[0]);
		}
#line 2542 "src/parse/lex.cc"
yy403:
	++YYCURSOR;
#line 616 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error"); }
#line 2547 "src/parse/lex.cc"
yy405:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= 'a') {
		if (yych <= 'T') {
			if (yych <= '/') {
				if (yych != '\n') goto yy407;
			} else {
				if (yych <= '3') goto yy409;
				if (yych <= '7') goto yy411;
				goto yy407;
			}
		} else {
			if (yych <= 'X') {
				if (yych <= 'U') goto yy412;
				if (yych <= 'W') goto yy407;
				goto yy414;
			} else {
				if (yych == '\\') goto yy415;
				if (yych <= '`') goto yy407;
				goto yy417;
			}
		}
	} else {
		if (yych <= 'r') {
			if (yych <= 'f') {
				if (yych <= 'b') goto yy419;
				if (yych <= 'e') goto yy407;
				goto yy421;
			} else {
				if (yych == 'n') goto yy423;
				if (yych <= 'q') goto yy407;
				goto yy425;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 's') goto yy407;
				if (yych <= 't') goto yy427;
				goto yy414;
			} else {
				if (yych <= 'v') goto yy429;
				if (yych == 'x') goto yy431;
				goto yy407;
			}
		}
	}
#line 619 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in escape sequence"); }
#line 2595 "src/parse/lex.cc"
yy407:
	++YYCURSOR;
#line 635 "../src/parse/lex.re"
	{
			if (tok[1] != quote) {
				warn.useless_escape(tline, tok - pos, tok[1]);
			}
			return static_cast<uint8_t>(tok[1]);
		}
#line 2605 "src/parse/lex.cc"
yy409:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy410;
	if (yych <= '7') goto yy432;
yy410:
#line 618 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in octal escape sequence"); }
#line 2614 "src/parse/lex.cc"
yy411:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy410;
yy412:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy413;
		if (yych <= '9') goto yy434;
	} else {
		if (yych <= 'F') goto yy434;
		if (yych <= '`') goto yy413;
		if (yych <= 'f') goto yy434;
	}
yy413:
#line 617 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2632 "src/parse/lex.cc"
yy414:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy413;
		if (yych <= '9') goto yy435;
		goto yy413;
	} else {
		if (yych <= 'F') goto yy435;
		if (yych <= '`') goto yy413;
		if (yych <= 'f') goto yy435;
		goto yy413;
	}
yy415:
	++YYCURSOR;
#line 634 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2650 "src/parse/lex.cc"
yy417:
	++YYCURSOR;
#line 627 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2655 "src/parse/lex.cc"
yy419:
	++YYCURSOR;
#line 628 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2660 "src/parse/lex.cc"
yy421:
	++YYCURSOR;
#line 629 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2665 "src/parse/lex.cc"
yy423:
	++YYCURSOR;
#line 630 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2670 "src/parse/lex.cc"
yy425:
	++YYCURSOR;
#line 631 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2675 "src/parse/lex.cc"
yy427:
	++YYCURSOR;
#line 632 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2680 "src/parse/lex.cc"
yy429:
	++YYCURSOR;
#line 633 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2685 "src/parse/lex.cc"
yy431:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy413;
		if (yych <= '9') goto yy436;
		goto yy413;
	} else {
		if (yych <= 'F') goto yy436;
		if (yych <= '`') goto yy413;
		if (yych <= 'f') goto yy436;
		goto yy413;
	}
yy432:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy433;
	if (yych <= '7') goto yy437;
yy433:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy410;
	} else {
		goto yy413;
	}
yy434:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy433;
		if (yych <= '9') goto yy439;
		goto yy433;
	} else {
		if (yych <= 'F') goto yy439;
		if (yych <= '`') goto yy433;
		if (yych <= 'f') goto yy439;
		goto yy433;
	}
yy435:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy433;
		if (yych <= '9') goto yy440;
		goto yy433;
	} else {
		if (yych <= 'F') goto yy440;
		if (yych <= '`') goto yy433;
		if (yych <= 'f') goto yy440;
		goto yy433;
	}
yy436:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy433;
		if (yych <= '9') goto yy441;
		goto yy433;
	} else {
		if (yych <= 'F') goto yy441;
		if (yych <= '`') goto yy433;
		if (yych <= 'f') goto yy441;
		goto yy433;
	}
yy437:
	++YYCURSOR;
#line 626 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2750 "src/parse/lex.cc"
yy439:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy433;
		if (yych <= '9') goto yy443;
		goto yy433;
	} else {
		if (yych <= 'F') goto yy443;
		if (yych <= '`') goto yy433;
		if (yych <= 'f') goto yy443;
		goto yy433;
	}
yy440:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy433;
		if (yych <= '9') goto yy436;
		goto yy433;
	} else {
		if (yych <= 'F') goto yy436;
		if (yych <= '`') goto yy433;
		if (yych <= 'f') goto yy436;
		goto yy433;
	}
yy441:
	++YYCURSOR;
#line 625 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2779 "src/parse/lex.cc"
yy443:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy433;
		if (yych >= ':') goto yy433;
	} else {
		if (yych <= 'F') goto yy444;
		if (yych <= '`') goto yy433;
		if (yych >= 'g') goto yy433;
	}
yy444:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '@') {
		if (yych <= '/') goto yy433;
		if (yych <= '9') goto yy435;
		goto yy433;
	} else {
		if (yych <= 'F') goto yy435;
		if (yych <= '`') goto yy433;
		if (yych <= 'f') goto yy435;
		goto yy433;
	}
}
#line 641 "../src/parse/lex.re"

}

const RegExp *Scanner::lex_str(char quote, bool casing)
{
	const RegExp *r = NULL;
	for (bool end;;) {
		const uint32_t c = lex_str_chr(quote, end);
		if (end) {
			return r ? r : RegExp::nil();
		}
		r = doCat(r, casing ? ichr(c) : schr(c));
	}
}

void Scanner::set_sourceline ()
{
sourceline:
	tok = cur;

#line 2824 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy449;
	} else {
		if (yych <= '"') goto yy451;
		if (yych <= '0') goto yy447;
		if (yych <= '9') goto yy452;
	}
yy447:
	++YYCURSOR;
yy448:
#line 684 "../src/parse/lex.re"
	{
  					goto sourceline;
  				}
#line 2877 "src/parse/lex.cc"
yy449:
	++YYCURSOR;
#line 672 "../src/parse/lex.re"
	{
  					if (cur == eof)
  					{
						--cur; 
					}
			  		else
			  		{
			  			pos = cur; 
			  		}
			  		tok = cur;
			  		return; 
				}
#line 2893 "src/parse/lex.cc"
yy451:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy448;
	goto yy456;
yy452:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy452;
	}
#line 661 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok, cur, cline))
					{
						fatal ("line number overflow");
					}
					goto sourceline; 
				}
#line 2913 "src/parse/lex.cc"
yy455:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy456:
	if (yybm[0+yych] & 128) {
		goto yy455;
	}
	if (yych <= '\n') goto yy457;
	if (yych <= '"') goto yy458;
	goto yy460;
yy457:
	YYCURSOR = YYMARKER;
	goto yy448;
yy458:
	++YYCURSOR;
#line 668 "../src/parse/lex.re"
	{
					escape (in.file_name, std::string (tok + 1, tok_len () - 2)); // -2 to omit quotes
			  		goto sourceline; 
				}
#line 2935 "src/parse/lex.cc"
yy460:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy457;
	goto yy455;
}
#line 687 "../src/parse/lex.re"

}

} // end namespace re2c
