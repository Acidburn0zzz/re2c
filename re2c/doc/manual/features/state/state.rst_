When the ``-f`` flag is specified, ``re2c`` generates a scanner that can
store its current state, return to its caller, and later resume
operations exactly where it left off.

The default mode of operation in ``re2c`` is a
"pull" model, where the scanner asks for extra input whenever it needs it. However, this mode of operation assumes that the scanner is the "owner" of the parsing loop, and that may not always be convenient.

Typically, if there is a preprocessor ahead of the scanner in the
stream, or for that matter, any other procedural source of data, the
scanner cannot "ask" for more data unless both the scanner and the source
live in separate threads.

The ``-f`` flag is useful exactly for situations like that: it lets users design
scanners that work in a "push" model, i.e., a model where data is fed to the
scanner chunk by chunk. When the scanner runs out of data to consume, it
stores its state and returns to the caller. When more input data is
fed to the scanner, it resumes operations exactly where it left off.

Changes needed compared to the "pull" model:

* The user has to supply macros named ``YYSETSTATE ()`` and ``YYGETSTATE (state)``.

* The ``-f`` option inhibits declaration of ``yych`` and ``yyaccept``, so the
  user has to declare them and save and restore them where required. 
  In the ``examples/push_model/push.re`` example, these are declared as
  fields of a (C++) class of which the scanner is a method, so they do
  not need to be saved/restored explicitly. For C, they could, e.g., be made
  macros that select fields from a structure passed in as a parameter.
  Alternatively, they could be declared as local variables, saved with
  ``YYFILL (n)`` when it decides to return and restored upon entering the
  function. Also, it could be more efficient to save the state from
  ``YYFILL (n)`` because ``YYSETSTATE (state)`` is called unconditionally.
  ``YYFILL (n)`` however does not get ``state`` as a parameter, so we would have
  to store state in a local variable by ``YYSETSTATE (state)``.

* Modify ``YYFILL (n)`` to return (from the function calling it) if more input is needed.

* Modify the caller to recognize if more input is needed and respond appropriately.

* The generated code will contain a switch block that is used to
  restore the last state by jumping behind the corresponding ``YYFILL (n)``
  call. This code is automatically generated in the epilogue of the first ``/*!re2c */``
  block. It is possible to trigger generation of the ``YYGETSTATE ()``
  block earlier by placing a ``/*!getstate:re2c*/`` comment. This is especially useful when the scanner code should be
  wrapped inside a loop.

Please see ``examples/push_model/push.re`` for an example of a "push" model scanner. The
generated code can be tweaked with inplace configurations ``state:abort``
and ``state:nextlabel``.
