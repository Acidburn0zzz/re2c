/* Generated by re2c 0.9.2 on Sat Jan 31 10:43:47 2004 */
#line 1 "scanner.re"
/* $Id$ */
#include <stdlib.h>
#include <string.h>
#include <iostream.h>
#include <unistd.h>
#include "scanner.h"
#include "parser.h"
#include "y.tab.h"

extern YYSTYPE yylval;

#define	BSIZE	8192

#define	YYCTYPE		char
#define	YYCURSOR	cursor
#define	YYLIMIT		lim
#define	YYMARKER	ptr
#define	YYFILL(n)	{cursor = fill(cursor);}

#define	RETURN(i)	{cur = cursor; return i;}


Scanner::Scanner(int i) : in(i),
	bot(NULL), tok(NULL), ptr(NULL), cur(NULL), pos(NULL), lim(NULL),
	top(NULL), eof(NULL), tchar(0), tline(0), cline(1) {
    ;
}

char *Scanner::fill(char *cursor){
    if(!eof){
	uint cnt = tok - bot;
	if(cnt){
	    memcpy(bot, tok, lim - tok);
	    tok = bot;
	    ptr -= cnt;
	    cursor -= cnt;
	    pos -= cnt;
	    lim -= cnt;
	}
	if((top - lim) < BSIZE){
	    char *buf = new char[(lim - bot) + BSIZE];
	    memcpy(buf, tok, lim - tok);
	    tok = buf;
	    ptr = &buf[ptr - bot];
	    cursor = &buf[cursor - bot];
	    pos = &buf[pos - bot];
	    lim = &buf[lim - bot];
	    top = &lim[BSIZE];
	    delete [] bot;
	    bot = buf;
	}
	if((cnt = read(in, (char*) lim, BSIZE)) != BSIZE){
	    eof = &lim[cnt]; *eof++ = '\n';
	}
	lim += cnt;
    }
    return cursor;
}

#line 69 "scanner.re"


int Scanner::echo(ostream &out){
    char *cursor = cur;

    // Catch EOF
    if (eof && cursor == eof)
    	return 0;

    tok = cursor;
echo:

#line 7 "re2c-output.c"
{
	YYCTYPE yych;
	unsigned int yyaccept;
	goto yy0;
yy1:	++YYCURSOR;
yy0:
	if((YYLIMIT - YYCURSOR) < 7) YYFILL(7);
	yych = *YYCURSOR;
	if(yych == '\n')	goto yy4;
	if(yych != '/')	goto yy6;
	goto yy2;
yy2:	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	if(yych == '*')	goto yy7;
	goto yy3;
yy3:
#line 88 "scanner.re"
{ goto echo; }
#line 26 "re2c-output.c"
yy4:	yych = *++YYCURSOR;
	goto yy5;
yy5:
#line 84 "scanner.re"
{ if(cursor == eof) RETURN(0);
				  out.write((const char*)(tok), cursor - tok);
				  tok = pos = cursor; cline++;
				  goto echo; }
#line 35 "re2c-output.c"
yy6:	yych = *++YYCURSOR;
	goto yy3;
yy7:	yych = *++YYCURSOR;
	if(yych == '!')	goto yy9;
	goto yy8;
yy8:	YYCURSOR = YYMARKER;
	switch(yyaccept){
	case 0:	goto yy3;
	}
yy9:	yych = *++YYCURSOR;
	if(yych != 'r')	goto yy8;
	goto yy10;
yy10:	yych = *++YYCURSOR;
	if(yych != 'e')	goto yy8;
	goto yy11;
yy11:	yych = *++YYCURSOR;
	if(yych != '2')	goto yy8;
	goto yy12;
yy12:	yych = *++YYCURSOR;
	if(yych != 'c')	goto yy8;
	goto yy13;
yy13:	yych = *++YYCURSOR;
	goto yy14;
yy14:
#line 81 "scanner.re"
{ out.write((const char*)(tok), &cursor[-7] - tok);
				  tok = cursor;
				  RETURN(1); }
#line 64 "re2c-output.c"
}
#line 89 "scanner.re"

}


int Scanner::scan(){
    char *cursor = cur;
    uint depth;

scan:
    tchar = cursor - pos;
    tline = cline;
    tok = cursor;

#line 68 "re2c-output.c"
{
	YYCTYPE yych;
	unsigned int yyaccept;
	goto yy15;
yy16:	++YYCURSOR;
yy15:
	if((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if(yych <= ':'){
		if(yych <= '"'){
			if(yych <= '\n'){
				if(yych <= '\b')	goto yy35;
				if(yych <= '\t')	goto yy31;
				goto yy33;
			} else {
				if(yych == ' ')	goto yy31;
				if(yych <= '!')	goto yy35;
				goto yy23;
			}
		} else {
			if(yych <= '*'){
				if(yych <= '\'')	goto yy35;
				if(yych <= ')')	goto yy27;
				goto yy21;
			} else {
				if(yych <= '+')	goto yy28;
				if(yych == '/')	goto yy19;
				goto yy35;
			}
		}
	} else {
		if(yych <= 'Z'){
			if(yych <= '='){
				if(yych == '<')	goto yy35;
				goto yy27;
			} else {
				if(yych == '?')	goto yy28;
				if(yych <= '@')	goto yy35;
				goto yy29;
			}
		} else {
			if(yych <= '`'){
				if(yych <= '[')	goto yy25;
				if(yych <= '\\')	goto yy27;
				goto yy35;
			} else {
				if(yych <= 'z')	goto yy29;
				if(yych <= '{')	goto yy17;
				if(yych <= '|')	goto yy27;
				goto yy35;
			}
		}
	}
yy17:	yych = *++YYCURSOR;
	goto yy18;
yy18:
#line 102 "scanner.re"
{ depth = 1;
				  goto code;
				}
#line 129 "re2c-output.c"
yy19:	yych = *++YYCURSOR;
	if(yych == '*')	goto yy54;
	goto yy20;
yy20:
#line 121 "scanner.re"
{ RETURN(*tok); }
#line 136 "re2c-output.c"
yy21:	yych = *++YYCURSOR;
	if(yych == '/')	goto yy52;
	goto yy22;
yy22:
#line 123 "scanner.re"
{ yylval.op = *tok;
				  RETURN(CLOSE); }
#line 144 "re2c-output.c"
yy23:	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	if(yych != '\n')	goto yy48;
	goto yy24;
yy24:
#line 114 "scanner.re"
{ fatal("bad string"); }
#line 152 "re2c-output.c"
yy25:	yyaccept = 1;
	yych = *(YYMARKER = ++YYCURSOR);
	if(yych != '\n')	goto yy42;
	goto yy26;
yy26:
#line 119 "scanner.re"
{ fatal("bad character constant"); }
#line 160 "re2c-output.c"
yy27:	yych = *++YYCURSOR;
	goto yy20;
yy28:	yych = *++YYCURSOR;
	goto yy22;
yy29:	yych = *++YYCURSOR;
	goto yy40;
yy30:
#line 126 "scanner.re"
{ cur = cursor;
				  yylval.symbol = Symbol::find(token());
				  return ID; }
#line 172 "re2c-output.c"
yy31:	yych = *++YYCURSOR;
	goto yy38;
yy32:
#line 130 "scanner.re"
{ goto scan; }
#line 178 "re2c-output.c"
yy33:	yych = *++YYCURSOR;
	goto yy34;
yy34:
#line 132 "scanner.re"
{ if(cursor == eof) RETURN(0);
				  pos = cursor; cline++;
				  goto scan;
	    			}
#line 187 "re2c-output.c"
yy35:	yych = *++YYCURSOR;
	goto yy36;
yy36:
#line 137 "scanner.re"
{ cerr << "unexpected character: " << *tok << endl;
				  goto scan;
				}
#line 195 "re2c-output.c"
yy37:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	goto yy38;
yy38:	if(yych == '\t')	goto yy37;
	if(yych == ' ')	goto yy37;
	goto yy32;
yy39:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	goto yy40;
yy40:	if(yych <= '@'){
		if(yych <= '/')	goto yy30;
		if(yych <= '9')	goto yy39;
		goto yy30;
	} else {
		if(yych <= 'Z')	goto yy39;
		if(yych <= '`')	goto yy30;
		if(yych <= 'z')	goto yy39;
		goto yy30;
	}
yy41:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	goto yy42;
yy42:	if(yych <= '['){
		if(yych != '\n')	goto yy41;
		goto yy43;
	} else {
		if(yych <= '\\')	goto yy44;
		if(yych <= ']')	goto yy45;
		goto yy41;
	}
yy43:	YYCURSOR = YYMARKER;
	switch(yyaccept){
	case 0:	goto yy24;
	case 1:	goto yy26;
	}
yy44:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if(yych == '\n')	goto yy43;
	goto yy41;
yy45:	yych = *++YYCURSOR;
	goto yy46;
yy46:
#line 116 "scanner.re"
{ cur = cursor;
				  yylval.regexp = ranToRE(token());
				  return RANGE; }
#line 246 "re2c-output.c"
yy47:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	goto yy48;
yy48:	if(yych <= '!'){
		if(yych == '\n')	goto yy43;
		goto yy47;
	} else {
		if(yych <= '"')	goto yy50;
		if(yych != '\\')	goto yy47;
		goto yy49;
	}
yy49:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if(yych == '\n')	goto yy43;
	goto yy47;
yy50:	yych = *++YYCURSOR;
	goto yy51;
yy51:
#line 111 "scanner.re"
{ cur = cursor;
				  yylval.regexp = strToRE(token());
				  return STRING; }
#line 271 "re2c-output.c"
yy52:	yych = *++YYCURSOR;
	goto yy53;
yy53:
#line 108 "scanner.re"
{ tok = cursor;
				  RETURN(0); }
#line 278 "re2c-output.c"
yy54:	yych = *++YYCURSOR;
	goto yy55;
yy55:
#line 105 "scanner.re"
{ depth = 1;
				  goto comment; }
#line 285 "re2c-output.c"
}
#line 140 "scanner.re"


code:

#line 289 "re2c-output.c"
{
	YYCTYPE yych;
	unsigned int yyaccept;
	goto yy56;
yy57:	++YYCURSOR;
yy56:
	if((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if(yych <= '&'){
		if(yych <= '\n'){
			if(yych <= '\t')	goto yy64;
			goto yy62;
		} else {
			if(yych == '"')	goto yy66;
			goto yy64;
		}
	} else {
		if(yych <= '{'){
			if(yych <= '\'')	goto yy67;
			if(yych <= 'z')	goto yy64;
			goto yy60;
		} else {
			if(yych != '}')	goto yy64;
			goto yy58;
		}
	}
yy58:	yych = *++YYCURSOR;
	goto yy59;
yy59:
#line 144 "scanner.re"
{ if(--depth == 0){
					cur = cursor;
					yylval.token = new Token(token(), tline);
					return CODE;
				  }
				  goto code; }
#line 326 "re2c-output.c"
yy60:	yych = *++YYCURSOR;
	goto yy61;
yy61:
#line 150 "scanner.re"
{ ++depth;
				  goto code; }
#line 333 "re2c-output.c"
yy62:	yych = *++YYCURSOR;
	goto yy63;
yy63:
#line 152 "scanner.re"
{ if(cursor == eof) fatal("missing '}'");
				  pos = cursor; cline++;
				  goto code;
				}
#line 342 "re2c-output.c"
yy64:	yych = *++YYCURSOR;
	goto yy65;
yy65:
#line 156 "scanner.re"
{ goto code; }
#line 348 "re2c-output.c"
yy66:	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	if(yych == '\n')	goto yy65;
	goto yy73;
yy67:	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	if(yych == '\n')	goto yy65;
	goto yy69;
yy68:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	goto yy69;
yy69:	if(yych <= '&'){
		if(yych != '\n')	goto yy68;
		goto yy70;
	} else {
		if(yych <= '\'')	goto yy64;
		if(yych == '\\')	goto yy71;
		goto yy68;
	}
yy70:	YYCURSOR = YYMARKER;
	switch(yyaccept){
	case 0:	goto yy65;
	}
yy71:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if(yych == '\n')	goto yy70;
	goto yy68;
yy72:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	goto yy73;
yy73:	if(yych <= '!'){
		if(yych == '\n')	goto yy70;
		goto yy72;
	} else {
		if(yych <= '"')	goto yy64;
		if(yych != '\\')	goto yy72;
		goto yy74;
	}
yy74:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if(yych == '\n')	goto yy70;
	goto yy72;
}
#line 157 "scanner.re"


comment:

#line 398 "re2c-output.c"
{
	YYCTYPE yych;
	unsigned int yyaccept;
	goto yy75;
yy76:	++YYCURSOR;
yy75:
	if((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if(yych <= ')'){
		if(yych == '\n')	goto yy80;
		goto yy82;
	} else {
		if(yych <= '*')	goto yy77;
		if(yych == '/')	goto yy79;
		goto yy82;
	}
yy77:	yych = *++YYCURSOR;
	if(yych == '/')	goto yy85;
	goto yy78;
yy78:
#line 171 "scanner.re"
{ goto comment; }
#line 421 "re2c-output.c"
yy79:	yych = *++YYCURSOR;
	if(yych == '*')	goto yy83;
	goto yy78;
yy80:	yych = *++YYCURSOR;
	goto yy81;
yy81:
#line 167 "scanner.re"
{ if(cursor == eof) RETURN(0);
				  tok = pos = cursor; cline++;
				  goto comment;
				}
#line 433 "re2c-output.c"
yy82:	yych = *++YYCURSOR;
	goto yy78;
yy83:	yych = *++YYCURSOR;
	goto yy84;
yy84:
#line 165 "scanner.re"
{ ++depth;
				  goto comment; }
#line 442 "re2c-output.c"
yy85:	yych = *++YYCURSOR;
	goto yy86;
yy86:
#line 161 "scanner.re"
{ if(--depth == 0)
					goto scan;
				    else
					goto comment; }
#line 451 "re2c-output.c"
}
#line 172 "scanner.re"

}

void Scanner::fatal(char *msg){
    cerr << "line " << tline << ", column " << (tchar + 1) << ": "
	<< msg << endl;
    exit(1);
}
