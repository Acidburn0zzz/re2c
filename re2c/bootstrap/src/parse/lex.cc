/* Generated by re2c 0.16 on Sat Apr  2 11:45:18 2016 */
#line 1 "../src/parse/lex.re"
#include "src/util/c99_stdint.h"
#include <stddef.h>
#include <string.h>
#include <algorithm>
#include <limits>
#include <string>

#include "src/codegen/output.h"
#include "src/conf/opt.h"
#include "src/conf/warn.h"
#include "src/globals.h"
#include "src/ir/regexp/encoding/enc.h"
#include "src/ir/regexp/regexp.h"
#include "src/parse/code.h"
#include "src/parse/extop.h"
#include "src/parse/input.h"
#include "src/parse/scanner.h"
#include "src/parse/parser.h" // needed by "y.tab.h"
#include "src/parse/unescape.h"
#include "src/util/range.h"
#include "src/util/s_to_n32_unsafe.h"
#include "y.tab.h"

extern YYSTYPE yylval;

#define	YYCTYPE		unsigned char
#define	YYCURSOR	cur
#define	YYLIMIT		lim
#define	YYMARKER	ptr
#define	YYCTXMARKER ctx
#define	YYFILL(n)	{ fill (n); }

namespace re2c
{

// source code is in ASCII: pointers have type 'char *'
// but re2c makes an implicit assumption that YYCTYPE is unsigned
// when it generates comparisons
#line 41 "../src/parse/lex.re"


#line 62 "../src/parse/lex.re"


Scanner::ParseMode Scanner::echo()
{
	uint32_t ignored = 0;

	if (eof && cur == eof) // Catch EOF
	{
		return Stop;
	}

	tok = cur;
echo:

#line 60 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 16) YYFILL(16);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '$') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy2;
			if (yych <= '\t') goto yy4;
			goto yy6;
		} else {
			if (yych == '\r') goto yy8;
			goto yy4;
		}
	} else {
		if (yych <= '*') {
			if (yych <= '%') goto yy9;
			if (yych <= ')') goto yy4;
			goto yy10;
		} else {
			if (yych == '/') goto yy11;
			goto yy4;
		}
	}
yy2:
	++YYCURSOR;
#line 180 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, tok_len () - 1);
			// -1 so we don't write out the \0
		}
		if (cur == eof) {
			return Stop;
		}
	}
#line 131 "src/parse/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 190 "../src/parse/lex.re"
	{ goto echo; }
#line 137 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy12;
	}
	if (yych == '#') goto yy15;
yy7:
#line 171 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, tok_len ());
		}
		cline++;
		tok = pos = cur;
		goto echo;
	}
#line 155 "src/parse/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy17;
	goto yy5;
yy10:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy19;
	goto yy5;
yy11:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy21;
	goto yy5;
yy12:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy12;
	}
	if (yych == '#') goto yy15;
yy14:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy7;
	} else {
		goto yy5;
	}
yy15:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy15;
		goto yy14;
	} else {
		if (yych <= ' ') goto yy15;
		if (yych == 'l') goto yy22;
		goto yy14;
	}
yy17:
	++YYCURSOR;
#line 77 "../src/parse/lex.re"
	{
					if (opts->rFlag)
					{
						fatal("found standard 're2c' block while using -r flag");
					}
					if (opts->target == opt_t::CODE)
					{
						const size_t lexeme_len = cur[-1] == '{'
							? sizeof ("%{") - 1
							: sizeof ("/*!re2c") - 1;
						out.wraw(tok, tok_len () - lexeme_len);
					}
					tok = cur;
					return Parse;
				}
#line 218 "src/parse/lex.cc"
yy19:
	++YYCURSOR;
#line 158 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, tok_len ());
		}
		tok = pos = cur;
		goto echo;
	}
#line 229 "src/parse/lex.cc"
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy23;
	goto yy14;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy24;
	goto yy14;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'c':	goto yy25;
	case 'g':	goto yy26;
	case 'i':	goto yy27;
	case 'm':	goto yy28;
	case 'r':	goto yy29;
	case 't':	goto yy30;
	case 'u':	goto yy31;
	default:	goto yy14;
	}
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy32;
	goto yy14;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy33;
	goto yy14;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy34;
	goto yy14;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy35;
	goto yy14;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy36;
	goto yy14;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy37;
	if (yych == 'u') goto yy38;
	goto yy14;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy39;
	goto yy14;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy40;
	goto yy14;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy41;
	goto yy14;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy42;
	goto yy14;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy43;
	goto yy14;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy44;
	goto yy14;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy45;
	goto yy14;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy46;
	goto yy14;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy47;
	goto yy14;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy48;
	goto yy14;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy49;
	goto yy14;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy51;
	if (yych <= '9') goto yy14;
	goto yy51;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy52;
	goto yy14;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy53;
	goto yy14;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy54;
	goto yy14;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy55;
	goto yy14;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy17;
	goto yy14;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy56;
	goto yy14;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy57;
	goto yy14;
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy58;
	goto yy14;
yy50:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	YYCTXMARKER = YYCURSOR;
yy51:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy50;
		goto yy14;
	} else {
		if (yych <= ' ') goto yy50;
		if (yych <= '0') goto yy14;
		if (yych <= '9') goto yy59;
		goto yy14;
	}
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy61;
	goto yy14;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy62;
	goto yy14;
yy54:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy63;
	goto yy14;
yy55:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy64;
	goto yy14;
yy56:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy65;
	goto yy14;
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy66;
	goto yy14;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy67;
	goto yy14;
yy59:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy59;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy14;
		if (yych <= '\t') goto yy68;
		if (yych <= '\n') goto yy70;
		goto yy14;
	} else {
		if (yych <= '\r') goto yy72;
		if (yych == ' ') goto yy68;
		goto yy14;
	}
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy73;
	goto yy14;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy74;
	goto yy14;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy75;
	goto yy14;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy76;
	goto yy14;
yy65:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy77;
	goto yy14;
yy66:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy78;
	goto yy14;
yy67:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy79;
	goto yy14;
yy68:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy68;
		goto yy14;
	} else {
		if (yych <= ' ') goto yy68;
		if (yych == '"') goto yy80;
		goto yy14;
	}
yy70:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 166 "../src/parse/lex.re"
	{
		set_sourceline();
		goto echo;
	}
#line 464 "src/parse/lex.cc"
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy70;
	goto yy14;
yy73:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy82;
	goto yy14;
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy83;
	goto yy14;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy84;
	goto yy14;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy85;
	goto yy14;
yy77:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy86;
	goto yy14;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy87;
	goto yy14;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy88;
	goto yy14;
yy80:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy80;
	}
	if (yych <= '\n') goto yy14;
	if (yych <= '"') goto yy89;
	goto yy90;
yy82:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy91;
	goto yy14;
yy83:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy92;
	goto yy14;
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy93;
	goto yy14;
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy94;
	goto yy14;
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy96;
	goto yy14;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy97;
	goto yy14;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy98;
	goto yy14;
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy70;
	if (yych == '\r') goto yy72;
	goto yy14;
yy90:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy14;
	goto yy80;
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy100;
	goto yy14;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy101;
	goto yy14;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy102;
	goto yy14;
yy94:
	++YYCURSOR;
#line 121 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wdelay_yymaxfill();
		}
		goto eoc;
	}
#line 567 "src/parse/lex.cc"
yy96:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy103;
	goto yy14;
yy97:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy104;
	goto yy14;
yy98:
	++YYCURSOR;
#line 104 "../src/parse/lex.re"
	{
					if (!opts->rFlag)
					{
						fatal("found 'use:re2c' block without -r flag");
					}
					reuse();
					if (opts->target == opt_t::CODE)
					{
						const size_t lexeme_len = sizeof ("/*!use:re2c") - 1;
						out.wraw(tok, tok_len () - lexeme_len);
					}
					tok = cur;
					return Reuse;
				}
#line 593 "src/parse/lex.cc"
yy100:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy105;
	goto yy14;
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy106;
	goto yy14;
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy107;
	goto yy14;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy108;
	goto yy14;
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy110;
	goto yy14;
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy112;
	goto yy14;
yy106:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy113;
	goto yy14;
yy107:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy114;
	goto yy14;
yy108:
	++YYCURSOR;
#line 92 "../src/parse/lex.re"
	{
					if (opts->rFlag)
					{
						opts.reset_mapCodeName ();
					}
					else
					{
						fatal("found 'rules:re2c' block without -r flag");
					}
					tok = cur;
					return Rules;
				}
#line 641 "src/parse/lex.cc"
yy110:
	++YYCURSOR;
#line 135 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wdelay_line_info().ws("\n")
				.wdelay_types().ws("\n")
				.wline_info(cline, get_fname().c_str());
		}
		goto eoc;
	}
#line 653 "src/parse/lex.cc"
yy112:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy116;
	goto yy14;
yy113:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy117;
	goto yy14;
yy114:
	++YYCURSOR;
#line 119 "../src/parse/lex.re"
	{ goto eoc; }
#line 666 "src/parse/lex.cc"
yy116:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy118;
	goto yy14;
yy117:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy120;
	goto yy14;
yy118:
	++YYCURSOR;
#line 144 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			const size_t len = sizeof("/*!contexts:re2c") - 1;
			out.wraw(tok, tok_len() - len);
		}
		ConfContexts *conf = new ConfContexts;
		lex_conf_contexts(*conf);
		if (opts->target == opt_t::CODE) {
			out.wdelay_contexts(opts->topIndent, conf);
		}
		tok = pos = cur;
		goto echo;
	}
#line 691 "src/parse/lex.cc"
yy120:
	++YYCURSOR;
#line 128 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wdelay_state_goto(opts->topIndent);
		}
		goto eoc;
	}
#line 701 "src/parse/lex.cc"
}
#line 191 "../src/parse/lex.re"


eoc:

#line 708 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy124;
		if (yych == '\n') goto yy128;
		goto yy126;
	} else {
		if (yych <= '\r') goto yy130;
		if (yych == '*') goto yy131;
		goto yy126;
	}
yy124:
	++YYCURSOR;
#line 195 "../src/parse/lex.re"
	{ fatal("expected end of block"); }
#line 726 "src/parse/lex.cc"
yy126:
	++YYCURSOR;
yy127:
#line 196 "../src/parse/lex.re"
	{ goto eoc; }
#line 732 "src/parse/lex.cc"
yy128:
	++YYCURSOR;
#line 197 "../src/parse/lex.re"
	{ ++ignored; goto eoc; }
#line 737 "src/parse/lex.cc"
yy130:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy128;
	goto yy127;
yy131:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy127;
	++YYCURSOR;
#line 198 "../src/parse/lex.re"
	{
		if (ignored > 0) {
			cline += ignored;
			ignored = 0;
			out.ws("\n").wline_info(cline, get_fname().c_str());
		}
		tok = pos = cur;
		goto echo;
	}
#line 756 "src/parse/lex.cc"
}
#line 207 "../src/parse/lex.re"

}

int Scanner::scan()
{
	uint32_t depth;

scan:
	tchar = cur - pos;
	tline = cline;
	tok = cur;
	switch (lexer_state)
	{
		case LEX_NORMAL:    goto start;
		case LEX_FLEX_NAME: goto flex_name;
	}

start:

#line 778 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 6) YYFILL(6);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy138;
	}
	if (yych <= '9') {
		if (yych <= '&') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy136;
				if (yych <= '\n') goto yy141;
				if (yych >= '\r') goto yy143;
			} else {
				if (yych <= '"') {
					if (yych >= '"') goto yy144;
				} else {
					if (yych == '%') goto yy146;
				}
			}
		} else {
			if (yych <= '+') {
				if (yych <= '\'') goto yy147;
				if (yych <= ')') goto yy149;
				if (yych <= '*') goto yy151;
				goto yy153;
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy149;
				} else {
					if (yych <= '.') goto yy155;
					if (yych <= '/') goto yy157;
					goto yy158;
				}
			}
		}
	} else {
		if (yych <= '\\') {
			if (yych <= '>') {
				if (yych <= ':') goto yy159;
				if (yych == '<') goto yy160;
				goto yy149;
			} else {
				if (yych <= '@') {
					if (yych <= '?') goto yy153;
					goto yy161;
				} else {
					if (yych <= 'Z') goto yy158;
					if (yych <= '[') goto yy162;
					goto yy149;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych == '_') goto yy158;
				if (yych >= 'a') goto yy158;
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy164;
					goto yy158;
				} else {
					if (yych <= '{') goto yy165;
					if (yych <= '|') goto yy149;
				}
			}
		}
	}
yy136:
	++YYCURSOR;
yy137:
#line 385 "../src/parse/lex.re"
	{
					fatalf("unexpected character: '%c'", *tok);
					goto scan;
				}
#line 889 "src/parse/lex.cc"
yy138:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy138;
	}
#line 369 "../src/parse/lex.re"
	{
					goto scan;
				}
#line 901 "src/parse/lex.cc"
yy141:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy167;
	} else {
		if (yych <= ' ') goto yy167;
		if (yych == '#') goto yy170;
	}
yy142:
#line 378 "../src/parse/lex.re"
	{
					if (cur == eof) return 0;
					pos = cur;
					cline++;
					goto scan;
				}
#line 919 "src/parse/lex.cc"
yy143:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy141;
	goto yy137;
yy144:
	++YYCURSOR;
#line 256 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"',  opts->bCaseInsensitive ||  opts->bCaseInverted); return TOKEN_REGEXP; }
#line 928 "src/parse/lex.cc"
yy146:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy172;
	goto yy137;
yy147:
	++YYCURSOR;
#line 255 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\'', opts->bCaseInsensitive || !opts->bCaseInverted); return TOKEN_REGEXP; }
#line 937 "src/parse/lex.cc"
yy149:
	++YYCURSOR;
yy150:
#line 272 "../src/parse/lex.re"
	{
					return *tok;
				}
#line 945 "src/parse/lex.cc"
yy151:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '/') goto yy172;
#line 276 "../src/parse/lex.re"
	{
					yylval.op = *tok;
					return TOKEN_STAR;
				}
#line 954 "src/parse/lex.cc"
yy153:
	++YYCURSOR;
#line 280 "../src/parse/lex.re"
	{
					yylval.op = *tok;
					return TOKEN_CLOSE;
				}
#line 962 "src/parse/lex.cc"
yy155:
	++YYCURSOR;
#line 364 "../src/parse/lex.re"
	{
					yylval.regexp = mkDot();
					return TOKEN_REGEXP;
				}
#line 970 "src/parse/lex.cc"
yy157:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy174;
	if (yych == '/') goto yy176;
	goto yy150;
yy158:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	goto yy184;
yy159:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy185;
	goto yy137;
yy160:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '!') goto yy187;
	if (yych == '>') goto yy189;
	goto yy150;
yy161:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy137;
		if (yych <= '9') goto yy190;
		if (yych <= '@') goto yy137;
		goto yy190;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy137;
			goto yy190;
		} else {
			if (yych <= '`') goto yy137;
			if (yych <= 'z') goto yy190;
			goto yy137;
		}
	}
yy162:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '^') goto yy193;
#line 257 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1012 "src/parse/lex.cc"
yy164:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	if (yych == 'e') goto yy195;
	goto yy184;
yy165:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy198;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy196;
		if (yych >= 'A') goto yy200;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy200;
		} else {
			if (yych <= '`') goto yy166;
			if (yych <= 'z') goto yy200;
		}
	}
yy166:
#line 226 "../src/parse/lex.re"
	{
					depth = 1;
					goto code;
				}
#line 1041 "src/parse/lex.cc"
yy167:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy167;
	} else {
		if (yych <= ' ') goto yy167;
		if (yych == '#') goto yy170;
	}
yy169:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy142;
		} else {
			goto yy150;
		}
	} else {
		if (yyaccept == 2) {
			goto yy166;
		} else {
			goto yy197;
		}
	}
yy170:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy170;
		goto yy169;
	} else {
		if (yych <= ' ') goto yy170;
		if (yych == 'l') goto yy202;
		goto yy169;
	}
yy172:
	++YYCURSOR;
#line 250 "../src/parse/lex.re"
	{
					tok = cur;
					return 0;
				}
#line 1086 "src/parse/lex.cc"
yy174:
	++YYCURSOR;
#line 244 "../src/parse/lex.re"
	{
					depth = 1;
					goto comment;
				}
#line 1094 "src/parse/lex.cc"
yy176:
	++YYCURSOR;
#line 241 "../src/parse/lex.re"
	{
				goto nextLine;
			}
#line 1101 "src/parse/lex.cc"
yy178:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 348 "../src/parse/lex.re"
	{
					if (!opts->FFlag) {
						yylval.str = new std::string (tok, tok_len());
						return TOKEN_ID;
					} else {
						const RegExp *r = NULL;
						const bool casing = opts->bCaseInsensitive || opts->bCaseInverted;
						for (char *s = tok; s < cur; ++s) {
							const uint32_t c = static_cast<uint8_t>(*s);
							r = doCat(r, casing ? ichr(c) : schr(c));
						}
						yylval.regexp = r ? r : RegExp::nil();
						return TOKEN_REGEXP;
					}
				}
#line 1121 "src/parse/lex.cc"
yy180:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy206;
yy181:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 343 "../src/parse/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					return TOKEN_ID;
				}
#line 1133 "src/parse/lex.cc"
yy183:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	YYCTXMARKER = YYCURSOR;
yy184:
	if (yybm[0+yych] & 32) {
		goto yy183;
	}
	if (yych <= ' ') {
		if (yych == '\t') goto yy180;
		if (yych <= 0x1F) goto yy178;
		goto yy180;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy178;
			goto yy181;
		} else {
			if (yych <= '<') goto yy178;
			if (yych <= '>') goto yy181;
			goto yy178;
		}
	}
yy185:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '>') goto yy207;
#line 235 "../src/parse/lex.re"
	{
					tok += 2; /* skip ":=" */
					depth = 0;
					goto code;
				}
#line 1166 "src/parse/lex.cc"
yy187:
	++YYCURSOR;
#line 263 "../src/parse/lex.re"
	{
					return TOKEN_SETUP;
				}
#line 1173 "src/parse/lex.cc"
yy189:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	goto yy210;
yy190:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy192;
		if (yych <= '9') goto yy190;
		if (yych >= 'A') goto yy190;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy190;
		} else {
			if (yych <= '`') goto yy192;
			if (yych <= 'z') goto yy190;
		}
	}
yy192:
#line 267 "../src/parse/lex.re"
	{
		yylval.str = new std::string(tok + 1, tok_len() - 1);
		return TOKEN_CTX;
	}
#line 1200 "src/parse/lex.cc"
yy193:
	++YYCURSOR;
#line 258 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1205 "src/parse/lex.cc"
yy195:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	if (yych == '2') goto yy215;
	goto yy184;
yy196:
	++YYCURSOR;
yy197:
#line 316 "../src/parse/lex.re"
	{
					fatal("illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
				}
#line 1218 "src/parse/lex.cc"
yy198:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy198;
	}
	if (yych <= '^') {
		if (yych <= ',') {
			if (yych <= '+') goto yy169;
			goto yy216;
		} else {
			if (yych <= '@') goto yy169;
			if (yych >= '[') goto yy169;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy169;
		} else {
			if (yych == '}') goto yy217;
			goto yy169;
		}
	}
yy200:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy169;
			goto yy200;
		} else {
			if (yych <= '@') goto yy169;
			if (yych <= 'Z') goto yy200;
			goto yy169;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy169;
			goto yy200;
		} else {
			if (yych == '}') goto yy219;
			goto yy169;
		}
	}
yy202:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy221;
	goto yy169;
yy203:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 330 "../src/parse/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					if (opts->FFlag)
					{
						lexer_state = LEX_FLEX_NAME;
						return TOKEN_FID;
					}
					else
					{
						return TOKEN_ID;
					}
				}
#line 1284 "src/parse/lex.cc"
yy205:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy206:
	if (yych <= ' ') {
		if (yych == '\t') goto yy205;
		if (yych <= 0x1F) goto yy203;
		goto yy205;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy203;
			goto yy181;
		} else {
			if (yych <= '<') goto yy203;
			if (yych <= '>') goto yy181;
			goto yy203;
		}
	}
yy207:
	++YYCURSOR;
	YYCURSOR -= 2;
#line 231 "../src/parse/lex.re"
	{
					return *tok;
				}
#line 1311 "src/parse/lex.cc"
yy209:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
yy210:
	if (yych <= '9') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy169;
			goto yy209;
		} else {
			if (yych == ' ') goto yy209;
			goto yy169;
		}
	} else {
		if (yych <= '=') {
			if (yych <= ':') goto yy211;
			if (yych <= '<') goto yy169;
			goto yy212;
		} else {
			if (yych == '{') goto yy213;
			goto yy169;
		}
	}
yy211:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy213;
	goto yy169;
yy212:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '>') goto yy169;
yy213:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 260 "../src/parse/lex.re"
	{
					return TOKEN_NOCOND;
				}
#line 1349 "src/parse/lex.cc"
yy215:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	if (yych == 'c') goto yy222;
	goto yy184;
yy216:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy197;
	if (yych <= '9') goto yy223;
	if (yych == '}') goto yy225;
	goto yy197;
yy217:
	++YYCURSOR;
#line 285 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.extop.min))
					{
						fatal ("repetition count overflow");
					}
					yylval.extop.max = yylval.extop.min;
					return TOKEN_CLOSESIZE;
				}
#line 1373 "src/parse/lex.cc"
yy219:
	++YYCURSOR;
#line 320 "../src/parse/lex.re"
	{
					if (!opts->FFlag) {
						fatal("curly braces for names only allowed with -F switch");
					}
					yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
					return TOKEN_ID;
				}
#line 1384 "src/parse/lex.cc"
yy221:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy227;
	goto yy169;
yy222:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	if (yych == ':') goto yy228;
	goto yy184;
yy223:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy169;
	if (yych <= '9') goto yy223;
	if (yych == '}') goto yy230;
	goto yy169;
yy225:
	++YYCURSOR;
#line 307 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					yylval.extop.max = std::numeric_limits<uint32_t>::max();
					return TOKEN_CLOSESIZE;
				}
#line 1413 "src/parse/lex.cc"
yy227:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy232;
	goto yy169;
yy228:
	++YYCURSOR;
#line 328 "../src/parse/lex.re"
	{ lex_conf (); return TOKEN_CONF; }
#line 1422 "src/parse/lex.cc"
yy230:
	++YYCURSOR;
#line 294 "../src/parse/lex.re"
	{
					const char * p = strchr (tok, ',');
					if (!s_to_u32_unsafe (tok + 1, p, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.extop.max))
					{
						fatal ("repetition upper bound overflow");
					}
					return TOKEN_CLOSESIZE;
				}
#line 1438 "src/parse/lex.cc"
yy232:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy234;
	if (yych <= '9') goto yy169;
	goto yy234;
yy233:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	YYCTXMARKER = YYCURSOR;
yy234:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy233;
		goto yy169;
	} else {
		if (yych <= ' ') goto yy233;
		if (yych <= '0') goto yy169;
		if (yych >= ':') goto yy169;
	}
yy235:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy169;
		} else {
			if (yych <= '\n') goto yy239;
			if (yych <= '\f') goto yy169;
			goto yy241;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy169;
		} else {
			if (yych <= '/') goto yy169;
			if (yych <= '9') goto yy235;
			goto yy169;
		}
	}
yy237:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy237;
		goto yy169;
	} else {
		if (yych <= ' ') goto yy237;
		if (yych == '"') goto yy242;
		goto yy169;
	}
yy239:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 373 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto scan;
				}
#line 1499 "src/parse/lex.cc"
yy241:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy239;
	goto yy169;
yy242:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy242;
	}
	if (yych <= '\n') goto yy169;
	if (yych >= '#') goto yy245;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy239;
	if (yych == '\r') goto yy241;
	goto yy169;
yy245:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy169;
	goto yy242;
}
#line 389 "../src/parse/lex.re"


flex_name:

#line 1529 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy250;
	if (yych == '\r') goto yy252;
	++YYCURSOR;
yy249:
#line 400 "../src/parse/lex.re"
	{
		YYCURSOR = tok;
		goto start;
	}
#line 1543 "src/parse/lex.cc"
yy250:
	++YYCURSOR;
#line 394 "../src/parse/lex.re"
	{
		YYCURSOR = tok;
		lexer_state = LEX_NORMAL;
		return TOKEN_FID_END;
	}
#line 1552 "src/parse/lex.cc"
yy252:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '\n') goto yy250;
	goto yy249;
}
#line 404 "../src/parse/lex.re"


code:

#line 1563 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96, 112,   0,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		112,  96,  64,  96,  96,  96,  96,  32, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,   0,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy255;
			if (yych <= '\t') goto yy257;
			goto yy259;
		} else {
			if (yych == '"') goto yy261;
			goto yy257;
		}
	} else {
		if (yych <= '{') {
			if (yych <= '\'') goto yy262;
			if (yych <= 'z') goto yy257;
			goto yy263;
		} else {
			if (yych == '}') goto yy265;
			goto yy257;
		}
	}
yy255:
	++YYCURSOR;
#line 467 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						if (depth)
						{
							fatal("missing '}'");
						}
						return 0;
					}
					goto code;
				}
#line 1636 "src/parse/lex.cc"
yy257:
	++YYCURSOR;
yy258:
#line 481 "../src/parse/lex.re"
	{
					goto code;
				}
#line 1644 "src/parse/lex.cc"
yy259:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy267;
		} else {
			if (yych <= '\n') goto yy269;
			if (yych >= '\r') goto yy269;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy267;
		} else {
			if (yych == '#') goto yy270;
		}
	}
yy260:
#line 448 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						tok += strspn(tok, " \t\r\n");
						while (cur > tok && strchr(" \t\r\n", cur[-1]))
						{
							--cur;
						}
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return TOKEN_CODE;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1683 "src/parse/lex.cc"
yy261:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy258;
	goto yy274;
yy262:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy258;
	goto yy279;
yy263:
	++YYCURSOR;
#line 420 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else
					{
						++depth;
					}
					goto code;
				}
#line 1708 "src/parse/lex.cc"
yy265:
	++YYCURSOR;
#line 408 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else if (--depth == 0)
					{
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return TOKEN_CODE;
					}
					goto code;
				}
#line 1724 "src/parse/lex.cc"
yy267:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy281;
	} else {
		if (yych <= ' ') goto yy281;
		if (yych == '#') goto yy270;
	}
yy268:
	YYCURSOR -= 1;
#line 435 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						goto code;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1750 "src/parse/lex.cc"
yy269:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy268;
yy270:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy270;
	}
	if (yych == 'l') goto yy283;
yy272:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy260;
		} else {
			goto yy258;
		}
	} else {
		goto yy268;
	}
yy273:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy274:
	if (yybm[0+yych] & 32) {
		goto yy273;
	}
	if (yych <= '\n') goto yy272;
	if (yych >= '#') goto yy277;
yy275:
	++YYCURSOR;
#line 478 "../src/parse/lex.re"
	{
					goto code;
				}
#line 1789 "src/parse/lex.cc"
yy277:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy272;
	goto yy273;
yy278:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy279:
	if (yybm[0+yych] & 64) {
		goto yy278;
	}
	if (yych <= '\n') goto yy272;
	if (yych <= '\'') goto yy275;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy272;
	goto yy278;
yy281:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy281;
		goto yy272;
	} else {
		if (yych <= ' ') goto yy281;
		if (yych == '#') goto yy270;
		goto yy272;
	}
yy283:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy272;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy272;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy272;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy288;
	if (yych <= '9') goto yy272;
	goto yy288;
yy287:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	YYCTXMARKER = YYCURSOR;
yy288:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy287;
		goto yy272;
	} else {
		if (yych <= ' ') goto yy287;
		if (yych <= '0') goto yy272;
		if (yych >= ':') goto yy272;
	}
yy289:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy289;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy272;
		if (yych <= '\t') goto yy291;
		if (yych <= '\n') goto yy293;
		goto yy272;
	} else {
		if (yych <= '\r') goto yy295;
		if (yych != ' ') goto yy272;
	}
yy291:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy291;
		goto yy272;
	} else {
		if (yych <= ' ') goto yy291;
		if (yych == '"') goto yy296;
		goto yy272;
	}
yy293:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 431 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto code;
				}
#line 1884 "src/parse/lex.cc"
yy295:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy293;
	goto yy272;
yy296:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy272;
		goto yy296;
	} else {
		if (yych <= '"') goto yy298;
		if (yych == '\\') goto yy299;
		goto yy296;
	}
yy298:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy293;
	if (yych == '\r') goto yy295;
	goto yy272;
yy299:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy272;
	goto yy296;
}
#line 484 "../src/parse/lex.re"


comment:

#line 1918 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ')') {
		if (yych == '\n') goto yy304;
	} else {
		if (yych <= '*') goto yy306;
		if (yych == '/') goto yy307;
	}
	++YYCURSOR;
yy303:
#line 516 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					goto comment;
				}
#line 1973 "src/parse/lex.cc"
yy304:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy308;
	}
	if (yych == '#') goto yy311;
yy305:
#line 507 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					tok = pos = cur;
					cline++;
					goto comment;
				}
#line 1991 "src/parse/lex.cc"
yy306:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy313;
	goto yy303;
yy307:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy315;
	goto yy303;
yy308:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy308;
	}
	if (yych == '#') goto yy311;
yy310:
	YYCURSOR = YYMARKER;
	goto yy305;
yy311:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy311;
		goto yy310;
	} else {
		if (yych <= ' ') goto yy311;
		if (yych == 'l') goto yy317;
		goto yy310;
	}
yy313:
	++YYCURSOR;
#line 488 "../src/parse/lex.re"
	{
					if (--depth == 0)
					{
						goto scan;
					}
					else
					{
						goto comment;
					}
				}
#line 2036 "src/parse/lex.cc"
yy315:
	++YYCURSOR;
#line 498 "../src/parse/lex.re"
	{
					++depth;
					fatal("ambiguous /* found");
					goto comment;
				}
#line 2045 "src/parse/lex.cc"
yy317:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy310;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy310;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy310;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy322;
	if (yych <= '9') goto yy310;
	goto yy322;
yy321:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	YYCTXMARKER = YYCURSOR;
yy322:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy321;
		goto yy310;
	} else {
		if (yych <= ' ') goto yy321;
		if (yych <= '0') goto yy310;
		if (yych >= ':') goto yy310;
	}
yy323:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy323;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy310;
		if (yych <= '\t') goto yy325;
		if (yych <= '\n') goto yy327;
		goto yy310;
	} else {
		if (yych <= '\r') goto yy329;
		if (yych != ' ') goto yy310;
	}
yy325:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy325;
		goto yy310;
	} else {
		if (yych <= ' ') goto yy325;
		if (yych == '"') goto yy330;
		goto yy310;
	}
yy327:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 503 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto comment;
				}
#line 2107 "src/parse/lex.cc"
yy329:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy327;
	goto yy310;
yy330:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy330;
	}
	if (yych <= '\n') goto yy310;
	if (yych >= '#') goto yy333;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy327;
	if (yych == '\r') goto yy329;
	goto yy310;
yy333:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy310;
	goto yy330;
}
#line 523 "../src/parse/lex.re"


nextLine:

#line 2137 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy338;
	++YYCURSOR;
#line 534 "../src/parse/lex.re"
	{  if(cur == eof) {
                  return 0;
               }
               goto nextLine;
            }
#line 2150 "src/parse/lex.cc"
yy338:
	++YYCURSOR;
#line 527 "../src/parse/lex.re"
	{ if(cur == eof) {
                  return 0;
               }
               tok = pos = cur;
               cline++;
               goto scan;
            }
#line 2161 "src/parse/lex.cc"
}
#line 539 "../src/parse/lex.re"

}

static void escape (std::string & dest, const std::string & src)
{
	dest = src;
	size_t l = dest.length();
	for (size_t p = 0; p < l; ++p)
	{
		if (dest[p] == '\\')
		{
			dest.insert(++p, "\\");
			++l;
		}
	}
}

const RegExp *Scanner::lex_cls(bool neg)
{
	Range *r = NULL, *s;
	uint32_t u, l;
fst:
	
#line 2187 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy343;
#line 563 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 2195 "src/parse/lex.cc"
yy343:
	++YYCURSOR;
#line 562 "../src/parse/lex.re"
	{ goto end; }
#line 2200 "src/parse/lex.cc"
}
#line 564 "../src/parse/lex.re"

snd:
	
#line 2206 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy348;
yy347:
#line 567 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 2215 "src/parse/lex.cc"
yy348:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy350;
	YYCURSOR = YYMARKER;
	goto yy347;
yy350:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 568 "../src/parse/lex.re"
	{
			u = lex_cls_chr();
			if (l > u) {
				warn.swapped_range(get_line(), l, u);
				std::swap(l, u);
			}
			goto add;
		}
#line 2233 "src/parse/lex.cc"
}
#line 576 "../src/parse/lex.re"

add:
	if (!(s = opts->encoding.encodeRange(l, u))) {
		fatalf ("Bad code point range: '0x%X - 0x%X'", l, u);
	}
	r = Range::add(r, s);
	goto fst;
end:
	if (neg) {
		r = Range::sub(opts->encoding.fullRange(), r);
	}
	return cls(r);
}

uint32_t Scanner::lex_cls_chr()
{
	tok = cur;
	
#line 2254 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy356;
	if (yych == '\\') goto yy358;
	++YYCURSOR;
#line 599 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(tok[0]); }
#line 2265 "src/parse/lex.cc"
yy356:
	++YYCURSOR;
#line 594 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error"); }
#line 2270 "src/parse/lex.cc"
yy358:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '`') {
		if (yych <= '7') {
			if (yych <= ',') {
				if (yych != '\n') goto yy360;
			} else {
				if (yych <= '-') goto yy362;
				if (yych <= '/') goto yy360;
				if (yych <= '3') goto yy364;
				goto yy366;
			}
		} else {
			if (yych <= 'X') {
				if (yych == 'U') goto yy367;
				if (yych <= 'W') goto yy360;
				goto yy369;
			} else {
				if (yych <= '[') goto yy360;
				if (yych <= '\\') goto yy370;
				if (yych <= ']') goto yy372;
				goto yy360;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy374;
				if (yych <= 'b') goto yy376;
				goto yy360;
			} else {
				if (yych <= 'f') goto yy378;
				if (yych == 'n') goto yy380;
				goto yy360;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy382;
				if (yych <= 's') goto yy360;
				if (yych <= 't') goto yy384;
				goto yy369;
			} else {
				if (yych <= 'v') goto yy386;
				if (yych == 'x') goto yy388;
				goto yy360;
			}
		}
	}
#line 597 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in escape sequence"); }
#line 2321 "src/parse/lex.cc"
yy360:
	++YYCURSOR;
#line 612 "../src/parse/lex.re"
	{
			warn.useless_escape(tline, tok - pos, tok[1]);
			return static_cast<uint8_t>(tok[1]);
		}
#line 2329 "src/parse/lex.cc"
yy362:
	++YYCURSOR;
#line 610 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 2334 "src/parse/lex.cc"
yy364:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy365;
	if (yych <= '7') goto yy389;
yy365:
#line 596 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in octal escape sequence"); }
#line 2343 "src/parse/lex.cc"
yy366:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy365;
yy367:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy368;
		if (yych <= '9') goto yy391;
	} else {
		if (yych <= 'F') goto yy391;
		if (yych <= '`') goto yy368;
		if (yych <= 'f') goto yy391;
	}
yy368:
#line 595 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2361 "src/parse/lex.cc"
yy369:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy368;
		if (yych <= '9') goto yy392;
		goto yy368;
	} else {
		if (yych <= 'F') goto yy392;
		if (yych <= '`') goto yy368;
		if (yych <= 'f') goto yy392;
		goto yy368;
	}
yy370:
	++YYCURSOR;
#line 609 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2379 "src/parse/lex.cc"
yy372:
	++YYCURSOR;
#line 611 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 2384 "src/parse/lex.cc"
yy374:
	++YYCURSOR;
#line 602 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2389 "src/parse/lex.cc"
yy376:
	++YYCURSOR;
#line 603 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2394 "src/parse/lex.cc"
yy378:
	++YYCURSOR;
#line 604 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2399 "src/parse/lex.cc"
yy380:
	++YYCURSOR;
#line 605 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2404 "src/parse/lex.cc"
yy382:
	++YYCURSOR;
#line 606 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2409 "src/parse/lex.cc"
yy384:
	++YYCURSOR;
#line 607 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2414 "src/parse/lex.cc"
yy386:
	++YYCURSOR;
#line 608 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2419 "src/parse/lex.cc"
yy388:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy368;
		if (yych <= '9') goto yy393;
		goto yy368;
	} else {
		if (yych <= 'F') goto yy393;
		if (yych <= '`') goto yy368;
		if (yych <= 'f') goto yy393;
		goto yy368;
	}
yy389:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy390;
	if (yych <= '7') goto yy394;
yy390:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy365;
	} else {
		goto yy368;
	}
yy391:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy390;
		if (yych <= '9') goto yy396;
		goto yy390;
	} else {
		if (yych <= 'F') goto yy396;
		if (yych <= '`') goto yy390;
		if (yych <= 'f') goto yy396;
		goto yy390;
	}
yy392:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy390;
		if (yych <= '9') goto yy397;
		goto yy390;
	} else {
		if (yych <= 'F') goto yy397;
		if (yych <= '`') goto yy390;
		if (yych <= 'f') goto yy397;
		goto yy390;
	}
yy393:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy390;
		if (yych <= '9') goto yy398;
		goto yy390;
	} else {
		if (yych <= 'F') goto yy398;
		if (yych <= '`') goto yy390;
		if (yych <= 'f') goto yy398;
		goto yy390;
	}
yy394:
	++YYCURSOR;
#line 601 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2484 "src/parse/lex.cc"
yy396:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy390;
		if (yych <= '9') goto yy400;
		goto yy390;
	} else {
		if (yych <= 'F') goto yy400;
		if (yych <= '`') goto yy390;
		if (yych <= 'f') goto yy400;
		goto yy390;
	}
yy397:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy390;
		if (yych <= '9') goto yy393;
		goto yy390;
	} else {
		if (yych <= 'F') goto yy393;
		if (yych <= '`') goto yy390;
		if (yych <= 'f') goto yy393;
		goto yy390;
	}
yy398:
	++YYCURSOR;
#line 600 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2513 "src/parse/lex.cc"
yy400:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy390;
		if (yych >= ':') goto yy390;
	} else {
		if (yych <= 'F') goto yy401;
		if (yych <= '`') goto yy390;
		if (yych >= 'g') goto yy390;
	}
yy401:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '@') {
		if (yych <= '/') goto yy390;
		if (yych <= '9') goto yy392;
		goto yy390;
	} else {
		if (yych <= 'F') goto yy392;
		if (yych <= '`') goto yy390;
		if (yych <= 'f') goto yy392;
		goto yy390;
	}
}
#line 616 "../src/parse/lex.re"

}

uint32_t Scanner::lex_str_chr(char quote, bool &end)
{
	end = false;
	tok = cur;
	
#line 2546 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy406;
	if (yych == '\\') goto yy408;
	++YYCURSOR;
#line 629 "../src/parse/lex.re"
	{
			end = tok[0] == quote;
			return static_cast<uint8_t>(tok[0]);
		}
#line 2560 "src/parse/lex.cc"
yy406:
	++YYCURSOR;
#line 624 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error"); }
#line 2565 "src/parse/lex.cc"
yy408:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= 'a') {
		if (yych <= 'T') {
			if (yych <= '/') {
				if (yych != '\n') goto yy410;
			} else {
				if (yych <= '3') goto yy412;
				if (yych <= '7') goto yy414;
				goto yy410;
			}
		} else {
			if (yych <= 'X') {
				if (yych <= 'U') goto yy415;
				if (yych <= 'W') goto yy410;
				goto yy417;
			} else {
				if (yych == '\\') goto yy418;
				if (yych <= '`') goto yy410;
				goto yy420;
			}
		}
	} else {
		if (yych <= 'r') {
			if (yych <= 'f') {
				if (yych <= 'b') goto yy422;
				if (yych <= 'e') goto yy410;
				goto yy424;
			} else {
				if (yych == 'n') goto yy426;
				if (yych <= 'q') goto yy410;
				goto yy428;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 's') goto yy410;
				if (yych <= 't') goto yy430;
				goto yy417;
			} else {
				if (yych <= 'v') goto yy432;
				if (yych == 'x') goto yy434;
				goto yy410;
			}
		}
	}
#line 627 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in escape sequence"); }
#line 2613 "src/parse/lex.cc"
yy410:
	++YYCURSOR;
#line 643 "../src/parse/lex.re"
	{
			if (tok[1] != quote) {
				warn.useless_escape(tline, tok - pos, tok[1]);
			}
			return static_cast<uint8_t>(tok[1]);
		}
#line 2623 "src/parse/lex.cc"
yy412:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy413;
	if (yych <= '7') goto yy435;
yy413:
#line 626 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in octal escape sequence"); }
#line 2632 "src/parse/lex.cc"
yy414:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy413;
yy415:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy416;
		if (yych <= '9') goto yy437;
	} else {
		if (yych <= 'F') goto yy437;
		if (yych <= '`') goto yy416;
		if (yych <= 'f') goto yy437;
	}
yy416:
#line 625 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2650 "src/parse/lex.cc"
yy417:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy416;
		if (yych <= '9') goto yy438;
		goto yy416;
	} else {
		if (yych <= 'F') goto yy438;
		if (yych <= '`') goto yy416;
		if (yych <= 'f') goto yy438;
		goto yy416;
	}
yy418:
	++YYCURSOR;
#line 642 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2668 "src/parse/lex.cc"
yy420:
	++YYCURSOR;
#line 635 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2673 "src/parse/lex.cc"
yy422:
	++YYCURSOR;
#line 636 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2678 "src/parse/lex.cc"
yy424:
	++YYCURSOR;
#line 637 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2683 "src/parse/lex.cc"
yy426:
	++YYCURSOR;
#line 638 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2688 "src/parse/lex.cc"
yy428:
	++YYCURSOR;
#line 639 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2693 "src/parse/lex.cc"
yy430:
	++YYCURSOR;
#line 640 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2698 "src/parse/lex.cc"
yy432:
	++YYCURSOR;
#line 641 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2703 "src/parse/lex.cc"
yy434:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy416;
		if (yych <= '9') goto yy439;
		goto yy416;
	} else {
		if (yych <= 'F') goto yy439;
		if (yych <= '`') goto yy416;
		if (yych <= 'f') goto yy439;
		goto yy416;
	}
yy435:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy436;
	if (yych <= '7') goto yy440;
yy436:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy413;
	} else {
		goto yy416;
	}
yy437:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy436;
		if (yych <= '9') goto yy442;
		goto yy436;
	} else {
		if (yych <= 'F') goto yy442;
		if (yych <= '`') goto yy436;
		if (yych <= 'f') goto yy442;
		goto yy436;
	}
yy438:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy436;
		if (yych <= '9') goto yy443;
		goto yy436;
	} else {
		if (yych <= 'F') goto yy443;
		if (yych <= '`') goto yy436;
		if (yych <= 'f') goto yy443;
		goto yy436;
	}
yy439:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy436;
		if (yych <= '9') goto yy444;
		goto yy436;
	} else {
		if (yych <= 'F') goto yy444;
		if (yych <= '`') goto yy436;
		if (yych <= 'f') goto yy444;
		goto yy436;
	}
yy440:
	++YYCURSOR;
#line 634 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2768 "src/parse/lex.cc"
yy442:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy436;
		if (yych <= '9') goto yy446;
		goto yy436;
	} else {
		if (yych <= 'F') goto yy446;
		if (yych <= '`') goto yy436;
		if (yych <= 'f') goto yy446;
		goto yy436;
	}
yy443:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy436;
		if (yych <= '9') goto yy439;
		goto yy436;
	} else {
		if (yych <= 'F') goto yy439;
		if (yych <= '`') goto yy436;
		if (yych <= 'f') goto yy439;
		goto yy436;
	}
yy444:
	++YYCURSOR;
#line 633 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2797 "src/parse/lex.cc"
yy446:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy436;
		if (yych >= ':') goto yy436;
	} else {
		if (yych <= 'F') goto yy447;
		if (yych <= '`') goto yy436;
		if (yych >= 'g') goto yy436;
	}
yy447:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '@') {
		if (yych <= '/') goto yy436;
		if (yych <= '9') goto yy438;
		goto yy436;
	} else {
		if (yych <= 'F') goto yy438;
		if (yych <= '`') goto yy436;
		if (yych <= 'f') goto yy438;
		goto yy436;
	}
}
#line 649 "../src/parse/lex.re"

}

const RegExp *Scanner::lex_str(char quote, bool casing)
{
	const RegExp *r = NULL;
	for (bool end;;) {
		const uint32_t c = lex_str_chr(quote, end);
		if (end) {
			return r ? r : RegExp::nil();
		}
		r = doCat(r, casing ? ichr(c) : schr(c));
	}
}

void Scanner::set_sourceline ()
{
sourceline:
	tok = cur;

#line 2842 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy452;
	} else {
		if (yych <= '"') goto yy454;
		if (yych <= '0') goto yy450;
		if (yych <= '9') goto yy455;
	}
yy450:
	++YYCURSOR;
yy451:
#line 692 "../src/parse/lex.re"
	{
  					goto sourceline;
  				}
#line 2895 "src/parse/lex.cc"
yy452:
	++YYCURSOR;
#line 680 "../src/parse/lex.re"
	{
  					if (cur == eof)
  					{
						--cur; 
					}
			  		else
			  		{
			  			pos = cur; 
			  		}
			  		tok = cur;
			  		return; 
				}
#line 2911 "src/parse/lex.cc"
yy454:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy451;
	goto yy459;
yy455:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy455;
	}
#line 669 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok, cur, cline))
					{
						fatal ("line number overflow");
					}
					goto sourceline; 
				}
#line 2931 "src/parse/lex.cc"
yy458:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy459:
	if (yybm[0+yych] & 128) {
		goto yy458;
	}
	if (yych <= '\n') goto yy460;
	if (yych <= '"') goto yy461;
	goto yy463;
yy460:
	YYCURSOR = YYMARKER;
	goto yy451;
yy461:
	++YYCURSOR;
#line 676 "../src/parse/lex.re"
	{
					escape (in.file_name, std::string (tok + 1, tok_len () - 2)); // -2 to omit quotes
			  		goto sourceline; 
				}
#line 2953 "src/parse/lex.cc"
yy463:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy460;
	goto yy458;
}
#line 695 "../src/parse/lex.re"

}

} // end namespace re2c
