/* Generated by re2c 0.16 on Mon Mar  6 17:22:49 2017 */
#line 1 "../src/ast/lex.re"
#include "src/util/c99_stdint.h"
#include <stddef.h>
#include <string.h>
#include <algorithm>
#include <limits>
#include <string>

#include "src/code/output.h"
#include "src/re/encoding/enc.h"
#include "src/ast/input.h"
#include "src/ast/ast.h"
#include "src/ast/scanner.h"
#include "src/ast/parser.h" // needed by "y.tab.h"
#include "src/ast/unescape.h"
#include "src/util/range.h"
#include "src/util/s_to_n32_unsafe.h"
#include "y.tab.h"

extern YYSTYPE yylval;

#define	YYCTYPE		unsigned char
#define	YYCURSOR	cur
#define	YYLIMIT		lim
#define	YYMARKER	mar
#define	YYCTXMARKER ctx
#define	YYFILL(n)	{ fill (n); }

namespace re2c
{

// source code is in ASCII: pointers have type 'char *'
// but re2c makes an implicit assumption that YYCTYPE is unsigned
// when it generates comparisons
#line 36 "../src/ast/lex.re"


#line 57 "../src/ast/lex.re"


Scanner::ParseMode Scanner::echo()
{
	if (eof && cur == eof) // Catch EOF
	{
		return Stop;
	}

	tok = cur;
echo:
	ptr = cur;


#line 55 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 16) YYFILL(16);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 121 "../src/ast/lex.re"
	{
		if (cur != eof) goto echo;
		out.wraw(tok, ptr);
		return Stop;
	}
#line 119 "src/ast/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 138 "../src/ast/lex.re"
	{ goto echo; }
#line 125 "src/ast/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 132 "../src/ast/lex.re"
	{
		cline++;
		pos = cur;
		goto echo;
	}
#line 140 "src/ast/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy7;
	} else {
		goto yy5;
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 71 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		return Parse;
	}
#line 188 "src/ast/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'i':	goto yy23;
	case 'm':	goto yy24;
	case 'r':	goto yy25;
	case 't':	goto yy26;
	case 'u':	goto yy27;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy28;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy29;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy30;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy31;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy32;
	if (yych == 'u') goto yy33;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy34;
	if (yych == 'y') goto yy35;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy36;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy37;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy38;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy39;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy40;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy41;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy42;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy43;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy44;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy45;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy47;
	if (yych <= '9') goto yy13;
	goto yy47;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy48;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy49;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy50;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy51;
	goto yy13;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy52;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy53;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy54;
	goto yy13;
yy46:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy47:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy46;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy46;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			YYCTXMARKER = YYCURSOR;
			goto yy55;
		}
		goto yy13;
	}
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy57;
	goto yy13;
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy58;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy59;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy60;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy61;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy62;
	goto yy13;
yy54:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy63;
	goto yy13;
yy55:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy55;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy64;
		if (yych <= '\n') goto yy66;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy68;
		if (yych == ' ') goto yy64;
		goto yy13;
	}
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy69;
	goto yy13;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy70;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy71;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy72;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy73;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy74;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy75;
	goto yy13;
yy64:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy64;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy64;
		if (yych == '"') goto yy76;
		goto yy13;
	}
yy66:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 127 "../src/ast/lex.re"
	{
		set_sourceline();
		goto echo;
	}
#line 421 "src/ast/lex.cc"
yy68:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy66;
	goto yy13;
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy78;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy79;
	goto yy13;
yy71:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy80;
	goto yy13;
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy81;
	goto yy13;
yy73:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy82;
	goto yy13;
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy83;
	goto yy13;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy84;
	goto yy13;
yy76:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy76;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy85;
	goto yy86;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy87;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy88;
	goto yy13;
yy80:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy89;
	goto yy13;
yy81:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy91;
	goto yy13;
yy82:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy92;
	goto yy13;
yy83:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy93;
	goto yy13;
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy94;
	goto yy13;
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy66;
	if (yych == '\r') goto yy68;
	goto yy13;
yy86:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy13;
	goto yy76;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy96;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy97;
	goto yy13;
yy89:
	++YYCURSOR;
#line 92 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		out.wdelay_yymaxfill();
		lex_end_of_comment();
		goto echo;
	}
#line 520 "src/ast/lex.cc"
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy98;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy99;
	goto yy13;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy101;
	goto yy13;
yy94:
	++YYCURSOR;
#line 81 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		return Reuse;
	}
#line 540 "src/ast/lex.cc"
yy96:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy102;
	goto yy13;
yy97:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy103;
	goto yy13;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy104;
	goto yy13;
yy99:
	++YYCURSOR;
#line 115 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		lex_tags();
		goto echo;
	}
#line 561 "src/ast/lex.cc"
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy106;
	goto yy13;
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy108;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy109;
	goto yy13;
yy104:
	++YYCURSOR;
#line 76 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		return Rules;
	}
#line 581 "src/ast/lex.cc"
yy106:
	++YYCURSOR;
#line 106 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		out.wdelay_line_info();
		out.wdelay_types();
		out.wline_info(cline, get_fname().c_str());
		lex_end_of_comment();
		goto echo;
	}
#line 593 "src/ast/lex.cc"
yy108:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy111;
	goto yy13;
yy109:
	++YYCURSOR;
#line 86 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		lex_end_of_comment();
		goto echo;
	}
#line 606 "src/ast/lex.cc"
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
#line 99 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		out.wdelay_state_goto(0);
		lex_end_of_comment();
		goto echo;
	}
#line 618 "src/ast/lex.cc"
}
#line 139 "../src/ast/lex.re"

}

void Scanner::lex_end_of_comment()
{
	uint32_t ignored = 0;
	for (;;) {
#line 628 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy116;
		if (yych == '\n') goto yy120;
		goto yy118;
	} else {
		if (yych <= '\r') goto yy122;
		if (yych == '*') goto yy123;
		goto yy118;
	}
yy116:
	++YYCURSOR;
#line 146 "../src/ast/lex.re"
	{ fatal("expected end of block"); }
#line 646 "src/ast/lex.cc"
yy118:
	++YYCURSOR;
yy119:
#line 148 "../src/ast/lex.re"
	{ continue; }
#line 652 "src/ast/lex.cc"
yy120:
	++YYCURSOR;
#line 149 "../src/ast/lex.re"
	{ ++ignored; continue; }
#line 657 "src/ast/lex.cc"
yy122:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy120;
	goto yy119;
yy123:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy119;
	++YYCURSOR;
#line 150 "../src/ast/lex.re"
	{
			if (ignored > 0) {
				cline += ignored;
				out.wline_info(cline, get_fname().c_str());
			}
			tok = pos = cur;
			return;
		}
#line 675 "src/ast/lex.cc"
}
#line 158 "../src/ast/lex.re"
}
}

void Scanner::lex_tags()
{
	std::string fmt, sep;
	for (;;) {
#line 685 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy130;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy133;
		} else {
			if (yych == '\r') goto yy135;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy136;
			if (yych >= 'f') goto yy137;
		} else {
			if (yych == 's') goto yy138;
		}
	}
	++YYCURSOR;
yy129:
#line 165 "../src/ast/lex.re"
	{ fatal("unrecognized configuration"); }
#line 745 "src/ast/lex.cc"
yy130:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy130;
	}
#line 170 "../src/ast/lex.re"
	{ continue; }
#line 755 "src/ast/lex.cc"
yy133:
	++YYCURSOR;
#line 171 "../src/ast/lex.re"
	{ ++cline; continue; }
#line 760 "src/ast/lex.cc"
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy133;
	goto yy129;
yy136:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy139;
	goto yy129;
yy137:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy141;
	goto yy129;
yy138:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy143;
	goto yy129;
yy139:
	++YYCURSOR;
#line 172 "../src/ast/lex.re"
	{
			out.wdelay_tags(new ConfTags(fmt, sep));
			tok = pos = cur;
			return;
		}
#line 785 "src/ast/lex.cc"
yy141:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy144;
yy142:
	YYCURSOR = YYMARKER;
	goto yy129;
yy143:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy145;
	goto yy142;
yy144:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy146;
	goto yy142;
yy145:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy147;
	goto yy142;
yy146:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy148;
	goto yy142;
yy147:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy149;
	goto yy142;
yy148:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy150;
	goto yy142;
yy149:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy152;
	goto yy142;
yy150:
	++YYCURSOR;
#line 167 "../src/ast/lex.re"
	{ fmt = lex_conf_string(); continue; }
#line 824 "src/ast/lex.cc"
yy152:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy142;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy142;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy142;
	++YYCURSOR;
#line 168 "../src/ast/lex.re"
	{ sep = lex_conf_string(); continue; }
#line 835 "src/ast/lex.cc"
}
#line 177 "../src/ast/lex.re"
}
}

int Scanner::scan()
{
	uint32_t depth, code_line;
scan:
	tchar = cur - pos;
	tok = cur;
	switch (lexer_state)
	{
		case LEX_NORMAL:    goto start;
		case LEX_FLEX_NAME: goto flex_name;
	}

start:

#line 855 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy161;
	}
	if (yych <= '.') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy159;
				if (yych <= '\n') goto yy164;
				if (yych >= '\r') goto yy166;
			} else {
				if (yych <= 0x1F) goto yy159;
				if (yych <= '!') goto yy167;
				if (yych <= '"') goto yy169;
			}
		} else {
			if (yych <= ')') {
				if (yych <= '%') goto yy171;
				if (yych <= '&') goto yy159;
				if (yych <= '\'') goto yy172;
				goto yy167;
			} else {
				if (yych <= '*') goto yy174;
				if (yych <= ',') goto yy167;
				if (yych >= '.') goto yy175;
			}
		}
	} else {
		if (yych <= '\\') {
			if (yych <= '?') {
				if (yych <= '/') goto yy177;
				if (yych <= '9') goto yy178;
				if (yych <= ':') goto yy180;
				goto yy167;
			} else {
				if (yych <= '@') goto yy181;
				if (yych <= 'Z') goto yy178;
				if (yych <= '[') goto yy182;
				goto yy167;
			}
		} else {
			if (yych <= 'q') {
				if (yych == '_') goto yy178;
				if (yych >= 'a') goto yy178;
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy184;
					goto yy178;
				} else {
					if (yych <= '{') goto yy185;
					if (yych <= '|') goto yy167;
				}
			}
		}
	}
yy159:
	++YYCURSOR;
yy160:
#line 342 "../src/ast/lex.re"
	{
					fatalf("unexpected character: '%c'", *tok);
					goto scan;
				}
#line 957 "src/ast/lex.cc"
yy161:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy161;
	}
#line 326 "../src/ast/lex.re"
	{
					goto scan;
				}
#line 969 "src/ast/lex.cc"
yy164:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy187;
	} else {
		if (yych <= ' ') goto yy187;
		if (yych == '#') goto yy190;
	}
yy165:
#line 335 "../src/ast/lex.re"
	{
					if (cur == eof) return 0;
					pos = cur;
					cline++;
					goto scan;
				}
#line 987 "src/ast/lex.cc"
yy166:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy164;
	goto yy160;
yy167:
	++YYCURSOR;
yy168:
#line 239 "../src/ast/lex.re"
	{ return *tok; }
#line 997 "src/ast/lex.cc"
yy169:
	++YYCURSOR;
#line 226 "../src/ast/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1002 "src/ast/lex.cc"
yy171:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy192;
	goto yy160;
yy172:
	++YYCURSOR;
#line 225 "../src/ast/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1011 "src/ast/lex.cc"
yy174:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy192;
	goto yy168;
yy175:
	++YYCURSOR;
#line 321 "../src/ast/lex.re"
	{
					yylval.regexp = ast_dot(cline, get_column());
					return TOKEN_REGEXP;
				}
#line 1023 "src/ast/lex.cc"
yy177:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy194;
	if (yych == '/') goto yy196;
	goto yy168;
yy178:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy179:
	if (yybm[0+yych] & 32) {
		goto yy178;
	}
	if (yych <= ' ') {
		if (yych == '\t') {
			YYCTXMARKER = YYCURSOR;
			goto yy200;
		}
		if (yych <= 0x1F) goto yy198;
		YYCTXMARKER = YYCURSOR;
		goto yy200;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy198;
			YYCTXMARKER = YYCURSOR;
			goto yy202;
		} else {
			if (yych <= '<') goto yy198;
			if (yych <= '>') {
				YYCTXMARKER = YYCURSOR;
				goto yy202;
			}
			goto yy198;
		}
	}
yy180:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy204;
	goto yy160;
yy181:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy160;
		if (yych <= '9') goto yy206;
		if (yych <= '@') goto yy160;
		goto yy206;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy160;
			goto yy206;
		} else {
			if (yych <= '`') goto yy160;
			if (yych <= 'z') goto yy206;
			goto yy160;
		}
	}
yy182:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy209;
#line 227 "../src/ast/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1085 "src/ast/lex.cc"
yy184:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy211;
	goto yy179;
yy185:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy214;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy212;
		if (yych >= 'A') goto yy216;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy216;
		} else {
			if (yych <= '`') goto yy186;
			if (yych <= 'z') goto yy216;
		}
	}
yy186:
#line 194 "../src/ast/lex.re"
	{
					depth = 1;
					code_line = cline;
					goto code;
				}
#line 1114 "src/ast/lex.cc"
yy187:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy187;
	} else {
		if (yych <= ' ') goto yy187;
		if (yych == '#') goto yy190;
	}
yy189:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy165;
		} else {
			goto yy186;
		}
	} else {
		goto yy213;
	}
yy190:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy190;
		goto yy189;
	} else {
		if (yych <= ' ') goto yy190;
		if (yych == 'l') goto yy218;
		goto yy189;
	}
yy192:
	++YYCURSOR;
#line 220 "../src/ast/lex.re"
	{
					tok = cur;
					return 0;
				}
#line 1155 "src/ast/lex.cc"
yy194:
	++YYCURSOR;
#line 214 "../src/ast/lex.re"
	{
					depth = 1;
					goto comment;
				}
#line 1163 "src/ast/lex.cc"
yy196:
	++YYCURSOR;
#line 211 "../src/ast/lex.re"
	{
				goto nextLine;
			}
#line 1170 "src/ast/lex.cc"
yy198:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 304 "../src/ast/lex.re"
	{
					if (!opts->FFlag) {
						yylval.str = new std::string (tok, tok_len());
						return TOKEN_ID;
					} else {
						std::vector<ASTChar> *str = new std::vector<ASTChar>;
						for (char *s = tok; s < cur; ++s) {
							const uint32_t
								chr = static_cast<uint8_t>(*s),
								col = static_cast<uint32_t>(s - tok);
							str->push_back(ASTChar(chr, col));
						}
						yylval.regexp = ast_str(cline, get_column(), str, false);
						return TOKEN_REGEXP;
					}
				}
#line 1191 "src/ast/lex.cc"
yy200:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy200;
		if (yych <= 0x1F) goto yy219;
		goto yy200;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy219;
		} else {
			if (yych <= '<') goto yy219;
			if (yych >= '?') goto yy219;
		}
	}
yy202:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 299 "../src/ast/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					return TOKEN_ID;
				}
#line 1216 "src/ast/lex.cc"
yy204:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy221;
#line 204 "../src/ast/lex.re"
	{
					tok += 2; /* skip ":=" */
					depth = 0;
					code_line = cline;
					goto code;
				}
#line 1227 "src/ast/lex.cc"
yy206:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy208;
		if (yych <= '9') goto yy206;
		if (yych >= 'A') goto yy206;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy206;
		} else {
			if (yych <= '`') goto yy208;
			if (yych <= 'z') goto yy206;
		}
	}
yy208:
#line 230 "../src/ast/lex.re"
	{
		if (!opts->tags) {
			fatal("tags are only allowed with '-T, --tags' option");
		}
		const std::string *name = new std::string(tok + 1, tok_len() - 1);
		yylval.regexp = ast_tag(cline, get_column(), name);
		return TOKEN_REGEXP;
	}
#line 1254 "src/ast/lex.cc"
yy209:
	++YYCURSOR;
#line 228 "../src/ast/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1259 "src/ast/lex.cc"
yy211:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy223;
	goto yy179;
yy212:
	++YYCURSOR;
yy213:
#line 272 "../src/ast/lex.re"
	{
					fatal("illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
				}
#line 1271 "src/ast/lex.cc"
yy214:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy214;
	}
	if (yych <= '^') {
		if (yych <= ',') {
			if (yych <= '+') goto yy189;
			goto yy224;
		} else {
			if (yych <= '@') goto yy189;
			if (yych >= '[') goto yy189;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy189;
		} else {
			if (yych == '}') goto yy225;
			goto yy189;
		}
	}
yy216:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy189;
			goto yy216;
		} else {
			if (yych <= '@') goto yy189;
			if (yych <= 'Z') goto yy216;
			goto yy189;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy189;
			goto yy216;
		} else {
			if (yych == '}') goto yy227;
			goto yy189;
		}
	}
yy218:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy229;
	goto yy189;
yy219:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 286 "../src/ast/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					if (opts->FFlag)
					{
						lexer_state = LEX_FLEX_NAME;
						return TOKEN_FID;
					}
					else
					{
						return TOKEN_ID;
					}
				}
#line 1337 "src/ast/lex.cc"
yy221:
	++YYCURSOR;
	YYCURSOR -= 2;
#line 200 "../src/ast/lex.re"
	{
					return *tok;
				}
#line 1345 "src/ast/lex.cc"
yy223:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy230;
	goto yy179;
yy224:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy213;
	if (yych <= '9') goto yy231;
	if (yych == '}') goto yy233;
	goto yy213;
yy225:
	++YYCURSOR;
#line 241 "../src/ast/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min))
					{
						fatal ("repetition count overflow");
					}
					yylval.bounds.max = yylval.bounds.min;
					return TOKEN_CLOSESIZE;
				}
#line 1368 "src/ast/lex.cc"
yy227:
	++YYCURSOR;
#line 276 "../src/ast/lex.re"
	{
					if (!opts->FFlag) {
						fatal("curly braces for names only allowed with -F switch");
					}
					yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
					return TOKEN_ID;
				}
#line 1379 "src/ast/lex.cc"
yy229:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy235;
	goto yy189;
yy230:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy236;
	goto yy179;
yy231:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy189;
	if (yych <= '9') goto yy231;
	if (yych == '}') goto yy238;
	goto yy189;
yy233:
	++YYCURSOR;
#line 263 "../src/ast/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min))
					{
						fatal ("repetition lower bound overflow");
					}
					yylval.bounds.max = std::numeric_limits<uint32_t>::max();
					return TOKEN_CLOSESIZE;
				}
#line 1407 "src/ast/lex.cc"
yy235:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy240;
	goto yy189;
yy236:
	++YYCURSOR;
#line 284 "../src/ast/lex.re"
	{ lex_conf (); return TOKEN_CONF; }
#line 1416 "src/ast/lex.cc"
yy238:
	++YYCURSOR;
#line 250 "../src/ast/lex.re"
	{
					const char * p = strchr (tok, ',');
					if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min))
					{
						fatal ("repetition lower bound overflow");
					}
					if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max))
					{
						fatal ("repetition upper bound overflow");
					}
					return TOKEN_CLOSESIZE;
				}
#line 1432 "src/ast/lex.cc"
yy240:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy242;
	if (yych <= '9') goto yy189;
	goto yy242;
yy241:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy242:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy241;
		goto yy189;
	} else {
		if (yych <= ' ') goto yy241;
		if (yych <= '0') goto yy189;
		if (yych >= ':') goto yy189;
		YYCTXMARKER = YYCURSOR;
	}
yy243:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy189;
		} else {
			if (yych <= '\n') goto yy247;
			if (yych <= '\f') goto yy189;
			goto yy249;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy189;
		} else {
			if (yych <= '/') goto yy189;
			if (yych <= '9') goto yy243;
			goto yy189;
		}
	}
yy245:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy245;
		goto yy189;
	} else {
		if (yych <= ' ') goto yy245;
		if (yych == '"') goto yy250;
		goto yy189;
	}
yy247:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 330 "../src/ast/lex.re"
	{
					set_sourceline ();
					goto scan;
				}
#line 1493 "src/ast/lex.cc"
yy249:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy247;
	goto yy189;
yy250:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy250;
	}
	if (yych <= '\n') goto yy189;
	if (yych >= '#') goto yy253;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy247;
	if (yych == '\r') goto yy249;
	goto yy189;
yy253:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy189;
	goto yy250;
}
#line 346 "../src/ast/lex.re"


flex_name:

#line 1523 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy258;
	if (yych == '\r') goto yy260;
	++YYCURSOR;
yy257:
#line 357 "../src/ast/lex.re"
	{
		YYCURSOR = tok;
		goto start;
	}
#line 1537 "src/ast/lex.cc"
yy258:
	++YYCURSOR;
#line 351 "../src/ast/lex.re"
	{
		YYCURSOR = tok;
		lexer_state = LEX_NORMAL;
		return TOKEN_FID_END;
	}
#line 1546 "src/ast/lex.cc"
yy260:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy258;
	goto yy257;
}
#line 361 "../src/ast/lex.re"


code:

#line 1557 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96, 112,   0,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		112,  96,  64,  96,  96,  96,  96,  32, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,   0,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy263;
			if (yych <= '\t') goto yy265;
			goto yy267;
		} else {
			if (yych == '"') goto yy269;
			goto yy265;
		}
	} else {
		if (yych <= '{') {
			if (yych <= '\'') goto yy270;
			if (yych <= 'z') goto yy265;
			goto yy271;
		} else {
			if (yych == '}') goto yy273;
			goto yy265;
		}
	}
yy263:
	++YYCURSOR;
#line 424 "../src/ast/lex.re"
	{
					if (cur == eof)
					{
						if (depth)
						{
							fatal("missing '}'");
						}
						return 0;
					}
					goto code;
				}
#line 1630 "src/ast/lex.cc"
yy265:
	++YYCURSOR;
yy266:
#line 438 "../src/ast/lex.re"
	{
					goto code;
				}
#line 1638 "src/ast/lex.cc"
yy267:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy275;
		} else {
			if (yych <= '\n') goto yy277;
			if (yych >= '\r') goto yy277;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy275;
		} else {
			if (yych == '#') goto yy278;
		}
	}
yy268:
#line 405 "../src/ast/lex.re"
	{
					if (depth == 0)
					{
						tok += strspn(tok, " \t\r\n");
						while (cur > tok && strchr(" \t\r\n", cur[-1]))
						{
							--cur;
						}
						yylval.code = new Code(get_fname (), code_line, tok, tok_len ());
						return TOKEN_CODE;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1677 "src/ast/lex.cc"
yy269:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy266;
	goto yy282;
yy270:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy266;
	goto yy287;
yy271:
	++YYCURSOR;
#line 377 "../src/ast/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else
					{
						++depth;
					}
					goto code;
				}
#line 1702 "src/ast/lex.cc"
yy273:
	++YYCURSOR;
#line 365 "../src/ast/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else if (--depth == 0)
					{
						yylval.code = new Code(get_fname (), code_line, tok, tok_len ());
						return TOKEN_CODE;
					}
					goto code;
				}
#line 1718 "src/ast/lex.cc"
yy275:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy289;
	} else {
		if (yych <= ' ') goto yy289;
		if (yych == '#') goto yy278;
	}
yy276:
	YYCURSOR -= 1;
#line 392 "../src/ast/lex.re"
	{
					if (depth == 0)
					{
						goto code;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1744 "src/ast/lex.cc"
yy277:
	++YYCURSOR;
	goto yy276;
yy278:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy278;
	}
	if (yych == 'l') goto yy291;
yy280:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy268;
		} else {
			goto yy266;
		}
	} else {
		goto yy276;
	}
yy281:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy282:
	if (yybm[0+yych] & 32) {
		goto yy281;
	}
	if (yych <= '\n') goto yy280;
	if (yych >= '#') goto yy285;
yy283:
	++YYCURSOR;
#line 435 "../src/ast/lex.re"
	{
					goto code;
				}
#line 1783 "src/ast/lex.cc"
yy285:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy280;
	goto yy281;
yy286:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy287:
	if (yybm[0+yych] & 64) {
		goto yy286;
	}
	if (yych <= '\n') goto yy280;
	if (yych <= '\'') goto yy283;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy280;
	goto yy286;
yy289:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy289;
		goto yy280;
	} else {
		if (yych <= ' ') goto yy289;
		if (yych == '#') goto yy278;
		goto yy280;
	}
yy291:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy280;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy280;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy280;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy296;
	if (yych <= '9') goto yy280;
	goto yy296;
yy295:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy296:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy295;
		goto yy280;
	} else {
		if (yych <= ' ') goto yy295;
		if (yych <= '0') goto yy280;
		if (yych >= ':') goto yy280;
		YYCTXMARKER = YYCURSOR;
	}
yy297:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy297;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy280;
		if (yych <= '\t') goto yy299;
		if (yych <= '\n') goto yy301;
		goto yy280;
	} else {
		if (yych <= '\r') goto yy303;
		if (yych != ' ') goto yy280;
	}
yy299:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy299;
		goto yy280;
	} else {
		if (yych <= ' ') goto yy299;
		if (yych == '"') goto yy304;
		goto yy280;
	}
yy301:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 388 "../src/ast/lex.re"
	{
					set_sourceline ();
					goto code;
				}
#line 1878 "src/ast/lex.cc"
yy303:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy301;
	goto yy280;
yy304:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy280;
		goto yy304;
	} else {
		if (yych <= '"') goto yy306;
		if (yych == '\\') goto yy307;
		goto yy304;
	}
yy306:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy301;
	if (yych == '\r') goto yy303;
	goto yy280;
yy307:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy280;
	goto yy304;
}
#line 441 "../src/ast/lex.re"


comment:

#line 1912 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ')') {
		if (yych == '\n') goto yy312;
	} else {
		if (yych <= '*') goto yy314;
		if (yych == '/') goto yy315;
	}
	++YYCURSOR;
yy311:
#line 473 "../src/ast/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					goto comment;
				}
#line 1967 "src/ast/lex.cc"
yy312:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy316;
	}
	if (yych == '#') goto yy319;
yy313:
#line 464 "../src/ast/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					tok = pos = cur;
					cline++;
					goto comment;
				}
#line 1985 "src/ast/lex.cc"
yy314:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy321;
	goto yy311;
yy315:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy323;
	goto yy311;
yy316:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy316;
	}
	if (yych == '#') goto yy319;
yy318:
	YYCURSOR = YYMARKER;
	goto yy313;
yy319:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy319;
		goto yy318;
	} else {
		if (yych <= ' ') goto yy319;
		if (yych == 'l') goto yy325;
		goto yy318;
	}
yy321:
	++YYCURSOR;
#line 445 "../src/ast/lex.re"
	{
					if (--depth == 0)
					{
						goto scan;
					}
					else
					{
						goto comment;
					}
				}
#line 2030 "src/ast/lex.cc"
yy323:
	++YYCURSOR;
#line 455 "../src/ast/lex.re"
	{
					++depth;
					fatal("ambiguous /* found");
					goto comment;
				}
#line 2039 "src/ast/lex.cc"
yy325:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy318;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy318;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy318;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy330;
	if (yych <= '9') goto yy318;
	goto yy330;
yy329:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy330:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy329;
		goto yy318;
	} else {
		if (yych <= ' ') goto yy329;
		if (yych <= '0') goto yy318;
		if (yych >= ':') goto yy318;
		YYCTXMARKER = YYCURSOR;
	}
yy331:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy331;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy318;
		if (yych <= '\t') goto yy333;
		if (yych <= '\n') goto yy335;
		goto yy318;
	} else {
		if (yych <= '\r') goto yy337;
		if (yych != ' ') goto yy318;
	}
yy333:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy333;
		goto yy318;
	} else {
		if (yych <= ' ') goto yy333;
		if (yych == '"') goto yy338;
		goto yy318;
	}
yy335:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 460 "../src/ast/lex.re"
	{
					set_sourceline ();
					goto comment;
				}
#line 2101 "src/ast/lex.cc"
yy337:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy335;
	goto yy318;
yy338:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy338;
	}
	if (yych <= '\n') goto yy318;
	if (yych >= '#') goto yy341;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy335;
	if (yych == '\r') goto yy337;
	goto yy318;
yy341:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy318;
	goto yy338;
}
#line 480 "../src/ast/lex.re"


nextLine:

#line 2131 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy346;
	++YYCURSOR;
#line 491 "../src/ast/lex.re"
	{  if(cur == eof) {
                  return 0;
               }
               goto nextLine;
            }
#line 2144 "src/ast/lex.cc"
yy346:
	++YYCURSOR;
#line 484 "../src/ast/lex.re"
	{ if(cur == eof) {
                  return 0;
               }
               tok = pos = cur;
               cline++;
               goto scan;
            }
#line 2155 "src/ast/lex.cc"
}
#line 496 "../src/ast/lex.re"

}

static void escape (std::string & dest, const std::string & src)
{
	dest = src;
	size_t l = dest.length();
	for (size_t p = 0; p < l; ++p)
	{
		if (dest[p] == '\\')
		{
			dest.insert(++p, "\\");
			++l;
		}
	}
}

const AST *Scanner::lex_cls(bool neg)
{
	std::vector<ASTRange> *cls = new std::vector<ASTRange>;
	uint32_t u, l, c, c0 = get_column();
fst:
	tok = cur;
	c = get_column();
	
#line 2183 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy351;
#line 522 "../src/ast/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 2191 "src/ast/lex.cc"
yy351:
	++YYCURSOR;
#line 521 "../src/ast/lex.re"
	{ return ast_cls(cline, c0, cls, neg); }
#line 2196 "src/ast/lex.cc"
}
#line 523 "../src/ast/lex.re"

snd:
	
#line 2202 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy356;
yy355:
#line 526 "../src/ast/lex.re"
	{ u = l; goto add; }
#line 2211 "src/ast/lex.cc"
yy356:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy358;
	YYCURSOR = YYMARKER;
	goto yy355;
yy358:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 527 "../src/ast/lex.re"
	{
			u = lex_cls_chr();
			if (l > u) {
				warn.swapped_range(cline, l, u);
				std::swap(l, u);
			}
			goto add;
		}
#line 2229 "src/ast/lex.cc"
}
#line 535 "../src/ast/lex.re"

add:
	cls->push_back(ASTRange(l, u, c));
	goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
	tok = cur;
	
#line 2242 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy364;
	if (yych == '\\') goto yy366;
	++YYCURSOR;
#line 550 "../src/ast/lex.re"
	{ return static_cast<uint8_t>(tok[0]); }
#line 2253 "src/ast/lex.cc"
yy364:
	++YYCURSOR;
#line 545 "../src/ast/lex.re"
	{ fatal (get_column() - tchar, "syntax error"); }
#line 2258 "src/ast/lex.cc"
yy366:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '7') {
			if (yych <= ',') {
				if (yych != '\n') goto yy368;
			} else {
				if (yych <= '-') goto yy370;
				if (yych <= '/') goto yy368;
				if (yych <= '3') goto yy372;
				goto yy374;
			}
		} else {
			if (yych <= 'X') {
				if (yych == 'U') goto yy375;
				if (yych <= 'W') goto yy368;
				goto yy377;
			} else {
				if (yych <= '[') goto yy368;
				if (yych <= '\\') goto yy378;
				if (yych <= ']') goto yy380;
				goto yy368;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy382;
				if (yych <= 'b') goto yy384;
				goto yy368;
			} else {
				if (yych <= 'f') goto yy386;
				if (yych == 'n') goto yy388;
				goto yy368;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy390;
				if (yych <= 's') goto yy368;
				if (yych <= 't') goto yy392;
				goto yy377;
			} else {
				if (yych <= 'v') goto yy394;
				if (yych == 'x') goto yy396;
				goto yy368;
			}
		}
	}
#line 548 "../src/ast/lex.re"
	{ fatal (get_column() - tchar, "syntax error in escape sequence"); }
#line 2309 "src/ast/lex.cc"
yy368:
	++YYCURSOR;
#line 563 "../src/ast/lex.re"
	{
			warn.useless_escape(cline, get_column(), tok[1]);
			return static_cast<uint8_t>(tok[1]);
		}
#line 2317 "src/ast/lex.cc"
yy370:
	++YYCURSOR;
#line 561 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 2322 "src/ast/lex.cc"
yy372:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy373;
	if (yych <= '7') goto yy397;
yy373:
#line 547 "../src/ast/lex.re"
	{ fatal (get_column() - tchar, "syntax error in octal escape sequence"); }
#line 2331 "src/ast/lex.cc"
yy374:
	++YYCURSOR;
	goto yy373;
yy375:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy376;
		if (yych <= '9') goto yy399;
	} else {
		if (yych <= 'F') goto yy399;
		if (yych <= '`') goto yy376;
		if (yych <= 'f') goto yy399;
	}
yy376:
#line 546 "../src/ast/lex.re"
	{ fatal (get_column() - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2349 "src/ast/lex.cc"
yy377:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy376;
		if (yych <= '9') goto yy400;
		goto yy376;
	} else {
		if (yych <= 'F') goto yy400;
		if (yych <= '`') goto yy376;
		if (yych <= 'f') goto yy400;
		goto yy376;
	}
yy378:
	++YYCURSOR;
#line 560 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2367 "src/ast/lex.cc"
yy380:
	++YYCURSOR;
#line 562 "../src/ast/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 2372 "src/ast/lex.cc"
yy382:
	++YYCURSOR;
#line 553 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2377 "src/ast/lex.cc"
yy384:
	++YYCURSOR;
#line 554 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2382 "src/ast/lex.cc"
yy386:
	++YYCURSOR;
#line 555 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2387 "src/ast/lex.cc"
yy388:
	++YYCURSOR;
#line 556 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2392 "src/ast/lex.cc"
yy390:
	++YYCURSOR;
#line 557 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2397 "src/ast/lex.cc"
yy392:
	++YYCURSOR;
#line 558 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2402 "src/ast/lex.cc"
yy394:
	++YYCURSOR;
#line 559 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2407 "src/ast/lex.cc"
yy396:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy376;
		if (yych <= '9') goto yy401;
		goto yy376;
	} else {
		if (yych <= 'F') goto yy401;
		if (yych <= '`') goto yy376;
		if (yych <= 'f') goto yy401;
		goto yy376;
	}
yy397:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy398;
	if (yych <= '7') goto yy402;
yy398:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy373;
	} else {
		goto yy376;
	}
yy399:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy398;
		if (yych <= '9') goto yy404;
		goto yy398;
	} else {
		if (yych <= 'F') goto yy404;
		if (yych <= '`') goto yy398;
		if (yych <= 'f') goto yy404;
		goto yy398;
	}
yy400:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy398;
		if (yych <= '9') goto yy405;
		goto yy398;
	} else {
		if (yych <= 'F') goto yy405;
		if (yych <= '`') goto yy398;
		if (yych <= 'f') goto yy405;
		goto yy398;
	}
yy401:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy398;
		if (yych <= '9') goto yy406;
		goto yy398;
	} else {
		if (yych <= 'F') goto yy406;
		if (yych <= '`') goto yy398;
		if (yych <= 'f') goto yy406;
		goto yy398;
	}
yy402:
	++YYCURSOR;
#line 552 "../src/ast/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2472 "src/ast/lex.cc"
yy404:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy398;
		if (yych <= '9') goto yy408;
		goto yy398;
	} else {
		if (yych <= 'F') goto yy408;
		if (yych <= '`') goto yy398;
		if (yych <= 'f') goto yy408;
		goto yy398;
	}
yy405:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy398;
		if (yych <= '9') goto yy401;
		goto yy398;
	} else {
		if (yych <= 'F') goto yy401;
		if (yych <= '`') goto yy398;
		if (yych <= 'f') goto yy401;
		goto yy398;
	}
yy406:
	++YYCURSOR;
#line 551 "../src/ast/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2501 "src/ast/lex.cc"
yy408:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy398;
		if (yych >= ':') goto yy398;
	} else {
		if (yych <= 'F') goto yy409;
		if (yych <= '`') goto yy398;
		if (yych >= 'g') goto yy398;
	}
yy409:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy398;
		if (yych <= '9') goto yy400;
		goto yy398;
	} else {
		if (yych <= 'F') goto yy400;
		if (yych <= '`') goto yy398;
		if (yych <= 'f') goto yy400;
		goto yy398;
	}
}
#line 567 "../src/ast/lex.re"

}

uint32_t Scanner::lex_str_chr(char quote, bool &end)
{
	end = false;
	tok = cur;
	
#line 2534 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy414;
	if (yych == '\\') goto yy416;
	++YYCURSOR;
#line 580 "../src/ast/lex.re"
	{
			end = tok[0] == quote;
			return static_cast<uint8_t>(tok[0]);
		}
#line 2548 "src/ast/lex.cc"
yy414:
	++YYCURSOR;
#line 575 "../src/ast/lex.re"
	{ fatal (get_column() - tchar, "syntax error"); }
#line 2553 "src/ast/lex.cc"
yy416:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 'a') {
		if (yych <= 'T') {
			if (yych <= '/') {
				if (yych != '\n') goto yy418;
			} else {
				if (yych <= '3') goto yy420;
				if (yych <= '7') goto yy422;
				goto yy418;
			}
		} else {
			if (yych <= 'X') {
				if (yych <= 'U') goto yy423;
				if (yych <= 'W') goto yy418;
				goto yy425;
			} else {
				if (yych == '\\') goto yy426;
				if (yych <= '`') goto yy418;
				goto yy428;
			}
		}
	} else {
		if (yych <= 'r') {
			if (yych <= 'f') {
				if (yych <= 'b') goto yy430;
				if (yych <= 'e') goto yy418;
				goto yy432;
			} else {
				if (yych == 'n') goto yy434;
				if (yych <= 'q') goto yy418;
				goto yy436;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 's') goto yy418;
				if (yych <= 't') goto yy438;
				goto yy425;
			} else {
				if (yych <= 'v') goto yy440;
				if (yych == 'x') goto yy442;
				goto yy418;
			}
		}
	}
#line 578 "../src/ast/lex.re"
	{ fatal (get_column() - tchar, "syntax error in escape sequence"); }
#line 2601 "src/ast/lex.cc"
yy418:
	++YYCURSOR;
#line 594 "../src/ast/lex.re"
	{
			if (tok[1] != quote) {
				warn.useless_escape(cline, get_column(), tok[1]);
			}
			return static_cast<uint8_t>(tok[1]);
		}
#line 2611 "src/ast/lex.cc"
yy420:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy421;
	if (yych <= '7') goto yy443;
yy421:
#line 577 "../src/ast/lex.re"
	{ fatal (get_column() - tchar, "syntax error in octal escape sequence"); }
#line 2620 "src/ast/lex.cc"
yy422:
	++YYCURSOR;
	goto yy421;
yy423:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy424;
		if (yych <= '9') goto yy445;
	} else {
		if (yych <= 'F') goto yy445;
		if (yych <= '`') goto yy424;
		if (yych <= 'f') goto yy445;
	}
yy424:
#line 576 "../src/ast/lex.re"
	{ fatal (get_column() - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2638 "src/ast/lex.cc"
yy425:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy424;
		if (yych <= '9') goto yy446;
		goto yy424;
	} else {
		if (yych <= 'F') goto yy446;
		if (yych <= '`') goto yy424;
		if (yych <= 'f') goto yy446;
		goto yy424;
	}
yy426:
	++YYCURSOR;
#line 593 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2656 "src/ast/lex.cc"
yy428:
	++YYCURSOR;
#line 586 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2661 "src/ast/lex.cc"
yy430:
	++YYCURSOR;
#line 587 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2666 "src/ast/lex.cc"
yy432:
	++YYCURSOR;
#line 588 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2671 "src/ast/lex.cc"
yy434:
	++YYCURSOR;
#line 589 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2676 "src/ast/lex.cc"
yy436:
	++YYCURSOR;
#line 590 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2681 "src/ast/lex.cc"
yy438:
	++YYCURSOR;
#line 591 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2686 "src/ast/lex.cc"
yy440:
	++YYCURSOR;
#line 592 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2691 "src/ast/lex.cc"
yy442:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy424;
		if (yych <= '9') goto yy447;
		goto yy424;
	} else {
		if (yych <= 'F') goto yy447;
		if (yych <= '`') goto yy424;
		if (yych <= 'f') goto yy447;
		goto yy424;
	}
yy443:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy444;
	if (yych <= '7') goto yy448;
yy444:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy421;
	} else {
		goto yy424;
	}
yy445:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy444;
		if (yych <= '9') goto yy450;
		goto yy444;
	} else {
		if (yych <= 'F') goto yy450;
		if (yych <= '`') goto yy444;
		if (yych <= 'f') goto yy450;
		goto yy444;
	}
yy446:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy444;
		if (yych <= '9') goto yy451;
		goto yy444;
	} else {
		if (yych <= 'F') goto yy451;
		if (yych <= '`') goto yy444;
		if (yych <= 'f') goto yy451;
		goto yy444;
	}
yy447:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy444;
		if (yych <= '9') goto yy452;
		goto yy444;
	} else {
		if (yych <= 'F') goto yy452;
		if (yych <= '`') goto yy444;
		if (yych <= 'f') goto yy452;
		goto yy444;
	}
yy448:
	++YYCURSOR;
#line 585 "../src/ast/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2756 "src/ast/lex.cc"
yy450:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy444;
		if (yych <= '9') goto yy454;
		goto yy444;
	} else {
		if (yych <= 'F') goto yy454;
		if (yych <= '`') goto yy444;
		if (yych <= 'f') goto yy454;
		goto yy444;
	}
yy451:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy444;
		if (yych <= '9') goto yy447;
		goto yy444;
	} else {
		if (yych <= 'F') goto yy447;
		if (yych <= '`') goto yy444;
		if (yych <= 'f') goto yy447;
		goto yy444;
	}
yy452:
	++YYCURSOR;
#line 584 "../src/ast/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2785 "src/ast/lex.cc"
yy454:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy444;
		if (yych >= ':') goto yy444;
	} else {
		if (yych <= 'F') goto yy455;
		if (yych <= '`') goto yy444;
		if (yych >= 'g') goto yy444;
	}
yy455:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy444;
		if (yych <= '9') goto yy446;
		goto yy444;
	} else {
		if (yych <= 'F') goto yy446;
		if (yych <= '`') goto yy444;
		if (yych <= 'f') goto yy446;
		goto yy444;
	}
}
#line 600 "../src/ast/lex.re"

}

const AST *Scanner::lex_str(char quote)
{
	const uint32_t column = get_column();
	std::vector<ASTChar> *str = new std::vector<ASTChar>;
	for (bool end;;) {
		const uint32_t c = lex_str_chr(quote, end);
		if (end) return ast_str(cline, column, str, quote == '\'');
		str->push_back(ASTChar(c, get_column()));
	}
}

void Scanner::set_sourceline ()
{
sourceline:
	tok = cur;

#line 2829 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy460;
	} else {
		if (yych <= '"') goto yy462;
		if (yych <= '0') goto yy458;
		if (yych <= '9') goto yy463;
	}
yy458:
	++YYCURSOR;
yy459:
#line 642 "../src/ast/lex.re"
	{
  					goto sourceline;
  				}
#line 2882 "src/ast/lex.cc"
yy460:
	++YYCURSOR;
#line 630 "../src/ast/lex.re"
	{
  					if (cur == eof)
  					{
						--cur; 
					}
			  		else
			  		{
			  			pos = cur; 
			  		}
			  		tok = cur;
			  		return; 
				}
#line 2898 "src/ast/lex.cc"
yy462:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy459;
	goto yy467;
yy463:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy463;
	}
#line 619 "../src/ast/lex.re"
	{
					if (!s_to_u32_unsafe (tok, cur, cline))
					{
						fatal ("line number overflow");
					}
					goto sourceline; 
				}
#line 2918 "src/ast/lex.cc"
yy466:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy467:
	if (yybm[0+yych] & 128) {
		goto yy466;
	}
	if (yych <= '\n') goto yy468;
	if (yych <= '"') goto yy469;
	goto yy471;
yy468:
	YYCURSOR = YYMARKER;
	goto yy459;
yy469:
	++YYCURSOR;
#line 626 "../src/ast/lex.re"
	{
					escape (in.file_name, std::string (tok + 1, tok_len () - 2)); // -2 to omit quotes
			  		goto sourceline; 
				}
#line 2940 "src/ast/lex.cc"
yy471:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy468;
	goto yy466;
}
#line 645 "../src/ast/lex.re"

}

} // end namespace re2c
