/* Generated by re2c 1.1.1 on Tue Nov 13 23:39:33 2018 */
#line 1 "../src/ast/lex.re"
#include "src/util/c99_stdint.h"
#include <stddef.h>
#include <string.h>
#include <algorithm>
#include <limits>
#include <string>

#include "src/conf/msg.h"
#include "src/code/output.h"
#include "src/re/encoding/enc.h"
#include "src/ast/input.h"
#include "src/ast/ast.h"
#include "src/ast/scanner.h"
#include "src/ast/parser.h" // needed by "y.tab.h"
#include "src/ast/unescape.h"
#include "src/util/range.h"
#include "src/util/s_to_n32_unsafe.h"
#include "src/util/string_utils.h"
#include "y.tab.h"

extern YYSTYPE yylval;

#define    YYCTYPE      unsigned char
#define    YYCURSOR     cur
#define    YYLIMIT      lim
#define    YYMARKER     mar
#define    YYCTXMARKER  ctx
#define    YYFILL(n)    { fill (n); }

namespace re2c
{

#line 56 "../src/ast/lex.re"


Scanner::ParseMode Scanner::echo(OutputFile &out)
{
    if (eof && cur == eof) // Catch EOF
    {
        return Stop;
    }

    tok = cur;
echo:
    ptr = cur;


#line 51 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 17) YYFILL(17);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 133 "../src/ast/lex.re"
	{
        if (cur != eof) goto echo;
        out.wraw(tok, ptr);
        return Stop;
    }
#line 115 "src/ast/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 151 "../src/ast/lex.re"
	{ goto echo; }
#line 121 "src/ast/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 145 "../src/ast/lex.re"
	{
        cline++;
        pos = cur;
        goto echo;
    }
#line 136 "src/ast/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy7;
	} else {
		goto yy5;
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 70 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        return Parse;
    }
#line 184 "src/ast/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'i':	goto yy23;
	case 'm':	goto yy24;
	case 'r':	goto yy25;
	case 's':	goto yy26;
	case 't':	goto yy27;
	case 'u':	goto yy28;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy29;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy30;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy31;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy32;
	if (yych == 't') goto yy33;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy34;
	if (yych == 'u') goto yy35;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy36;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy37;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy38;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy39;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy40;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy41;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy42;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy43;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy44;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy45;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy46;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy47;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy48;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy50;
	if (yych <= '9') goto yy13;
	goto yy50;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy51;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy52;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy53;
	if (yych == 'n') goto yy54;
	goto yy13;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy55;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy56;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy57;
	goto yy13;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy58;
	goto yy13;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy59;
	goto yy13;
yy49:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy50:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy49;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy49;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			YYCTXMARKER = YYCURSOR;
			goto yy60;
		}
		goto yy13;
	}
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy62;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy63;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy64;
	goto yy13;
yy54:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy65;
	goto yy13;
yy55:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy66;
	goto yy13;
yy56:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy67;
	goto yy13;
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy68;
	goto yy13;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy69;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy70;
	goto yy13;
yy60:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy60;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy71;
		if (yych <= '\n') goto yy73;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy75;
		if (yych == ' ') goto yy71;
		goto yy13;
	}
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy76;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy77;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy78;
	goto yy13;
yy65:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy79;
	goto yy13;
yy66:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy80;
	goto yy13;
yy67:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy81;
	goto yy13;
yy68:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy82;
	goto yy13;
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy83;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy84;
	goto yy13;
yy71:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy71;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy71;
		if (yych == '"') goto yy85;
		goto yy13;
	}
yy73:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 139 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr + 1);
        set_sourceline();
        goto echo;
    }
#line 448 "src/ast/lex.cc"
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy73;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy87;
	goto yy13;
yy77:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy88;
	goto yy13;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy89;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy90;
	goto yy13;
yy80:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy91;
	goto yy13;
yy81:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy92;
	goto yy13;
yy82:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy93;
	goto yy13;
yy83:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy94;
	goto yy13;
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy95;
	goto yy13;
yy85:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy85;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy96;
	goto yy97;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy98;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy99;
	goto yy13;
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy100;
	goto yy13;
yy90:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy102;
	goto yy13;
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy103;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy104;
	goto yy13;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy105;
	goto yy13;
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy106;
	goto yy13;
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy107;
	goto yy13;
yy96:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy73;
	if (yych == '\r') goto yy75;
	goto yy13;
yy97:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy85;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy109;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy110;
	goto yy13;
yy100:
	++YYCURSOR;
#line 91 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_yymaxfill();
        lex_end_of_comment(out);
        goto echo;
    }
#line 564 "src/ast/lex.cc"
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'h') goto yy111;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy112;
	goto yy13;
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy113;
	goto yy13;
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy114;
	goto yy13;
yy106:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy115;
	goto yy13;
yy107:
	++YYCURSOR;
#line 80 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        return Reuse;
    }
#line 592 "src/ast/lex.cc"
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy116;
	goto yy13;
yy110:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy117;
	goto yy13;
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy118;
	goto yy13;
yy112:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy119;
	goto yy13;
yy113:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy121;
	goto yy13;
yy114:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy123;
	goto yy13;
yy115:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy125;
	goto yy13;
yy116:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy127;
	goto yy13;
yy117:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy128;
	goto yy13;
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy130;
	goto yy13;
yy119:
	++YYCURSOR;
#line 127 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, true);
        goto echo;
    }
#line 641 "src/ast/lex.cc"
yy121:
	++YYCURSOR;
#line 75 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        return Rules;
    }
#line 649 "src/ast/lex.cc"
yy123:
	++YYCURSOR;
#line 121 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, false);
        goto echo;
    }
#line 658 "src/ast/lex.cc"
yy125:
	++YYCURSOR;
#line 112 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_line_info_output();
        out.wdelay_types();
        out.wdelay_line_info_input(cline, get_fname());
        lex_end_of_comment(out);
        goto echo;
    }
#line 670 "src/ast/lex.cc"
yy127:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy131;
	goto yy13;
yy128:
	++YYCURSOR;
#line 85 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        lex_end_of_comment(out);
        goto echo;
    }
#line 683 "src/ast/lex.cc"
yy130:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy132;
	goto yy13;
yy131:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy133;
	goto yy13;
yy132:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy135;
	goto yy13;
yy133:
	++YYCURSOR;
#line 105 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_state_goto(0);
        lex_end_of_comment(out);
        goto echo;
    }
#line 705 "src/ast/lex.cc"
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
#line 98 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_yymaxnmatch();
        lex_end_of_comment(out);
        goto echo;
    }
#line 717 "src/ast/lex.cc"
}
#line 152 "../src/ast/lex.re"

}

void Scanner::lex_end_of_comment(OutputFile &out)
{
    uint32_t ignored = 0;
    for (;;) {
#line 727 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy140;
		if (yych == '\n') goto yy144;
		goto yy142;
	} else {
		if (yych <= '\r') goto yy146;
		if (yych == '*') goto yy147;
		goto yy142;
	}
yy140:
	++YYCURSOR;
#line 159 "../src/ast/lex.re"
	{ fatal_lc(get_cline(), get_column(), "expected end of block"); }
#line 745 "src/ast/lex.cc"
yy142:
	++YYCURSOR;
yy143:
#line 161 "../src/ast/lex.re"
	{ continue; }
#line 751 "src/ast/lex.cc"
yy144:
	++YYCURSOR;
#line 162 "../src/ast/lex.re"
	{ ++ignored; continue; }
#line 756 "src/ast/lex.cc"
yy146:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy144;
	goto yy143;
yy147:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy143;
	++YYCURSOR;
#line 163 "../src/ast/lex.re"
	{
            if (ignored > 0) {
                cline += ignored;
                out.wdelay_line_info_input(cline, get_fname());
            }
            tok = pos = cur;
            return;
        }
#line 774 "src/ast/lex.cc"
}
#line 171 "../src/ast/lex.re"
}
}

void Scanner::lex_tags(OutputFile &out, bool mtags)
{
    std::string fmt, sep;
    for (;;) {
#line 784 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy154;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy157;
		} else {
			if (yych == '\r') goto yy159;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy160;
			if (yych >= 'f') goto yy161;
		} else {
			if (yych == 's') goto yy162;
		}
	}
	++YYCURSOR;
yy153:
#line 178 "../src/ast/lex.re"
	{ fatal_lc(get_cline(), get_column(), "unrecognized configuration"); }
#line 844 "src/ast/lex.cc"
yy154:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy154;
	}
#line 183 "../src/ast/lex.re"
	{ continue; }
#line 854 "src/ast/lex.cc"
yy157:
	++YYCURSOR;
#line 184 "../src/ast/lex.re"
	{ ++cline; continue; }
#line 859 "src/ast/lex.cc"
yy159:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy157;
	goto yy153;
yy160:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy163;
	goto yy153;
yy161:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy165;
	goto yy153;
yy162:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy167;
	goto yy153;
yy163:
	++YYCURSOR;
#line 185 "../src/ast/lex.re"
	{
            out.wdelay_tags(new ConfTags(fmt, sep), mtags);
            tok = pos = cur;
            return;
        }
#line 884 "src/ast/lex.cc"
yy165:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy168;
yy166:
	YYCURSOR = YYMARKER;
	goto yy153;
yy167:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy169;
	goto yy166;
yy168:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy170;
	goto yy166;
yy169:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy171;
	goto yy166;
yy170:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy172;
	goto yy166;
yy171:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy173;
	goto yy166;
yy172:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy174;
	goto yy166;
yy173:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy176;
	goto yy166;
yy174:
	++YYCURSOR;
#line 180 "../src/ast/lex.re"
	{ fmt = lex_conf_string(); continue; }
#line 923 "src/ast/lex.cc"
yy176:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy166;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy166;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy166;
	++YYCURSOR;
#line 181 "../src/ast/lex.re"
	{ sep = lex_conf_string(); continue; }
#line 934 "src/ast/lex.cc"
}
#line 190 "../src/ast/lex.re"
}
}

int Scanner::scan(const conopt_t *globopts)
{
scan:
    tchar = cur - pos;
    tok = cur;

#line 946 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy185;
	}
	if (yych <= '9') {
		if (yych <= '%') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy183;
				if (yych <= '\n') goto yy188;
				if (yych >= '\r') goto yy190;
			} else {
				if (yych <= '"') {
					if (yych >= '"') goto yy191;
				} else {
					if (yych <= '#') goto yy193;
					if (yych >= '%') goto yy194;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') goto yy183;
				if (yych <= '\'') goto yy195;
				if (yych <= ')') goto yy197;
				goto yy199;
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy197;
				} else {
					if (yych <= '.') goto yy200;
					if (yych <= '/') goto yy202;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy203;
				if (yych <= ';') goto yy197;
				if (yych <= '<') goto yy204;
				goto yy206;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy197;
				} else {
					if (yych <= '@') goto yy193;
					if (yych <= 'Z') goto yy207;
					goto yy210;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy197;
				} else {
					if (yych != '`') goto yy207;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy212;
					goto yy207;
				} else {
					if (yych <= '{') goto yy213;
					if (yych <= '|') goto yy197;
				}
			}
		}
	}
yy183:
	++YYCURSOR;
yy184:
#line 314 "../src/ast/lex.re"
	{
        fatal_lc(get_cline(), get_column(), "unexpected character: '%c'", *tok);
        goto scan;
    }
#line 1060 "src/ast/lex.cc"
yy185:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy185;
	}
#line 295 "../src/ast/lex.re"
	{ goto scan; }
#line 1070 "src/ast/lex.cc"
yy188:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy215;
	} else {
		if (yych <= ' ') goto yy215;
		if (yych == '#') goto yy218;
	}
yy189:
#line 302 "../src/ast/lex.re"
	{
        pos = cur;
        cline++;
        if (lexer_state == LEX_FLEX_NAME) {
            lexer_state = LEX_NORMAL;
            return TOKEN_FID_END;
        }
        else {
            goto scan;
        }
    }
#line 1093 "src/ast/lex.cc"
yy190:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy188;
	goto yy184;
yy191:
	++YYCURSOR;
#line 212 "../src/ast/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1102 "src/ast/lex.cc"
yy193:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy184;
		if (yych <= 'Z') goto yy220;
		goto yy184;
	} else {
		if (yych == '`') goto yy184;
		if (yych <= 'z') goto yy220;
		goto yy184;
	}
yy194:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy223;
	goto yy184;
yy195:
	++YYCURSOR;
#line 211 "../src/ast/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1122 "src/ast/lex.cc"
yy197:
	++YYCURSOR;
yy198:
#line 222 "../src/ast/lex.re"
	{ return *tok; }
#line 1128 "src/ast/lex.cc"
yy199:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy223;
	goto yy198;
yy200:
	++YYCURSOR;
#line 290 "../src/ast/lex.re"
	{
        yylval.regexp = ast_dot(cline, get_column());
        return TOKEN_REGEXP;
    }
#line 1140 "src/ast/lex.cc"
yy202:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy225;
	if (yych == '/') goto yy227;
	goto yy198;
yy203:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy229;
	goto yy184;
yy204:
	++YYCURSOR;
#line 204 "../src/ast/lex.re"
	{ return lex_clist(); }
#line 1154 "src/ast/lex.cc"
yy206:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy231;
	goto yy198;
yy207:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy208:
	if (yybm[0+yych] & 32) {
		goto yy207;
	}
#line 267 "../src/ast/lex.re"
	{
        if (!globopts->FFlag || lex_namedef_context_re2c()) {
            yylval.str = new std::string (tok, tok_len());
            return TOKEN_ID;
        }
        else if (lex_namedef_context_flex()) {
            yylval.str = new std::string (tok, tok_len());
            lexer_state = LEX_FLEX_NAME;
            return TOKEN_FID;
        }
        else {
            std::vector<ASTChar> *str = new std::vector<ASTChar>;
            for (const char *s = tok; s < cur; ++s) {
                const uint32_t
                    chr = static_cast<uint8_t>(*s),
                    col = static_cast<uint32_t>(s - tok);
                str->push_back(ASTChar(chr, col));
            }
            yylval.regexp = ast_str(cline, get_column(), str, false);
            return TOKEN_REGEXP;
        }
    }
#line 1190 "src/ast/lex.cc"
yy210:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy233;
#line 213 "../src/ast/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1196 "src/ast/lex.cc"
yy212:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy235;
	goto yy208;
yy213:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy238;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy236;
		if (yych >= 'A') goto yy240;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy240;
		} else {
			if (yych <= '`') goto yy214;
			if (yych <= 'z') goto yy240;
		}
	}
yy214:
#line 199 "../src/ast/lex.re"
	{ lex_code_in_braces(); return TOKEN_CODE; }
#line 1221 "src/ast/lex.cc"
yy215:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy215;
	} else {
		if (yych <= ' ') goto yy215;
		if (yych == '#') goto yy218;
	}
yy217:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy189;
		} else {
			goto yy214;
		}
	} else {
		goto yy237;
	}
yy218:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy218;
		goto yy217;
	} else {
		if (yych <= ' ') goto yy218;
		if (yych == 'l') goto yy242;
		goto yy217;
	}
yy220:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy222;
		if (yych <= '9') goto yy220;
		if (yych >= 'A') goto yy220;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy220;
		} else {
			if (yych <= '`') goto yy222;
			if (yych <= 'z') goto yy220;
		}
	}
yy222:
#line 216 "../src/ast/lex.re"
	{
        const std::string *name = new std::string(tok + 1, tok_len() - 1);
        yylval.regexp = ast_tag(cline, get_column(), name, tok[0] == '#');
        return TOKEN_REGEXP;
    }
#line 1278 "src/ast/lex.cc"
yy223:
	++YYCURSOR;
#line 209 "../src/ast/lex.re"
	{ tok = cur; return 0; }
#line 1283 "src/ast/lex.cc"
yy225:
	++YYCURSOR;
#line 207 "../src/ast/lex.re"
	{ lex_c_comment(); goto scan; }
#line 1288 "src/ast/lex.cc"
yy227:
	++YYCURSOR;
#line 206 "../src/ast/lex.re"
	{ lex_cpp_comment(); goto scan; }
#line 1293 "src/ast/lex.cc"
yy229:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy243;
#line 200 "../src/ast/lex.re"
	{ lex_code_indented(); return TOKEN_CODE; }
#line 1299 "src/ast/lex.cc"
yy231:
	++YYCURSOR;
#line 202 "../src/ast/lex.re"
	{ lex_cgoto(); return TOKEN_CNEXT; }
#line 1304 "src/ast/lex.cc"
yy233:
	++YYCURSOR;
#line 214 "../src/ast/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1309 "src/ast/lex.cc"
yy235:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy245;
	goto yy208;
yy236:
	++YYCURSOR;
yy237:
#line 251 "../src/ast/lex.re"
	{
        fatal_lc(get_cline(), get_column(),
            "illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
    }
#line 1322 "src/ast/lex.cc"
yy238:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy238;
	}
	if (yych == ',') goto yy246;
	if (yych == '}') goto yy247;
	goto yy217;
yy240:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy217;
			goto yy240;
		} else {
			if (yych <= '@') goto yy217;
			if (yych <= 'Z') goto yy240;
			goto yy217;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy217;
			goto yy240;
		} else {
			if (yych == '}') goto yy249;
			goto yy217;
		}
	}
yy242:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy251;
	goto yy217;
yy243:
	++YYCURSOR;
#line 203 "../src/ast/lex.re"
	{ lex_cgoto(); return TOKEN_CJUMP; }
#line 1363 "src/ast/lex.cc"
yy245:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy252;
	goto yy208;
yy246:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy237;
	if (yych <= '9') goto yy253;
	if (yych == '}') goto yy255;
	goto yy237;
yy247:
	++YYCURSOR;
#line 224 "../src/ast/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            fatal_lc(get_cline(), get_column(), "repetition count overflow");
        }
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_CLOSESIZE;
    }
#line 1385 "src/ast/lex.cc"
yy249:
	++YYCURSOR;
#line 256 "../src/ast/lex.re"
	{
        if (!globopts->FFlag) {
            fatal_lc(get_cline(), get_column(),
                "curly braces for names only allowed with -F switch");
        }
        yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
        return TOKEN_ID;
    }
#line 1397 "src/ast/lex.cc"
yy251:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy257;
	goto yy217;
yy252:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy258;
	goto yy208;
yy253:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy217;
	if (yych <= '9') goto yy253;
	if (yych == '}') goto yy260;
	goto yy217;
yy255:
	++YYCURSOR;
#line 243 "../src/ast/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            fatal_lc(get_cline(), get_column(), "repetition lower bound overflow");
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        return TOKEN_CLOSESIZE;
    }
#line 1424 "src/ast/lex.cc"
yy257:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy262;
	goto yy217;
yy258:
	++YYCURSOR;
#line 265 "../src/ast/lex.re"
	{ return TOKEN_CONF; }
#line 1433 "src/ast/lex.cc"
yy260:
	++YYCURSOR;
#line 232 "../src/ast/lex.re"
	{
        const char * p = strchr (tok, ',');
        if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min)) {
            fatal_lc(get_cline(), get_column(), "repetition lower bound overflow");
        }
        if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max)) {
            fatal_lc(get_cline(), get_column(), "repetition upper bound overflow");
        }
        return TOKEN_CLOSESIZE;
    }
#line 1447 "src/ast/lex.cc"
yy262:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy264;
	if (yych <= '9') goto yy217;
	goto yy264;
yy263:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy264:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy263;
		goto yy217;
	} else {
		if (yych <= ' ') goto yy263;
		if (yych <= '0') goto yy217;
		if (yych >= ':') goto yy217;
		YYCTXMARKER = YYCURSOR;
	}
yy265:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy217;
		} else {
			if (yych <= '\n') goto yy269;
			if (yych <= '\f') goto yy217;
			goto yy271;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy217;
		} else {
			if (yych <= '/') goto yy217;
			if (yych <= '9') goto yy265;
			goto yy217;
		}
	}
yy267:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy267;
		goto yy217;
	} else {
		if (yych <= ' ') goto yy267;
		if (yych == '"') goto yy272;
		goto yy217;
	}
yy269:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 297 "../src/ast/lex.re"
	{
        set_sourceline ();
        return TOKEN_LINE_INFO;
    }
#line 1508 "src/ast/lex.cc"
yy271:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy269;
	goto yy217;
yy272:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy272;
	}
	if (yych <= '\n') goto yy217;
	if (yych >= '#') goto yy275;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy269;
	if (yych == '\r') goto yy271;
	goto yy217;
yy275:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy217;
	if (yych == '\n') goto yy217;
	goto yy272;
}
#line 318 "../src/ast/lex.re"

}

bool Scanner::lex_namedef_context_re2c()
{

#line 1541 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			YYCTXMARKER = YYCURSOR;
			goto yy279;
		}
	} else {
		if (yych <= ' ') {
			YYCTXMARKER = YYCURSOR;
			goto yy279;
		}
		if (yych == '=') {
			YYCTXMARKER = YYCURSOR;
			goto yy282;
		}
	}
yy278:
#line 325 "../src/ast/lex.re"
	{ return false; }
#line 1598 "src/ast/lex.cc"
yy279:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy279;
	}
	if (yych == '=') goto yy282;
yy281:
	YYCURSOR = YYMARKER;
	goto yy278;
yy282:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy281;
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 324 "../src/ast/lex.re"
	{ return true; }
#line 1617 "src/ast/lex.cc"
}
#line 326 "../src/ast/lex.re"

}

bool Scanner::lex_namedef_context_flex()
{

#line 1626 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') {
		YYCTXMARKER = YYCURSOR;
		goto yy288;
	}
	if (yych == ' ') {
		YYCTXMARKER = YYCURSOR;
		goto yy288;
	}
#line 334 "../src/ast/lex.re"
	{ return false; }
#line 1675 "src/ast/lex.cc"
yy288:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy288;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy291;
	} else {
		if (yych <= '=') goto yy291;
		if (yych == '{') goto yy291;
	}
	YYCURSOR = YYCTXMARKER;
#line 333 "../src/ast/lex.re"
	{ return true; }
#line 1692 "src/ast/lex.cc"
yy291:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 332 "../src/ast/lex.re"
	{ return false; }
#line 1698 "src/ast/lex.cc"
}
#line 335 "../src/ast/lex.re"

}

int Scanner::lex_clist()
{
    int kind = TOKEN_CLIST;
    CondList *cl = NULL;

#line 1709 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy293;
yy294:
	++YYCURSOR;
yy293:
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy294;
	}
	if (yych <= 0x1F) goto yy296;
	if (yych <= '!') goto yy297;
	if (yych == '>') goto yy300;
yy296:
#line 345 "../src/ast/lex.re"
	{ goto fst; }
#line 1761 "src/ast/lex.cc"
yy297:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') goto yy297;
	if (yych == ' ') goto yy297;
#line 343 "../src/ast/lex.re"
	{ kind = TOKEN_CSETUP; goto fst; }
#line 1770 "src/ast/lex.cc"
yy300:
	++YYCURSOR;
#line 344 "../src/ast/lex.re"
	{ kind = TOKEN_CZERO; goto end; }
#line 1775 "src/ast/lex.cc"
}
#line 346 "../src/ast/lex.re"

fst:
    cl = new CondList;
    tok = cur;

#line 1783 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,   0,   0,   0,   0,   0,   0, 
		  0,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,   0,   0,   0,   0,  64, 
		  0,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych == '*') goto yy306;
		if (yych >= 'A') goto yy307;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy307;
		} else {
			if (yych <= '`') goto yy304;
			if (yych <= 'z') goto yy307;
		}
	}
yy304:
	++YYCURSOR;
yy305:
#line 353 "../src/ast/lex.re"
	{ goto error; }
#line 1838 "src/ast/lex.cc"
yy306:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 128) {
		goto yy310;
	}
	if (yych == '>') goto yy313;
	goto yy305;
yy307:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy307;
	}
#line 352 "../src/ast/lex.re"
	{ cl->insert(std::string(tok, tok_len())); goto sep; }
#line 1855 "src/ast/lex.cc"
yy310:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy310;
	}
	if (yych == '>') goto yy313;
	YYCURSOR = YYMARKER;
	goto yy305;
yy313:
	++YYCURSOR;
#line 351 "../src/ast/lex.re"
	{ cl->insert("*"); goto end; }
#line 1870 "src/ast/lex.cc"
}
#line 354 "../src/ast/lex.re"

sep:

#line 1876 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy319;
		if (yych >= ' ') goto yy319;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy320;
		} else {
			if (yych == '>') goto yy323;
		}
	}
	++YYCURSOR;
yy318:
#line 359 "../src/ast/lex.re"
	{ goto error; }
#line 1929 "src/ast/lex.cc"
yy319:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= ' ') {
		if (yych == '\t') goto yy325;
		if (yych <= 0x1F) goto yy318;
		goto yy325;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy318;
		} else {
			if (yych == '>') goto yy323;
			goto yy318;
		}
	}
yy320:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy320;
	}
#line 357 "../src/ast/lex.re"
	{ goto next; }
#line 1953 "src/ast/lex.cc"
yy323:
	++YYCURSOR;
#line 358 "../src/ast/lex.re"
	{ goto end; }
#line 1958 "src/ast/lex.cc"
yy325:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy325;
		if (yych >= ' ') goto yy325;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy320;
		} else {
			if (yych == '>') goto yy323;
		}
	}
	YYCURSOR = YYMARKER;
	goto yy318;
}
#line 360 "../src/ast/lex.re"

next:
    tok = cur;

#line 1981 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy330;
		if (yych <= 'Z') goto yy332;
	} else {
		if (yych == '`') goto yy330;
		if (yych <= 'z') goto yy332;
	}
yy330:
	++YYCURSOR;
#line 365 "../src/ast/lex.re"
	{ goto error; }
#line 2031 "src/ast/lex.cc"
yy332:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy332;
	}
#line 364 "../src/ast/lex.re"
	{ cl->insert(std::string(tok, tok_len())); goto sep; }
#line 2041 "src/ast/lex.cc"
}
#line 366 "../src/ast/lex.re"

end:
    yylval.clist = cl;
    return kind;
error:
    delete cl;
    fatal_l(get_cline(), "syntax error in condition list");
}

void Scanner::lex_cgoto()
{

#line 2056 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy335;
yy336:
	++YYCURSOR;
yy335:
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy336;
	}
#line 378 "../src/ast/lex.re"
	{ goto name; }
#line 2104 "src/ast/lex.cc"
}
#line 379 "../src/ast/lex.re"

name:
    tok = cur;

#line 2111 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy341;
		if (yych <= 'Z') goto yy343;
	} else {
		if (yych == '`') goto yy341;
		if (yych <= 'z') goto yy343;
	}
yy341:
	++YYCURSOR;
#line 384 "../src/ast/lex.re"
	{ fatal_l(get_cline(), "syntax error in condition goto"); }
#line 2161 "src/ast/lex.cc"
yy343:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy343;
	}
#line 383 "../src/ast/lex.re"
	{ yylval.str = new std::string (tok, tok_len ()); return; }
#line 2171 "src/ast/lex.cc"
}
#line 385 "../src/ast/lex.re"

}

void Scanner::lex_code_indented()
{
    const uint32_t line = cline;
    tok = cur;
code:

#line 2183 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy348;
			if (yych == '\n') goto yy352;
			goto yy350;
		} else {
			if (yych <= '\r') goto yy354;
			if (yych == '"') goto yy355;
			goto yy350;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy355;
			if (yych == '/') goto yy357;
			goto yy350;
		} else {
			if (yych == '|') goto yy350;
			if (yych <= '}') goto yy358;
			goto yy350;
		}
	}
yy348:
	++YYCURSOR;
#line 402 "../src/ast/lex.re"
	{ fail_if_eof(); goto code; }
#line 2213 "src/ast/lex.cc"
yy350:
	++YYCURSOR;
yy351:
#line 407 "../src/ast/lex.re"
	{ goto code; }
#line 2219 "src/ast/lex.cc"
yy352:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy353;
		if (yych <= '\n') goto yy360;
	} else {
		if (yych <= '\r') goto yy360;
		if (yych == ' ') goto yy360;
	}
yy353:
#line 395 "../src/ast/lex.re"
	{
        while (isspace(tok[0])) ++tok;
        while (cur > tok && isspace(cur[-1])) --cur;
        yylval.code = new Code(get_fname (), line, tok, tok_len ());
        return;
    }
#line 2237 "src/ast/lex.cc"
yy354:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy352;
	goto yy351;
yy355:
	++YYCURSOR;
#line 406 "../src/ast/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2246 "src/ast/lex.cc"
yy357:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy362;
	if (yych == '/') goto yy364;
	goto yy351;
yy358:
	++YYCURSOR;
#line 403 "../src/ast/lex.re"
	{ fatal_l(get_cline(), "Curly braces are not allowed after ':='"); }
#line 2256 "src/ast/lex.cc"
yy360:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 394 "../src/ast/lex.re"
	{ goto code; }
#line 2262 "src/ast/lex.cc"
yy362:
	++YYCURSOR;
#line 404 "../src/ast/lex.re"
	{ lex_c_comment(); goto code; }
#line 2267 "src/ast/lex.cc"
yy364:
	++YYCURSOR;
#line 405 "../src/ast/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2272 "src/ast/lex.cc"
}
#line 408 "../src/ast/lex.re"

}

void Scanner::lex_code_in_braces()
{
    const uint32_t line = cline;
    uint32_t depth = 1;
code:

#line 2284 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy368;
			if (yych == '\n') goto yy372;
			goto yy370;
		} else {
			if (yych <= '\r') goto yy374;
			if (yych == '"') goto yy375;
			goto yy370;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy375;
			if (yych == '/') goto yy377;
			goto yy370;
		} else {
			if (yych <= '{') goto yy378;
			if (yych == '}') goto yy380;
			goto yy370;
		}
	}
yy368:
	++YYCURSOR;
#line 428 "../src/ast/lex.re"
	{ fail_if_eof(); goto code; }
#line 2348 "src/ast/lex.cc"
yy370:
	++YYCURSOR;
yy371:
#line 432 "../src/ast/lex.re"
	{ goto code; }
#line 2354 "src/ast/lex.cc"
yy372:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy382;
	}
	if (yych == '#') goto yy385;
yy373:
#line 427 "../src/ast/lex.re"
	{ pos = cur; cline++; goto code; }
#line 2364 "src/ast/lex.cc"
yy374:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy372;
	goto yy371;
yy375:
	++YYCURSOR;
#line 431 "../src/ast/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2373 "src/ast/lex.cc"
yy377:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy387;
	if (yych == '/') goto yy389;
	goto yy371;
yy378:
	++YYCURSOR;
#line 425 "../src/ast/lex.re"
	{ ++depth; goto code; }
#line 2383 "src/ast/lex.cc"
yy380:
	++YYCURSOR;
#line 417 "../src/ast/lex.re"
	{
        if (--depth == 0) {
            yylval.code = new Code(get_fname (), line, tok, tok_len ());
            return;
        }
        goto code;
    }
#line 2394 "src/ast/lex.cc"
yy382:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy382;
	}
	if (yych == '#') goto yy385;
yy384:
	YYCURSOR = YYMARKER;
	goto yy373;
yy385:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy385;
		goto yy384;
	} else {
		if (yych <= ' ') goto yy385;
		if (yych == 'l') goto yy391;
		goto yy384;
	}
yy387:
	++YYCURSOR;
#line 429 "../src/ast/lex.re"
	{ lex_c_comment(); goto code; }
#line 2422 "src/ast/lex.cc"
yy389:
	++YYCURSOR;
#line 430 "../src/ast/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2427 "src/ast/lex.cc"
yy391:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy384;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy384;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy384;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy396;
	if (yych <= '9') goto yy384;
	goto yy396;
yy395:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy396:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy395;
		goto yy384;
	} else {
		if (yych <= ' ') goto yy395;
		if (yych <= '0') goto yy384;
		if (yych >= ':') goto yy384;
		YYCTXMARKER = YYCURSOR;
	}
yy397:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy397;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy384;
		if (yych <= '\t') goto yy399;
		if (yych <= '\n') goto yy401;
		goto yy384;
	} else {
		if (yych <= '\r') goto yy403;
		if (yych != ' ') goto yy384;
	}
yy399:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy399;
		goto yy384;
	} else {
		if (yych <= ' ') goto yy399;
		if (yych == '"') goto yy404;
		goto yy384;
	}
yy401:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 426 "../src/ast/lex.re"
	{ set_sourceline (); goto code; }
#line 2486 "src/ast/lex.cc"
yy403:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy401;
	goto yy384;
yy404:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy404;
	}
	if (yych <= '\n') goto yy384;
	if (yych >= '#') goto yy407;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy401;
	if (yych == '\r') goto yy403;
	goto yy384;
yy407:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy384;
	if (yych == '\n') goto yy384;
	goto yy404;
}
#line 433 "../src/ast/lex.re"

}

void Scanner::lex_string(char delim)
{
loop:

#line 2520 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy410;
			if (yych <= '\t') goto yy412;
			goto yy414;
		} else {
			if (yych == '\r') goto yy416;
			goto yy412;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy417;
			if (yych <= '&') goto yy412;
			goto yy417;
		} else {
			if (yych == '\\') goto yy419;
			goto yy412;
		}
	}
yy410:
	++YYCURSOR;
#line 443 "../src/ast/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2548 "src/ast/lex.cc"
yy412:
	++YYCURSOR;
yy413:
#line 444 "../src/ast/lex.re"
	{ goto loop; }
#line 2554 "src/ast/lex.cc"
yy414:
	++YYCURSOR;
#line 442 "../src/ast/lex.re"
	{ pos = cur; ++cline; goto loop; }
#line 2559 "src/ast/lex.cc"
yy416:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy414;
	goto yy413;
yy417:
	++YYCURSOR;
#line 440 "../src/ast/lex.re"
	{ if (cur[-1] == delim) return; else goto loop; }
#line 2568 "src/ast/lex.cc"
yy419:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '&') {
		if (yych != '"') goto yy413;
	} else {
		if (yych <= '\'') goto yy420;
		if (yych != '\\') goto yy413;
	}
yy420:
	++YYCURSOR;
#line 441 "../src/ast/lex.re"
	{ goto loop; }
#line 2581 "src/ast/lex.cc"
}
#line 445 "../src/ast/lex.re"

}

void Scanner::lex_c_comment()
{
loop:

#line 2591 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy424;
		if (yych == '\n') goto yy428;
		goto yy426;
	} else {
		if (yych <= '\r') goto yy430;
		if (yych == '*') goto yy431;
		goto yy426;
	}
yy424:
	++YYCURSOR;
#line 454 "../src/ast/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2609 "src/ast/lex.cc"
yy426:
	++YYCURSOR;
yy427:
#line 455 "../src/ast/lex.re"
	{ goto loop; }
#line 2615 "src/ast/lex.cc"
yy428:
	++YYCURSOR;
#line 453 "../src/ast/lex.re"
	{ pos = cur; ++cline; goto loop; }
#line 2620 "src/ast/lex.cc"
yy430:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy428;
	goto yy427;
yy431:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy427;
	++YYCURSOR;
#line 452 "../src/ast/lex.re"
	{ return; }
#line 2631 "src/ast/lex.cc"
}
#line 456 "../src/ast/lex.re"

}

void Scanner::lex_cpp_comment()
{
loop:

#line 2641 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy436;
		if (yych <= '\t') goto yy438;
		goto yy440;
	} else {
		if (yych == '\r') goto yy442;
		goto yy438;
	}
yy436:
	++YYCURSOR;
#line 464 "../src/ast/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2658 "src/ast/lex.cc"
yy438:
	++YYCURSOR;
yy439:
#line 465 "../src/ast/lex.re"
	{ goto loop; }
#line 2664 "src/ast/lex.cc"
yy440:
	++YYCURSOR;
#line 463 "../src/ast/lex.re"
	{ pos = cur; ++cline; return; }
#line 2669 "src/ast/lex.cc"
yy442:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy440;
	goto yy439;
}
#line 466 "../src/ast/lex.re"

}

const AST *Scanner::lex_cls(bool neg)
{
    std::vector<ASTRange> *cls = new std::vector<ASTRange>;
    uint32_t u, l, c, c0 = get_column();
fst:
    tok = cur;
    c = get_column();
    
#line 2687 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy446;
#line 478 "../src/ast/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 2695 "src/ast/lex.cc"
yy446:
	++YYCURSOR;
#line 477 "../src/ast/lex.re"
	{ return ast_cls(cline, c0, cls, neg); }
#line 2700 "src/ast/lex.cc"
}
#line 479 "../src/ast/lex.re"

snd:
    
#line 2706 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy451;
yy450:
#line 482 "../src/ast/lex.re"
	{ u = l; goto add; }
#line 2715 "src/ast/lex.cc"
yy451:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy453;
	YYCURSOR = YYMARKER;
	goto yy450;
yy453:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 483 "../src/ast/lex.re"
	{
            u = lex_cls_chr();
            if (l > u) {
                warn.swapped_range(cline, l, u);
                std::swap(l, u);
            }
            goto add;
        }
#line 2733 "src/ast/lex.cc"
}
#line 491 "../src/ast/lex.re"

add:
    cls->push_back(ASTRange(l, u, c));
    goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
    tok = cur;
    const uint32_t l = get_cline(), c = get_column();
    
#line 2747 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy457;
		if (yych == '\n') goto yy461;
		goto yy459;
	} else {
		if (yych <= '\r') goto yy463;
		if (yych == '\\') goto yy464;
		goto yy459;
	}
yy457:
	++YYCURSOR;
#line 503 "../src/ast/lex.re"
	{ fail_if_eof(); return 0; }
#line 2766 "src/ast/lex.cc"
yy459:
	++YYCURSOR;
yy460:
#line 509 "../src/ast/lex.re"
	{ return static_cast<uint8_t>(tok[0]); }
#line 2772 "src/ast/lex.cc"
yy461:
	++YYCURSOR;
#line 504 "../src/ast/lex.re"
	{ fatal_lc(l, c, "newline in character class"); }
#line 2777 "src/ast/lex.cc"
yy463:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy461;
	goto yy460;
yy464:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy465;
				if (yych == '\n') goto yy461;
				goto yy466;
			} else {
				if (yych <= '\r') goto yy468;
				if (yych == '-') goto yy469;
				goto yy466;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy471;
				if (yych <= '7') goto yy473;
				if (yych <= 'T') goto yy466;
				goto yy474;
			} else {
				if (yych == 'X') goto yy476;
				if (yych <= '[') goto yy466;
				goto yy477;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy479;
				if (yych <= '`') goto yy466;
				if (yych <= 'a') goto yy481;
				goto yy483;
			} else {
				if (yych == 'f') goto yy485;
				if (yych <= 'm') goto yy466;
				goto yy487;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy489;
				if (yych <= 's') goto yy466;
				goto yy491;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy476;
					goto yy493;
				} else {
					if (yych == 'x') goto yy495;
					goto yy466;
				}
			}
		}
	}
yy465:
#line 507 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in escape sequence"); }
#line 2838 "src/ast/lex.cc"
yy466:
	++YYCURSOR;
yy467:
#line 522 "../src/ast/lex.re"
	{
            warn.useless_escape(cline, get_column(), tok[1]);
            return static_cast<uint8_t>(tok[1]);
        }
#line 2847 "src/ast/lex.cc"
yy468:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy461;
	goto yy467;
yy469:
	++YYCURSOR;
#line 520 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 2856 "src/ast/lex.cc"
yy471:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy472;
	if (yych <= '7') goto yy496;
yy472:
#line 506 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in octal escape sequence"); }
#line 2865 "src/ast/lex.cc"
yy473:
	++YYCURSOR;
	goto yy472;
yy474:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy475;
		if (yych <= '9') goto yy498;
	} else {
		if (yych <= 'F') goto yy498;
		if (yych <= '`') goto yy475;
		if (yych <= 'f') goto yy498;
	}
yy475:
#line 505 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in hexadecimal escape sequence"); }
#line 2883 "src/ast/lex.cc"
yy476:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy475;
		if (yych <= '9') goto yy499;
		goto yy475;
	} else {
		if (yych <= 'F') goto yy499;
		if (yych <= '`') goto yy475;
		if (yych <= 'f') goto yy499;
		goto yy475;
	}
yy477:
	++YYCURSOR;
#line 519 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2901 "src/ast/lex.cc"
yy479:
	++YYCURSOR;
#line 521 "../src/ast/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 2906 "src/ast/lex.cc"
yy481:
	++YYCURSOR;
#line 512 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2911 "src/ast/lex.cc"
yy483:
	++YYCURSOR;
#line 513 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2916 "src/ast/lex.cc"
yy485:
	++YYCURSOR;
#line 514 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2921 "src/ast/lex.cc"
yy487:
	++YYCURSOR;
#line 515 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2926 "src/ast/lex.cc"
yy489:
	++YYCURSOR;
#line 516 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2931 "src/ast/lex.cc"
yy491:
	++YYCURSOR;
#line 517 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2936 "src/ast/lex.cc"
yy493:
	++YYCURSOR;
#line 518 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2941 "src/ast/lex.cc"
yy495:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy475;
		if (yych <= '9') goto yy500;
		goto yy475;
	} else {
		if (yych <= 'F') goto yy500;
		if (yych <= '`') goto yy475;
		if (yych <= 'f') goto yy500;
		goto yy475;
	}
yy496:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy497;
	if (yych <= '7') goto yy501;
yy497:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy472;
	} else {
		goto yy475;
	}
yy498:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy497;
		if (yych <= '9') goto yy503;
		goto yy497;
	} else {
		if (yych <= 'F') goto yy503;
		if (yych <= '`') goto yy497;
		if (yych <= 'f') goto yy503;
		goto yy497;
	}
yy499:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy497;
		if (yych <= '9') goto yy504;
		goto yy497;
	} else {
		if (yych <= 'F') goto yy504;
		if (yych <= '`') goto yy497;
		if (yych <= 'f') goto yy504;
		goto yy497;
	}
yy500:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy497;
		if (yych <= '9') goto yy505;
		goto yy497;
	} else {
		if (yych <= 'F') goto yy505;
		if (yych <= '`') goto yy497;
		if (yych <= 'f') goto yy505;
		goto yy497;
	}
yy501:
	++YYCURSOR;
#line 511 "../src/ast/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3006 "src/ast/lex.cc"
yy503:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy497;
		if (yych <= '9') goto yy507;
		goto yy497;
	} else {
		if (yych <= 'F') goto yy507;
		if (yych <= '`') goto yy497;
		if (yych <= 'f') goto yy507;
		goto yy497;
	}
yy504:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy497;
		if (yych <= '9') goto yy500;
		goto yy497;
	} else {
		if (yych <= 'F') goto yy500;
		if (yych <= '`') goto yy497;
		if (yych <= 'f') goto yy500;
		goto yy497;
	}
yy505:
	++YYCURSOR;
#line 510 "../src/ast/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3035 "src/ast/lex.cc"
yy507:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy497;
		if (yych >= ':') goto yy497;
	} else {
		if (yych <= 'F') goto yy508;
		if (yych <= '`') goto yy497;
		if (yych >= 'g') goto yy497;
	}
yy508:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy497;
		if (yych <= '9') goto yy499;
		goto yy497;
	} else {
		if (yych <= 'F') goto yy499;
		if (yych <= '`') goto yy497;
		if (yych <= 'f') goto yy499;
		goto yy497;
	}
}
#line 526 "../src/ast/lex.re"

}

uint32_t Scanner::lex_str_chr(char quote, bool &end)
{
    end = false;
    tok = cur;
    const uint32_t l = get_cline(), c = get_column();
    
#line 3069 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy511;
		if (yych == '\n') goto yy515;
		goto yy513;
	} else {
		if (yych <= '\r') goto yy517;
		if (yych == '\\') goto yy518;
		goto yy513;
	}
yy511:
	++YYCURSOR;
#line 536 "../src/ast/lex.re"
	{ fail_if_eof(); return 0; }
#line 3088 "src/ast/lex.cc"
yy513:
	++YYCURSOR;
yy514:
#line 542 "../src/ast/lex.re"
	{
            end = tok[0] == quote;
            return static_cast<uint8_t>(tok[0]);
        }
#line 3097 "src/ast/lex.cc"
yy515:
	++YYCURSOR;
#line 537 "../src/ast/lex.re"
	{ fatal_lc(l, c, "newline in character string"); }
#line 3102 "src/ast/lex.cc"
yy517:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy515;
	goto yy514;
yy518:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy519;
				if (yych <= '\t') goto yy520;
				goto yy515;
			} else {
				if (yych == '\r') goto yy522;
				if (yych <= '/') goto yy520;
				goto yy523;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy525;
				if (yych == 'U') goto yy526;
				goto yy520;
			} else {
				if (yych <= 'X') goto yy528;
				if (yych == '\\') goto yy529;
				goto yy520;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy531;
				if (yych <= 'b') goto yy533;
				goto yy520;
			} else {
				if (yych <= 'f') goto yy535;
				if (yych == 'n') goto yy537;
				goto yy520;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy539;
				if (yych <= 's') goto yy520;
				if (yych <= 't') goto yy541;
				goto yy528;
			} else {
				if (yych <= 'v') goto yy543;
				if (yych == 'x') goto yy545;
				goto yy520;
			}
		}
	}
yy519:
#line 540 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in escape sequence"); }
#line 3158 "src/ast/lex.cc"
yy520:
	++YYCURSOR;
yy521:
#line 556 "../src/ast/lex.re"
	{
            if (tok[1] != quote) {
                warn.useless_escape(cline, get_column(), tok[1]);
            }
            return static_cast<uint8_t>(tok[1]);
        }
#line 3169 "src/ast/lex.cc"
yy522:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy515;
	goto yy521;
yy523:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy524;
	if (yych <= '7') goto yy546;
yy524:
#line 539 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in octal escape sequence"); }
#line 3182 "src/ast/lex.cc"
yy525:
	++YYCURSOR;
	goto yy524;
yy526:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy527;
		if (yych <= '9') goto yy548;
	} else {
		if (yych <= 'F') goto yy548;
		if (yych <= '`') goto yy527;
		if (yych <= 'f') goto yy548;
	}
yy527:
#line 538 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in hexadecimal escape sequence"); }
#line 3200 "src/ast/lex.cc"
yy528:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy527;
		if (yych <= '9') goto yy549;
		goto yy527;
	} else {
		if (yych <= 'F') goto yy549;
		if (yych <= '`') goto yy527;
		if (yych <= 'f') goto yy549;
		goto yy527;
	}
yy529:
	++YYCURSOR;
#line 555 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3218 "src/ast/lex.cc"
yy531:
	++YYCURSOR;
#line 548 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3223 "src/ast/lex.cc"
yy533:
	++YYCURSOR;
#line 549 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3228 "src/ast/lex.cc"
yy535:
	++YYCURSOR;
#line 550 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3233 "src/ast/lex.cc"
yy537:
	++YYCURSOR;
#line 551 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3238 "src/ast/lex.cc"
yy539:
	++YYCURSOR;
#line 552 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3243 "src/ast/lex.cc"
yy541:
	++YYCURSOR;
#line 553 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3248 "src/ast/lex.cc"
yy543:
	++YYCURSOR;
#line 554 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3253 "src/ast/lex.cc"
yy545:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy527;
		if (yych <= '9') goto yy550;
		goto yy527;
	} else {
		if (yych <= 'F') goto yy550;
		if (yych <= '`') goto yy527;
		if (yych <= 'f') goto yy550;
		goto yy527;
	}
yy546:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy547;
	if (yych <= '7') goto yy551;
yy547:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy524;
	} else {
		goto yy527;
	}
yy548:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy547;
		if (yych <= '9') goto yy553;
		goto yy547;
	} else {
		if (yych <= 'F') goto yy553;
		if (yych <= '`') goto yy547;
		if (yych <= 'f') goto yy553;
		goto yy547;
	}
yy549:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy547;
		if (yych <= '9') goto yy554;
		goto yy547;
	} else {
		if (yych <= 'F') goto yy554;
		if (yych <= '`') goto yy547;
		if (yych <= 'f') goto yy554;
		goto yy547;
	}
yy550:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy547;
		if (yych <= '9') goto yy555;
		goto yy547;
	} else {
		if (yych <= 'F') goto yy555;
		if (yych <= '`') goto yy547;
		if (yych <= 'f') goto yy555;
		goto yy547;
	}
yy551:
	++YYCURSOR;
#line 547 "../src/ast/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3318 "src/ast/lex.cc"
yy553:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy547;
		if (yych <= '9') goto yy557;
		goto yy547;
	} else {
		if (yych <= 'F') goto yy557;
		if (yych <= '`') goto yy547;
		if (yych <= 'f') goto yy557;
		goto yy547;
	}
yy554:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy547;
		if (yych <= '9') goto yy550;
		goto yy547;
	} else {
		if (yych <= 'F') goto yy550;
		if (yych <= '`') goto yy547;
		if (yych <= 'f') goto yy550;
		goto yy547;
	}
yy555:
	++YYCURSOR;
#line 546 "../src/ast/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3347 "src/ast/lex.cc"
yy557:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy547;
		if (yych >= ':') goto yy547;
	} else {
		if (yych <= 'F') goto yy558;
		if (yych <= '`') goto yy547;
		if (yych >= 'g') goto yy547;
	}
yy558:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy547;
		if (yych <= '9') goto yy549;
		goto yy547;
	} else {
		if (yych <= 'F') goto yy549;
		if (yych <= '`') goto yy547;
		if (yych <= 'f') goto yy549;
		goto yy547;
	}
}
#line 562 "../src/ast/lex.re"

}

const AST *Scanner::lex_str(char quote)
{
    const uint32_t column = get_column();
    std::vector<ASTChar> *str = new std::vector<ASTChar>;
    for (bool end;;) {
        const uint32_t c = lex_str_chr(quote, end);
        if (end) return ast_str(cline, column, str, quote == '\'');
        str->push_back(ASTChar(c, get_column()));
    }
}

void Scanner::set_sourceline ()
{
sourceline:
    tok = cur;

#line 3391 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy563;
		} else {
			if (yych <= '\n') goto yy565;
			if (yych <= '\f') goto yy563;
			goto yy567;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy563;
			goto yy568;
		} else {
			if (yych <= '0') goto yy563;
			if (yych <= '9') goto yy569;
			goto yy563;
		}
	}
	++YYCURSOR;
#line 599 "../src/ast/lex.re"
	{
        --cur;
        tok = cur;
        return;
    }
#line 3455 "src/ast/lex.cc"
yy563:
	++YYCURSOR;
yy564:
#line 605 "../src/ast/lex.re"
	{ goto sourceline; }
#line 3461 "src/ast/lex.cc"
yy565:
	++YYCURSOR;
#line 594 "../src/ast/lex.re"
	{
        tok = cur;
        return;
    }
#line 3469 "src/ast/lex.cc"
yy567:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy565;
	goto yy564;
yy568:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x00) goto yy564;
	if (yych == '\n') goto yy564;
	goto yy573;
yy569:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy569;
	}
#line 581 "../src/ast/lex.re"
	{
        if (!s_to_u32_unsafe (tok, cur, cline)) {
            fatal_lc(get_cline(), get_column(), "line number overflow");
        }
        goto sourceline;
    }
#line 3493 "src/ast/lex.cc"
yy572:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy573:
	if (yybm[0+yych] & 128) {
		goto yy572;
	}
	if (yych <= '\n') goto yy574;
	if (yych <= '"') goto yy575;
	goto yy577;
yy574:
	YYCURSOR = YYMARKER;
	goto yy564;
yy575:
	++YYCURSOR;
#line 588 "../src/ast/lex.re"
	{
        in.escaped_file_name = std::string (tok + 1, tok_len () - 2); // strip quotes
        strrreplace (in.escaped_file_name, "\\", "\\\\");
        goto sourceline;
    }
#line 3516 "src/ast/lex.cc"
yy577:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy574;
	if (yych == '\n') goto yy574;
	goto yy572;
}
#line 606 "../src/ast/lex.re"

}

void Scanner::fail_if_eof() const
{
    if (cur == eof) {
        const uint32_t col = static_cast<uint32_t>(cur - pos) - 1;
        fatal_lc(get_cline(), col, "unexpected end of input");
    }
}

} // end namespace re2c
