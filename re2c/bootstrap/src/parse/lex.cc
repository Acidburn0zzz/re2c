/* Generated by re2c 0.16 on Fri Apr  1 16:33:55 2016 */
#line 1 "../src/parse/lex.re"
#include "src/util/c99_stdint.h"
#include <stddef.h>
#include <string.h>
#include <algorithm>
#include <limits>
#include <string>

#include "src/codegen/output.h"
#include "src/conf/opt.h"
#include "src/conf/warn.h"
#include "src/globals.h"
#include "src/ir/regexp/encoding/enc.h"
#include "src/ir/regexp/regexp.h"
#include "src/parse/code.h"
#include "src/parse/extop.h"
#include "src/parse/input.h"
#include "src/parse/scanner.h"
#include "src/parse/parser.h" // needed by "y.tab.h"
#include "src/parse/unescape.h"
#include "src/util/range.h"
#include "src/util/s_to_n32_unsafe.h"
#include "y.tab.h"

extern YYSTYPE yylval;

#define	YYCTYPE		unsigned char
#define	YYCURSOR	cur
#define	YYLIMIT		lim
#define	YYMARKER	ptr
#define	YYCTXMARKER ctx
#define	YYFILL(n)	{ fill (n); }

namespace re2c
{

// source code is in ASCII: pointers have type 'char *'
// but re2c makes an implicit assumption that YYCTYPE is unsigned
// when it generates comparisons
#line 41 "../src/parse/lex.re"


#line 61 "../src/parse/lex.re"


Scanner::ParseMode Scanner::echo()
{
	bool ignore_eoc = false;
	int  ignore_cnt = 0;

	if (eof && cur == eof) // Catch EOF
	{
		return Stop;
	}

	tok = cur;
echo:

#line 61 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 16) YYFILL(16);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '%') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '$') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '*') {
			if (yych <= ')') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 218 "../src/parse/lex.re"
	{
					if (!ignore_eoc && opts->target == opt_t::CODE)
					{
						out.wraw(tok, tok_len () - 1);
						// -1 so we don't write out the \0
					}
					if(cur == eof)
					{
						return Stop;
					}
				}
#line 131 "src/parse/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 229 "../src/parse/lex.re"
	{
					goto echo;
				}
#line 139 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 205 "../src/parse/lex.re"
	{
					if (ignore_eoc)
					{
						ignore_cnt++;
					}
					else if (opts->target == opt_t::CODE)
					{
						out.wraw(tok, tok_len ());
					}
					tok = pos = cur;
					cline++;
					goto echo;
				}
#line 162 "src/parse/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy18;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy20;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy7;
		} else {
			goto yy5;
		}
	} else {
		goto yy19;
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy21;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 77 "../src/parse/lex.re"
	{
					if (opts->rFlag)
					{
						fatal("found standard 're2c' block while using -r flag");
					}
					if (opts->target == opt_t::CODE)
					{
						const size_t lexeme_len = cur[-1] == '{'
							? sizeof ("%{") - 1
							: sizeof ("/*!re2c") - 1;
						out.wraw(tok, tok_len () - lexeme_len);
					}
					tok = cur;
					return Parse;
				}
#line 225 "src/parse/lex.cc"
yy18:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy22;
	if (yych == '\r') goto yy24;
yy19:
#line 184 "../src/parse/lex.re"
	{
					if (ignore_eoc)
					{
						if (ignore_cnt)
						{
							out.ws("\n").wline_info (cline, get_fname ().c_str ());
						}
						ignore_eoc = false;
						ignore_cnt = 0;
					}
					else if (opts->target == opt_t::CODE)
					{
						out.wraw(tok, tok_len ());
					}
					tok = pos = cur;
					goto echo;
				}
#line 250 "src/parse/lex.cc"
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy25;
	goto yy13;
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy26;
	goto yy13;
yy22:
	++YYCURSOR;
#line 166 "../src/parse/lex.re"
	{
					cline++;
					if (ignore_eoc)
					{
						if (ignore_cnt)
						{
							out.wline_info (cline, get_fname ().c_str ());
						}
						ignore_eoc = false;
						ignore_cnt = 0;
					}
					else if (opts->target == opt_t::CODE)
					{
						out.wraw(tok, tok_len ());
					}
					tok = pos = cur;
					goto echo;
				}
#line 280 "src/parse/lex.cc"
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy22;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'c':	goto yy27;
	case 'g':	goto yy28;
	case 'i':	goto yy29;
	case 'm':	goto yy30;
	case 'r':	goto yy31;
	case 't':	goto yy32;
	case 'u':	goto yy33;
	default:	goto yy13;
	}
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy34;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy35;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy36;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy37;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy38;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy39;
	if (yych == 'u') goto yy40;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy41;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy42;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy43;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy44;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy45;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy46;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy47;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy48;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy49;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy50;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy51;
	goto yy13;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy53;
	if (yych <= '9') goto yy13;
	goto yy53;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy54;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy55;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy56;
	goto yy13;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy57;
	goto yy13;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy58;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy59;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy60;
	goto yy13;
yy52:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	YYCTXMARKER = YYCURSOR;
yy53:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy52;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy52;
		if (yych <= '0') goto yy13;
		if (yych <= '9') goto yy61;
		goto yy13;
	}
yy54:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy63;
	goto yy13;
yy55:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy64;
	goto yy13;
yy56:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy65;
	goto yy13;
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy66;
	goto yy13;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy67;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy68;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy69;
	goto yy13;
yy61:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy61;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy70;
		if (yych <= '\n') goto yy72;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy74;
		if (yych == ' ') goto yy70;
		goto yy13;
	}
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy75;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy76;
	goto yy13;
yy65:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy77;
	goto yy13;
yy66:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy78;
	goto yy13;
yy67:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy79;
	goto yy13;
yy68:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy80;
	goto yy13;
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy81;
	goto yy13;
yy70:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy70;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy70;
		if (yych == '"') goto yy82;
		goto yy13;
	}
yy72:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 201 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto echo;
				}
#line 511 "src/parse/lex.cc"
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy72;
	goto yy13;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy84;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy85;
	goto yy13;
yy77:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy86;
	goto yy13;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy87;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy88;
	goto yy13;
yy80:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy89;
	goto yy13;
yy81:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy90;
	goto yy13;
yy82:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy82;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy91;
	goto yy92;
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy93;
	goto yy13;
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy94;
	goto yy13;
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy95;
	goto yy13;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy96;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy98;
	goto yy13;
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy99;
	goto yy13;
yy90:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy100;
	goto yy13;
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy72;
	if (yych == '\r') goto yy74;
	goto yy13;
yy92:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy13;
	goto yy82;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy102;
	goto yy13;
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy103;
	goto yy13;
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy104;
	goto yy13;
yy96:
	++YYCURSOR;
#line 118 "../src/parse/lex.re"
	{
					if (opts->target != opt_t::DOT)
					{
						out.wdelay_yymaxfill ();
					}
					tok = pos = cur;
					ignore_eoc = true;
					goto echo;
				}
#line 617 "src/parse/lex.cc"
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy105;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy106;
	goto yy13;
yy100:
	++YYCURSOR;
#line 104 "../src/parse/lex.re"
	{
					if (!opts->rFlag)
					{
						fatal("found 'use:re2c' block without -r flag");
					}
					reuse();
					if (opts->target == opt_t::CODE)
					{
						const size_t lexeme_len = sizeof ("/*!use:re2c") - 1;
						out.wraw(tok, tok_len () - lexeme_len);
					}
					tok = cur;
					return Reuse;
				}
#line 643 "src/parse/lex.cc"
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy107;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy108;
	goto yy13;
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy109;
	goto yy13;
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy110;
	goto yy13;
yy106:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy112;
	goto yy13;
yy107:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy114;
	goto yy13;
yy108:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy115;
	goto yy13;
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy116;
	goto yy13;
yy110:
	++YYCURSOR;
#line 92 "../src/parse/lex.re"
	{
					if (opts->rFlag)
					{
						opts.reset_mapCodeName ();
					}
					else
					{
						fatal("found 'rules:re2c' block without -r flag");
					}
					tok = cur;
					return Rules;
				}
#line 691 "src/parse/lex.cc"
yy112:
	++YYCURSOR;
#line 138 "../src/parse/lex.re"
	{
					tok = pos = cur;
					ignore_eoc = true;
					if (opts->target != opt_t::DOT)
					{
						out.wdelay_line_info ().ws("\n")
							.wdelay_types ().ws("\n")
							.wline_info (cline, get_fname ().c_str ());
					}
					goto echo;
				}
#line 706 "src/parse/lex.cc"
yy114:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy118;
	goto yy13;
yy115:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy119;
	goto yy13;
yy116:
	++YYCURSOR;
#line 133 "../src/parse/lex.re"
	{
					tok = pos = cur;
					ignore_eoc = true;
					goto echo;
				}
#line 723 "src/parse/lex.cc"
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy120;
	goto yy13;
yy119:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy122;
	goto yy13;
yy120:
	++YYCURSOR;
#line 150 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			const size_t len = sizeof("/*!contexts:re2c") - 1;
			out.wraw(tok, tok_len() - len);
		}

		ConfContexts *conf = new ConfContexts;
		lex_conf_contexts(*conf);
		if (opts->target == opt_t::CODE) {
			out.wdelay_contexts(opts->topIndent, conf);
		}

		tok = pos = cur;
		goto echo;
	}
#line 750 "src/parse/lex.cc"
yy122:
	++YYCURSOR;
#line 127 "../src/parse/lex.re"
	{
					tok = pos = cur;
					out.wdelay_state_goto (opts->topIndent);
					ignore_eoc = true;
					goto echo;
				}
#line 760 "src/parse/lex.cc"
}
#line 232 "../src/parse/lex.re"

}

int Scanner::scan()
{
	uint32_t depth;

scan:
	tchar = cur - pos;
	tline = cline;
	tok = cur;
	switch (lexer_state)
	{
		case LEX_NORMAL:    goto start;
		case LEX_FLEX_NAME: goto flex_name;
	}

start:

#line 782 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 6) YYFILL(6);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy128;
	}
	if (yych <= '9') {
		if (yych <= '&') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy126;
				if (yych <= '\n') goto yy131;
				if (yych >= '\r') goto yy133;
			} else {
				if (yych <= '"') {
					if (yych >= '"') goto yy134;
				} else {
					if (yych == '%') goto yy136;
				}
			}
		} else {
			if (yych <= '+') {
				if (yych <= '\'') goto yy137;
				if (yych <= ')') goto yy139;
				if (yych <= '*') goto yy141;
				goto yy143;
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy139;
				} else {
					if (yych <= '.') goto yy145;
					if (yych <= '/') goto yy147;
					goto yy148;
				}
			}
		}
	} else {
		if (yych <= '\\') {
			if (yych <= '>') {
				if (yych <= ':') goto yy149;
				if (yych == '<') goto yy150;
				goto yy139;
			} else {
				if (yych <= '@') {
					if (yych <= '?') goto yy143;
					goto yy151;
				} else {
					if (yych <= 'Z') goto yy148;
					if (yych <= '[') goto yy152;
					goto yy139;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych == '_') goto yy148;
				if (yych >= 'a') goto yy148;
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy154;
					goto yy148;
				} else {
					if (yych <= '{') goto yy155;
					if (yych <= '|') goto yy139;
				}
			}
		}
	}
yy126:
	++YYCURSOR;
yy127:
#line 410 "../src/parse/lex.re"
	{
					fatalf("unexpected character: '%c'", *tok);
					goto scan;
				}
#line 893 "src/parse/lex.cc"
yy128:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy128;
	}
#line 394 "../src/parse/lex.re"
	{
					goto scan;
				}
#line 905 "src/parse/lex.cc"
yy131:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy157;
	} else {
		if (yych <= ' ') goto yy157;
		if (yych == '#') goto yy160;
	}
yy132:
#line 403 "../src/parse/lex.re"
	{
					if (cur == eof) return 0;
					pos = cur;
					cline++;
					goto scan;
				}
#line 923 "src/parse/lex.cc"
yy133:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy131;
	goto yy127;
yy134:
	++YYCURSOR;
#line 281 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"',  opts->bCaseInsensitive ||  opts->bCaseInverted); return TOKEN_REGEXP; }
#line 932 "src/parse/lex.cc"
yy136:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy162;
	goto yy127;
yy137:
	++YYCURSOR;
#line 280 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\'', opts->bCaseInsensitive || !opts->bCaseInverted); return TOKEN_REGEXP; }
#line 941 "src/parse/lex.cc"
yy139:
	++YYCURSOR;
yy140:
#line 297 "../src/parse/lex.re"
	{
					return *tok;
				}
#line 949 "src/parse/lex.cc"
yy141:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '/') goto yy162;
#line 301 "../src/parse/lex.re"
	{
					yylval.op = *tok;
					return TOKEN_STAR;
				}
#line 958 "src/parse/lex.cc"
yy143:
	++YYCURSOR;
#line 305 "../src/parse/lex.re"
	{
					yylval.op = *tok;
					return TOKEN_CLOSE;
				}
#line 966 "src/parse/lex.cc"
yy145:
	++YYCURSOR;
#line 389 "../src/parse/lex.re"
	{
					yylval.regexp = mkDot();
					return TOKEN_REGEXP;
				}
#line 974 "src/parse/lex.cc"
yy147:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy164;
	if (yych == '/') goto yy166;
	goto yy140;
yy148:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	goto yy174;
yy149:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy175;
	goto yy127;
yy150:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '!') goto yy177;
	if (yych == '>') goto yy179;
	goto yy140;
yy151:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy127;
		if (yych <= '9') goto yy180;
		if (yych <= '@') goto yy127;
		goto yy180;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy127;
			goto yy180;
		} else {
			if (yych <= '`') goto yy127;
			if (yych <= 'z') goto yy180;
			goto yy127;
		}
	}
yy152:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '^') goto yy183;
#line 282 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1016 "src/parse/lex.cc"
yy154:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	if (yych == 'e') goto yy185;
	goto yy174;
yy155:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy188;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy186;
		if (yych >= 'A') goto yy190;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy190;
		} else {
			if (yych <= '`') goto yy156;
			if (yych <= 'z') goto yy190;
		}
	}
yy156:
#line 251 "../src/parse/lex.re"
	{
					depth = 1;
					goto code;
				}
#line 1045 "src/parse/lex.cc"
yy157:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy157;
	} else {
		if (yych <= ' ') goto yy157;
		if (yych == '#') goto yy160;
	}
yy159:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy132;
		} else {
			goto yy140;
		}
	} else {
		if (yyaccept == 2) {
			goto yy156;
		} else {
			goto yy187;
		}
	}
yy160:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy160;
		goto yy159;
	} else {
		if (yych <= ' ') goto yy160;
		if (yych == 'l') goto yy192;
		goto yy159;
	}
yy162:
	++YYCURSOR;
#line 275 "../src/parse/lex.re"
	{
					tok = cur;
					return 0;
				}
#line 1090 "src/parse/lex.cc"
yy164:
	++YYCURSOR;
#line 269 "../src/parse/lex.re"
	{
					depth = 1;
					goto comment;
				}
#line 1098 "src/parse/lex.cc"
yy166:
	++YYCURSOR;
#line 266 "../src/parse/lex.re"
	{
				goto nextLine;
			}
#line 1105 "src/parse/lex.cc"
yy168:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 373 "../src/parse/lex.re"
	{
					if (!opts->FFlag) {
						yylval.str = new std::string (tok, tok_len());
						return TOKEN_ID;
					} else {
						const RegExp *r = NULL;
						const bool casing = opts->bCaseInsensitive || opts->bCaseInverted;
						for (char *s = tok; s < cur; ++s) {
							const uint32_t c = static_cast<uint8_t>(*s);
							r = doCat(r, casing ? ichr(c) : schr(c));
						}
						yylval.regexp = r ? r : RegExp::nil();
						return TOKEN_REGEXP;
					}
				}
#line 1125 "src/parse/lex.cc"
yy170:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy196;
yy171:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 368 "../src/parse/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					return TOKEN_ID;
				}
#line 1137 "src/parse/lex.cc"
yy173:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	YYCTXMARKER = YYCURSOR;
yy174:
	if (yybm[0+yych] & 32) {
		goto yy173;
	}
	if (yych <= ' ') {
		if (yych == '\t') goto yy170;
		if (yych <= 0x1F) goto yy168;
		goto yy170;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy168;
			goto yy171;
		} else {
			if (yych <= '<') goto yy168;
			if (yych <= '>') goto yy171;
			goto yy168;
		}
	}
yy175:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '>') goto yy197;
#line 260 "../src/parse/lex.re"
	{
					tok += 2; /* skip ":=" */
					depth = 0;
					goto code;
				}
#line 1170 "src/parse/lex.cc"
yy177:
	++YYCURSOR;
#line 288 "../src/parse/lex.re"
	{
					return TOKEN_SETUP;
				}
#line 1177 "src/parse/lex.cc"
yy179:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	goto yy200;
yy180:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy182;
		if (yych <= '9') goto yy180;
		if (yych >= 'A') goto yy180;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy180;
		} else {
			if (yych <= '`') goto yy182;
			if (yych <= 'z') goto yy180;
		}
	}
yy182:
#line 292 "../src/parse/lex.re"
	{
		yylval.str = new std::string(tok + 1, tok_len() - 1);
		return TOKEN_CTX;
	}
#line 1204 "src/parse/lex.cc"
yy183:
	++YYCURSOR;
#line 283 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1209 "src/parse/lex.cc"
yy185:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	if (yych == '2') goto yy205;
	goto yy174;
yy186:
	++YYCURSOR;
yy187:
#line 341 "../src/parse/lex.re"
	{
					fatal("illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
				}
#line 1222 "src/parse/lex.cc"
yy188:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy188;
	}
	if (yych <= '^') {
		if (yych <= ',') {
			if (yych <= '+') goto yy159;
			goto yy206;
		} else {
			if (yych <= '@') goto yy159;
			if (yych >= '[') goto yy159;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy159;
		} else {
			if (yych == '}') goto yy207;
			goto yy159;
		}
	}
yy190:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy159;
			goto yy190;
		} else {
			if (yych <= '@') goto yy159;
			if (yych <= 'Z') goto yy190;
			goto yy159;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy159;
			goto yy190;
		} else {
			if (yych == '}') goto yy209;
			goto yy159;
		}
	}
yy192:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy211;
	goto yy159;
yy193:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 355 "../src/parse/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					if (opts->FFlag)
					{
						lexer_state = LEX_FLEX_NAME;
						return TOKEN_FID;
					}
					else
					{
						return TOKEN_ID;
					}
				}
#line 1288 "src/parse/lex.cc"
yy195:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy196:
	if (yych <= ' ') {
		if (yych == '\t') goto yy195;
		if (yych <= 0x1F) goto yy193;
		goto yy195;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy193;
			goto yy171;
		} else {
			if (yych <= '<') goto yy193;
			if (yych <= '>') goto yy171;
			goto yy193;
		}
	}
yy197:
	++YYCURSOR;
	YYCURSOR -= 2;
#line 256 "../src/parse/lex.re"
	{
					return *tok;
				}
#line 1315 "src/parse/lex.cc"
yy199:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
yy200:
	if (yych <= '9') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy159;
			goto yy199;
		} else {
			if (yych == ' ') goto yy199;
			goto yy159;
		}
	} else {
		if (yych <= '=') {
			if (yych <= ':') goto yy201;
			if (yych <= '<') goto yy159;
			goto yy202;
		} else {
			if (yych == '{') goto yy203;
			goto yy159;
		}
	}
yy201:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy203;
	goto yy159;
yy202:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '>') goto yy159;
yy203:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 285 "../src/parse/lex.re"
	{
					return TOKEN_NOCOND;
				}
#line 1353 "src/parse/lex.cc"
yy205:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	if (yych == 'c') goto yy212;
	goto yy174;
yy206:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy187;
	if (yych <= '9') goto yy213;
	if (yych == '}') goto yy215;
	goto yy187;
yy207:
	++YYCURSOR;
#line 310 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.extop.min))
					{
						fatal ("repetition count overflow");
					}
					yylval.extop.max = yylval.extop.min;
					return TOKEN_CLOSESIZE;
				}
#line 1377 "src/parse/lex.cc"
yy209:
	++YYCURSOR;
#line 345 "../src/parse/lex.re"
	{
					if (!opts->FFlag) {
						fatal("curly braces for names only allowed with -F switch");
					}
					yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
					return TOKEN_ID;
				}
#line 1388 "src/parse/lex.cc"
yy211:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy217;
	goto yy159;
yy212:
	yych = (YYCTYPE)*++YYCURSOR;
	YYCTXMARKER = YYCURSOR;
	if (yych == ':') goto yy218;
	goto yy174;
yy213:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy159;
	if (yych <= '9') goto yy213;
	if (yych == '}') goto yy220;
	goto yy159;
yy215:
	++YYCURSOR;
#line 332 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					yylval.extop.max = std::numeric_limits<uint32_t>::max();
					return TOKEN_CLOSESIZE;
				}
#line 1417 "src/parse/lex.cc"
yy217:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy222;
	goto yy159;
yy218:
	++YYCURSOR;
#line 353 "../src/parse/lex.re"
	{ lex_conf (); return TOKEN_CONF; }
#line 1426 "src/parse/lex.cc"
yy220:
	++YYCURSOR;
#line 319 "../src/parse/lex.re"
	{
					const char * p = strchr (tok, ',');
					if (!s_to_u32_unsafe (tok + 1, p, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.extop.max))
					{
						fatal ("repetition upper bound overflow");
					}
					return TOKEN_CLOSESIZE;
				}
#line 1442 "src/parse/lex.cc"
yy222:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy224;
	if (yych <= '9') goto yy159;
	goto yy224;
yy223:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	YYCTXMARKER = YYCURSOR;
yy224:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy223;
		goto yy159;
	} else {
		if (yych <= ' ') goto yy223;
		if (yych <= '0') goto yy159;
		if (yych >= ':') goto yy159;
	}
yy225:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy159;
		} else {
			if (yych <= '\n') goto yy229;
			if (yych <= '\f') goto yy159;
			goto yy231;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy159;
		} else {
			if (yych <= '/') goto yy159;
			if (yych <= '9') goto yy225;
			goto yy159;
		}
	}
yy227:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy227;
		goto yy159;
	} else {
		if (yych <= ' ') goto yy227;
		if (yych == '"') goto yy232;
		goto yy159;
	}
yy229:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 398 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto scan;
				}
#line 1503 "src/parse/lex.cc"
yy231:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy229;
	goto yy159;
yy232:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy232;
	}
	if (yych <= '\n') goto yy159;
	if (yych >= '#') goto yy235;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy229;
	if (yych == '\r') goto yy231;
	goto yy159;
yy235:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy159;
	goto yy232;
}
#line 414 "../src/parse/lex.re"


flex_name:

#line 1533 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy240;
	if (yych == '\r') goto yy242;
	++YYCURSOR;
yy239:
#line 425 "../src/parse/lex.re"
	{
		YYCURSOR = tok;
		goto start;
	}
#line 1547 "src/parse/lex.cc"
yy240:
	++YYCURSOR;
#line 419 "../src/parse/lex.re"
	{
		YYCURSOR = tok;
		lexer_state = LEX_NORMAL;
		return TOKEN_FID_END;
	}
#line 1556 "src/parse/lex.cc"
yy242:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '\n') goto yy240;
	goto yy239;
}
#line 429 "../src/parse/lex.re"


code:

#line 1567 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96, 112,   0,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		112,  96,  64,  96,  96,  96,  96,  32, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,   0,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy245;
			if (yych <= '\t') goto yy247;
			goto yy249;
		} else {
			if (yych == '"') goto yy251;
			goto yy247;
		}
	} else {
		if (yych <= '{') {
			if (yych <= '\'') goto yy252;
			if (yych <= 'z') goto yy247;
			goto yy253;
		} else {
			if (yych == '}') goto yy255;
			goto yy247;
		}
	}
yy245:
	++YYCURSOR;
#line 492 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						if (depth)
						{
							fatal("missing '}'");
						}
						return 0;
					}
					goto code;
				}
#line 1640 "src/parse/lex.cc"
yy247:
	++YYCURSOR;
yy248:
#line 506 "../src/parse/lex.re"
	{
					goto code;
				}
#line 1648 "src/parse/lex.cc"
yy249:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy257;
		} else {
			if (yych <= '\n') goto yy259;
			if (yych >= '\r') goto yy259;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy257;
		} else {
			if (yych == '#') goto yy260;
		}
	}
yy250:
#line 473 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						tok += strspn(tok, " \t\r\n");
						while (cur > tok && strchr(" \t\r\n", cur[-1]))
						{
							--cur;
						}
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return TOKEN_CODE;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1687 "src/parse/lex.cc"
yy251:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy248;
	goto yy264;
yy252:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy248;
	goto yy269;
yy253:
	++YYCURSOR;
#line 445 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else
					{
						++depth;
					}
					goto code;
				}
#line 1712 "src/parse/lex.cc"
yy255:
	++YYCURSOR;
#line 433 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else if (--depth == 0)
					{
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return TOKEN_CODE;
					}
					goto code;
				}
#line 1728 "src/parse/lex.cc"
yy257:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy271;
	} else {
		if (yych <= ' ') goto yy271;
		if (yych == '#') goto yy260;
	}
yy258:
	YYCURSOR -= 1;
#line 460 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						goto code;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1754 "src/parse/lex.cc"
yy259:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy258;
yy260:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy260;
	}
	if (yych == 'l') goto yy273;
yy262:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy250;
		} else {
			goto yy248;
		}
	} else {
		goto yy258;
	}
yy263:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy264:
	if (yybm[0+yych] & 32) {
		goto yy263;
	}
	if (yych <= '\n') goto yy262;
	if (yych >= '#') goto yy267;
yy265:
	++YYCURSOR;
#line 503 "../src/parse/lex.re"
	{
					goto code;
				}
#line 1793 "src/parse/lex.cc"
yy267:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy262;
	goto yy263;
yy268:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy269:
	if (yybm[0+yych] & 64) {
		goto yy268;
	}
	if (yych <= '\n') goto yy262;
	if (yych <= '\'') goto yy265;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy262;
	goto yy268;
yy271:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy271;
		goto yy262;
	} else {
		if (yych <= ' ') goto yy271;
		if (yych == '#') goto yy260;
		goto yy262;
	}
yy273:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy262;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy262;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy262;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy278;
	if (yych <= '9') goto yy262;
	goto yy278;
yy277:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	YYCTXMARKER = YYCURSOR;
yy278:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy277;
		goto yy262;
	} else {
		if (yych <= ' ') goto yy277;
		if (yych <= '0') goto yy262;
		if (yych >= ':') goto yy262;
	}
yy279:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy279;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy262;
		if (yych <= '\t') goto yy281;
		if (yych <= '\n') goto yy283;
		goto yy262;
	} else {
		if (yych <= '\r') goto yy285;
		if (yych != ' ') goto yy262;
	}
yy281:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy281;
		goto yy262;
	} else {
		if (yych <= ' ') goto yy281;
		if (yych == '"') goto yy286;
		goto yy262;
	}
yy283:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 456 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto code;
				}
#line 1888 "src/parse/lex.cc"
yy285:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy283;
	goto yy262;
yy286:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy262;
		goto yy286;
	} else {
		if (yych <= '"') goto yy288;
		if (yych == '\\') goto yy289;
		goto yy286;
	}
yy288:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy283;
	if (yych == '\r') goto yy285;
	goto yy262;
yy289:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy262;
	goto yy286;
}
#line 509 "../src/parse/lex.re"


comment:

#line 1922 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ')') {
		if (yych == '\n') goto yy294;
	} else {
		if (yych <= '*') goto yy296;
		if (yych == '/') goto yy297;
	}
	++YYCURSOR;
yy293:
#line 541 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					goto comment;
				}
#line 1977 "src/parse/lex.cc"
yy294:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy298;
	}
	if (yych == '#') goto yy301;
yy295:
#line 532 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					tok = pos = cur;
					cline++;
					goto comment;
				}
#line 1995 "src/parse/lex.cc"
yy296:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy303;
	goto yy293;
yy297:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy305;
	goto yy293;
yy298:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy298;
	}
	if (yych == '#') goto yy301;
yy300:
	YYCURSOR = YYMARKER;
	goto yy295;
yy301:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy301;
		goto yy300;
	} else {
		if (yych <= ' ') goto yy301;
		if (yych == 'l') goto yy307;
		goto yy300;
	}
yy303:
	++YYCURSOR;
#line 513 "../src/parse/lex.re"
	{
					if (--depth == 0)
					{
						goto scan;
					}
					else
					{
						goto comment;
					}
				}
#line 2040 "src/parse/lex.cc"
yy305:
	++YYCURSOR;
#line 523 "../src/parse/lex.re"
	{
					++depth;
					fatal("ambiguous /* found");
					goto comment;
				}
#line 2049 "src/parse/lex.cc"
yy307:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy300;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy300;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy300;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy312;
	if (yych <= '9') goto yy300;
	goto yy312;
yy311:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	YYCTXMARKER = YYCURSOR;
yy312:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy311;
		goto yy300;
	} else {
		if (yych <= ' ') goto yy311;
		if (yych <= '0') goto yy300;
		if (yych >= ':') goto yy300;
	}
yy313:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy313;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy300;
		if (yych <= '\t') goto yy315;
		if (yych <= '\n') goto yy317;
		goto yy300;
	} else {
		if (yych <= '\r') goto yy319;
		if (yych != ' ') goto yy300;
	}
yy315:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy315;
		goto yy300;
	} else {
		if (yych <= ' ') goto yy315;
		if (yych == '"') goto yy320;
		goto yy300;
	}
yy317:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 528 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto comment;
				}
#line 2111 "src/parse/lex.cc"
yy319:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy317;
	goto yy300;
yy320:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy320;
	}
	if (yych <= '\n') goto yy300;
	if (yych >= '#') goto yy323;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy317;
	if (yych == '\r') goto yy319;
	goto yy300;
yy323:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy300;
	goto yy320;
}
#line 548 "../src/parse/lex.re"


nextLine:

#line 2141 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy328;
	++YYCURSOR;
#line 559 "../src/parse/lex.re"
	{  if(cur == eof) {
                  return 0;
               }
               goto nextLine;
            }
#line 2154 "src/parse/lex.cc"
yy328:
	++YYCURSOR;
#line 552 "../src/parse/lex.re"
	{ if(cur == eof) {
                  return 0;
               }
               tok = pos = cur;
               cline++;
               goto scan;
            }
#line 2165 "src/parse/lex.cc"
}
#line 564 "../src/parse/lex.re"

}

static void escape (std::string & dest, const std::string & src)
{
	dest = src;
	size_t l = dest.length();
	for (size_t p = 0; p < l; ++p)
	{
		if (dest[p] == '\\')
		{
			dest.insert(++p, "\\");
			++l;
		}
	}
}

const RegExp *Scanner::lex_cls(bool neg)
{
	Range *r = NULL, *s;
	uint32_t u, l;
fst:
	
#line 2191 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy333;
#line 588 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 2199 "src/parse/lex.cc"
yy333:
	++YYCURSOR;
#line 587 "../src/parse/lex.re"
	{ goto end; }
#line 2204 "src/parse/lex.cc"
}
#line 589 "../src/parse/lex.re"

snd:
	
#line 2210 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy338;
yy337:
#line 592 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 2219 "src/parse/lex.cc"
yy338:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy340;
	YYCURSOR = YYMARKER;
	goto yy337;
yy340:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 593 "../src/parse/lex.re"
	{
			u = lex_cls_chr();
			if (l > u) {
				warn.swapped_range(get_line(), l, u);
				std::swap(l, u);
			}
			goto add;
		}
#line 2237 "src/parse/lex.cc"
}
#line 601 "../src/parse/lex.re"

add:
	if (!(s = opts->encoding.encodeRange(l, u))) {
		fatalf ("Bad code point range: '0x%X - 0x%X'", l, u);
	}
	r = Range::add(r, s);
	goto fst;
end:
	if (neg) {
		r = Range::sub(opts->encoding.fullRange(), r);
	}
	return cls(r);
}

uint32_t Scanner::lex_cls_chr()
{
	tok = cur;
	
#line 2258 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy346;
	if (yych == '\\') goto yy348;
	++YYCURSOR;
#line 624 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(tok[0]); }
#line 2269 "src/parse/lex.cc"
yy346:
	++YYCURSOR;
#line 619 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error"); }
#line 2274 "src/parse/lex.cc"
yy348:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '`') {
		if (yych <= '7') {
			if (yych <= ',') {
				if (yych != '\n') goto yy350;
			} else {
				if (yych <= '-') goto yy352;
				if (yych <= '/') goto yy350;
				if (yych <= '3') goto yy354;
				goto yy356;
			}
		} else {
			if (yych <= 'X') {
				if (yych == 'U') goto yy357;
				if (yych <= 'W') goto yy350;
				goto yy359;
			} else {
				if (yych <= '[') goto yy350;
				if (yych <= '\\') goto yy360;
				if (yych <= ']') goto yy362;
				goto yy350;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy364;
				if (yych <= 'b') goto yy366;
				goto yy350;
			} else {
				if (yych <= 'f') goto yy368;
				if (yych == 'n') goto yy370;
				goto yy350;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy372;
				if (yych <= 's') goto yy350;
				if (yych <= 't') goto yy374;
				goto yy359;
			} else {
				if (yych <= 'v') goto yy376;
				if (yych == 'x') goto yy378;
				goto yy350;
			}
		}
	}
#line 622 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in escape sequence"); }
#line 2325 "src/parse/lex.cc"
yy350:
	++YYCURSOR;
#line 637 "../src/parse/lex.re"
	{
			warn.useless_escape(tline, tok - pos, tok[1]);
			return static_cast<uint8_t>(tok[1]);
		}
#line 2333 "src/parse/lex.cc"
yy352:
	++YYCURSOR;
#line 635 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 2338 "src/parse/lex.cc"
yy354:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy355;
	if (yych <= '7') goto yy379;
yy355:
#line 621 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in octal escape sequence"); }
#line 2347 "src/parse/lex.cc"
yy356:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy355;
yy357:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy358;
		if (yych <= '9') goto yy381;
	} else {
		if (yych <= 'F') goto yy381;
		if (yych <= '`') goto yy358;
		if (yych <= 'f') goto yy381;
	}
yy358:
#line 620 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2365 "src/parse/lex.cc"
yy359:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy358;
		if (yych <= '9') goto yy382;
		goto yy358;
	} else {
		if (yych <= 'F') goto yy382;
		if (yych <= '`') goto yy358;
		if (yych <= 'f') goto yy382;
		goto yy358;
	}
yy360:
	++YYCURSOR;
#line 634 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2383 "src/parse/lex.cc"
yy362:
	++YYCURSOR;
#line 636 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 2388 "src/parse/lex.cc"
yy364:
	++YYCURSOR;
#line 627 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2393 "src/parse/lex.cc"
yy366:
	++YYCURSOR;
#line 628 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2398 "src/parse/lex.cc"
yy368:
	++YYCURSOR;
#line 629 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2403 "src/parse/lex.cc"
yy370:
	++YYCURSOR;
#line 630 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2408 "src/parse/lex.cc"
yy372:
	++YYCURSOR;
#line 631 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2413 "src/parse/lex.cc"
yy374:
	++YYCURSOR;
#line 632 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2418 "src/parse/lex.cc"
yy376:
	++YYCURSOR;
#line 633 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2423 "src/parse/lex.cc"
yy378:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy358;
		if (yych <= '9') goto yy383;
		goto yy358;
	} else {
		if (yych <= 'F') goto yy383;
		if (yych <= '`') goto yy358;
		if (yych <= 'f') goto yy383;
		goto yy358;
	}
yy379:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy380;
	if (yych <= '7') goto yy384;
yy380:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy355;
	} else {
		goto yy358;
	}
yy381:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy380;
		if (yych <= '9') goto yy386;
		goto yy380;
	} else {
		if (yych <= 'F') goto yy386;
		if (yych <= '`') goto yy380;
		if (yych <= 'f') goto yy386;
		goto yy380;
	}
yy382:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy380;
		if (yych <= '9') goto yy387;
		goto yy380;
	} else {
		if (yych <= 'F') goto yy387;
		if (yych <= '`') goto yy380;
		if (yych <= 'f') goto yy387;
		goto yy380;
	}
yy383:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy380;
		if (yych <= '9') goto yy388;
		goto yy380;
	} else {
		if (yych <= 'F') goto yy388;
		if (yych <= '`') goto yy380;
		if (yych <= 'f') goto yy388;
		goto yy380;
	}
yy384:
	++YYCURSOR;
#line 626 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2488 "src/parse/lex.cc"
yy386:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy380;
		if (yych <= '9') goto yy390;
		goto yy380;
	} else {
		if (yych <= 'F') goto yy390;
		if (yych <= '`') goto yy380;
		if (yych <= 'f') goto yy390;
		goto yy380;
	}
yy387:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy380;
		if (yych <= '9') goto yy383;
		goto yy380;
	} else {
		if (yych <= 'F') goto yy383;
		if (yych <= '`') goto yy380;
		if (yych <= 'f') goto yy383;
		goto yy380;
	}
yy388:
	++YYCURSOR;
#line 625 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2517 "src/parse/lex.cc"
yy390:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy380;
		if (yych >= ':') goto yy380;
	} else {
		if (yych <= 'F') goto yy391;
		if (yych <= '`') goto yy380;
		if (yych >= 'g') goto yy380;
	}
yy391:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '@') {
		if (yych <= '/') goto yy380;
		if (yych <= '9') goto yy382;
		goto yy380;
	} else {
		if (yych <= 'F') goto yy382;
		if (yych <= '`') goto yy380;
		if (yych <= 'f') goto yy382;
		goto yy380;
	}
}
#line 641 "../src/parse/lex.re"

}

uint32_t Scanner::lex_str_chr(char quote, bool &end)
{
	end = false;
	tok = cur;
	
#line 2550 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy396;
	if (yych == '\\') goto yy398;
	++YYCURSOR;
#line 654 "../src/parse/lex.re"
	{
			end = tok[0] == quote;
			return static_cast<uint8_t>(tok[0]);
		}
#line 2564 "src/parse/lex.cc"
yy396:
	++YYCURSOR;
#line 649 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error"); }
#line 2569 "src/parse/lex.cc"
yy398:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= 'a') {
		if (yych <= 'T') {
			if (yych <= '/') {
				if (yych != '\n') goto yy400;
			} else {
				if (yych <= '3') goto yy402;
				if (yych <= '7') goto yy404;
				goto yy400;
			}
		} else {
			if (yych <= 'X') {
				if (yych <= 'U') goto yy405;
				if (yych <= 'W') goto yy400;
				goto yy407;
			} else {
				if (yych == '\\') goto yy408;
				if (yych <= '`') goto yy400;
				goto yy410;
			}
		}
	} else {
		if (yych <= 'r') {
			if (yych <= 'f') {
				if (yych <= 'b') goto yy412;
				if (yych <= 'e') goto yy400;
				goto yy414;
			} else {
				if (yych == 'n') goto yy416;
				if (yych <= 'q') goto yy400;
				goto yy418;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 's') goto yy400;
				if (yych <= 't') goto yy420;
				goto yy407;
			} else {
				if (yych <= 'v') goto yy422;
				if (yych == 'x') goto yy424;
				goto yy400;
			}
		}
	}
#line 652 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in escape sequence"); }
#line 2617 "src/parse/lex.cc"
yy400:
	++YYCURSOR;
#line 668 "../src/parse/lex.re"
	{
			if (tok[1] != quote) {
				warn.useless_escape(tline, tok - pos, tok[1]);
			}
			return static_cast<uint8_t>(tok[1]);
		}
#line 2627 "src/parse/lex.cc"
yy402:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy403;
	if (yych <= '7') goto yy425;
yy403:
#line 651 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in octal escape sequence"); }
#line 2636 "src/parse/lex.cc"
yy404:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy403;
yy405:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy406;
		if (yych <= '9') goto yy427;
	} else {
		if (yych <= 'F') goto yy427;
		if (yych <= '`') goto yy406;
		if (yych <= 'f') goto yy427;
	}
yy406:
#line 650 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2654 "src/parse/lex.cc"
yy407:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy406;
		if (yych <= '9') goto yy428;
		goto yy406;
	} else {
		if (yych <= 'F') goto yy428;
		if (yych <= '`') goto yy406;
		if (yych <= 'f') goto yy428;
		goto yy406;
	}
yy408:
	++YYCURSOR;
#line 667 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2672 "src/parse/lex.cc"
yy410:
	++YYCURSOR;
#line 660 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2677 "src/parse/lex.cc"
yy412:
	++YYCURSOR;
#line 661 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2682 "src/parse/lex.cc"
yy414:
	++YYCURSOR;
#line 662 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2687 "src/parse/lex.cc"
yy416:
	++YYCURSOR;
#line 663 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2692 "src/parse/lex.cc"
yy418:
	++YYCURSOR;
#line 664 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2697 "src/parse/lex.cc"
yy420:
	++YYCURSOR;
#line 665 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2702 "src/parse/lex.cc"
yy422:
	++YYCURSOR;
#line 666 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2707 "src/parse/lex.cc"
yy424:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy406;
		if (yych <= '9') goto yy429;
		goto yy406;
	} else {
		if (yych <= 'F') goto yy429;
		if (yych <= '`') goto yy406;
		if (yych <= 'f') goto yy429;
		goto yy406;
	}
yy425:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy426;
	if (yych <= '7') goto yy430;
yy426:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy403;
	} else {
		goto yy406;
	}
yy427:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy426;
		if (yych <= '9') goto yy432;
		goto yy426;
	} else {
		if (yych <= 'F') goto yy432;
		if (yych <= '`') goto yy426;
		if (yych <= 'f') goto yy432;
		goto yy426;
	}
yy428:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy426;
		if (yych <= '9') goto yy433;
		goto yy426;
	} else {
		if (yych <= 'F') goto yy433;
		if (yych <= '`') goto yy426;
		if (yych <= 'f') goto yy433;
		goto yy426;
	}
yy429:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy426;
		if (yych <= '9') goto yy434;
		goto yy426;
	} else {
		if (yych <= 'F') goto yy434;
		if (yych <= '`') goto yy426;
		if (yych <= 'f') goto yy434;
		goto yy426;
	}
yy430:
	++YYCURSOR;
#line 659 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2772 "src/parse/lex.cc"
yy432:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy426;
		if (yych <= '9') goto yy436;
		goto yy426;
	} else {
		if (yych <= 'F') goto yy436;
		if (yych <= '`') goto yy426;
		if (yych <= 'f') goto yy436;
		goto yy426;
	}
yy433:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy426;
		if (yych <= '9') goto yy429;
		goto yy426;
	} else {
		if (yych <= 'F') goto yy429;
		if (yych <= '`') goto yy426;
		if (yych <= 'f') goto yy429;
		goto yy426;
	}
yy434:
	++YYCURSOR;
#line 658 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2801 "src/parse/lex.cc"
yy436:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy426;
		if (yych >= ':') goto yy426;
	} else {
		if (yych <= 'F') goto yy437;
		if (yych <= '`') goto yy426;
		if (yych >= 'g') goto yy426;
	}
yy437:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '@') {
		if (yych <= '/') goto yy426;
		if (yych <= '9') goto yy428;
		goto yy426;
	} else {
		if (yych <= 'F') goto yy428;
		if (yych <= '`') goto yy426;
		if (yych <= 'f') goto yy428;
		goto yy426;
	}
}
#line 674 "../src/parse/lex.re"

}

const RegExp *Scanner::lex_str(char quote, bool casing)
{
	const RegExp *r = NULL;
	for (bool end;;) {
		const uint32_t c = lex_str_chr(quote, end);
		if (end) {
			return r ? r : RegExp::nil();
		}
		r = doCat(r, casing ? ichr(c) : schr(c));
	}
}

void Scanner::set_sourceline ()
{
sourceline:
	tok = cur;

#line 2846 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy442;
	} else {
		if (yych <= '"') goto yy444;
		if (yych <= '0') goto yy440;
		if (yych <= '9') goto yy445;
	}
yy440:
	++YYCURSOR;
yy441:
#line 717 "../src/parse/lex.re"
	{
  					goto sourceline;
  				}
#line 2899 "src/parse/lex.cc"
yy442:
	++YYCURSOR;
#line 705 "../src/parse/lex.re"
	{
  					if (cur == eof)
  					{
						--cur; 
					}
			  		else
			  		{
			  			pos = cur; 
			  		}
			  		tok = cur;
			  		return; 
				}
#line 2915 "src/parse/lex.cc"
yy444:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy441;
	goto yy449;
yy445:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy445;
	}
#line 694 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok, cur, cline))
					{
						fatal ("line number overflow");
					}
					goto sourceline; 
				}
#line 2935 "src/parse/lex.cc"
yy448:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy449:
	if (yybm[0+yych] & 128) {
		goto yy448;
	}
	if (yych <= '\n') goto yy450;
	if (yych <= '"') goto yy451;
	goto yy453;
yy450:
	YYCURSOR = YYMARKER;
	goto yy441;
yy451:
	++YYCURSOR;
#line 701 "../src/parse/lex.re"
	{
					escape (in.file_name, std::string (tok + 1, tok_len () - 2)); // -2 to omit quotes
			  		goto sourceline; 
				}
#line 2957 "src/parse/lex.cc"
yy453:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy450;
	goto yy448;
}
#line 720 "../src/parse/lex.re"

}

} // end namespace re2c
