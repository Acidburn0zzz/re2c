/* Generated by re2c 0.16 on Thu May  5 17:05:17 2016 */
#line 1 "../src/parse/lex.re"
#include "src/util/c99_stdint.h"
#include <stddef.h>
#include <string.h>
#include <algorithm>
#include <limits>
#include <string>

#include "src/codegen/output.h"
#include "src/conf/opt.h"
#include "src/conf/warn.h"
#include "src/globals.h"
#include "src/ir/regexp/encoding/enc.h"
#include "src/ir/regexp/regexp.h"
#include "src/parse/code.h"
#include "src/parse/extop.h"
#include "src/parse/input.h"
#include "src/parse/scanner.h"
#include "src/parse/parser.h" // needed by "y.tab.h"
#include "src/parse/unescape.h"
#include "src/util/range.h"
#include "src/util/s_to_n32_unsafe.h"
#include "y.tab.h"

extern YYSTYPE yylval;

#define	YYCTYPE		unsigned char
#define	YYCURSOR	cur
#define	YYLIMIT		lim
#define	YYMARKER	ptr
#define	YYCTXMARKER ctx
#define	YYFILL(n)	{ fill (n); }

namespace re2c
{

// source code is in ASCII: pointers have type 'char *'
// but re2c makes an implicit assumption that YYCTYPE is unsigned
// when it generates comparisons
#line 41 "../src/parse/lex.re"


#line 62 "../src/parse/lex.re"


Scanner::ParseMode Scanner::echo()
{
	if (eof && cur == eof) // Catch EOF
	{
		return Stop;
	}

	tok = cur;
echo:
	const char *start = cur;


#line 60 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 16) YYFILL(16);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 153 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		if (cur == eof) {
			return Stop;
		}
	}
#line 127 "src/parse/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 173 "../src/parse/lex.re"
	{ goto echo; }
#line 133 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 167 "../src/parse/lex.re"
	{
		cline++;
		pos = cur;
		goto echo;
	}
#line 148 "src/parse/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy7;
	} else {
		goto yy5;
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 76 "../src/parse/lex.re"
	{
		if (opts->rFlag) {
			fatal("found standard 're2c' block while using -r flag");
		}
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		return Parse;
	}
#line 201 "src/parse/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'c':	goto yy22;
	case 'g':	goto yy23;
	case 'i':	goto yy24;
	case 'm':	goto yy25;
	case 'r':	goto yy26;
	case 't':	goto yy27;
	case 'u':	goto yy28;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy29;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy30;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy31;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy32;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy33;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy34;
	if (yych == 'u') goto yy35;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy36;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy37;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy38;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy39;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy40;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy41;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy42;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy43;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy44;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy45;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy46;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy48;
	if (yych <= '9') goto yy13;
	goto yy48;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy49;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy50;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy51;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy52;
	goto yy13;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy53;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy54;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy55;
	goto yy13;
yy47:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy48:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy47;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy47;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			YYCTXMARKER = YYCURSOR;
			goto yy56;
		}
		goto yy13;
	}
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy58;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy59;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy60;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy61;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy62;
	goto yy13;
yy54:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy63;
	goto yy13;
yy55:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy64;
	goto yy13;
yy56:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy56;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy65;
		if (yych <= '\n') goto yy67;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy69;
		if (yych == ' ') goto yy65;
		goto yy13;
	}
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy70;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy71;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy72;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy73;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy74;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy75;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy76;
	goto yy13;
yy65:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy65;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy65;
		if (yych == '"') goto yy77;
		goto yy13;
	}
yy67:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 162 "../src/parse/lex.re"
	{
		set_sourceline();
		goto echo;
	}
#line 438 "src/parse/lex.cc"
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy67;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy79;
	goto yy13;
yy71:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy80;
	goto yy13;
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy81;
	goto yy13;
yy73:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy82;
	goto yy13;
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy83;
	goto yy13;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy84;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy85;
	goto yy13;
yy77:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy77;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy86;
	goto yy87;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy88;
	goto yy13;
yy80:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy89;
	goto yy13;
yy81:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy90;
	goto yy13;
yy82:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy91;
	goto yy13;
yy83:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy93;
	goto yy13;
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy94;
	goto yy13;
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy95;
	goto yy13;
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy67;
	if (yych == '\r') goto yy69;
	goto yy13;
yy87:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy13;
	goto yy77;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy97;
	goto yy13;
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy98;
	goto yy13;
yy90:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy99;
	goto yy13;
yy91:
	++YYCURSOR;
#line 116 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start)
				.wdelay_yymaxfill();
		}
		lex_end_of_comment();
		goto echo;
	}
#line 543 "src/parse/lex.cc"
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy100;
	goto yy13;
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy101;
	goto yy13;
yy95:
	++YYCURSOR;
#line 97 "../src/parse/lex.re"
	{
		if (!opts->rFlag) {
			fatal("found 'use:re2c' block without -r flag");
		}
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		reuse();
		return Reuse;
	}
#line 565 "src/parse/lex.cc"
yy97:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy102;
	goto yy13;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy103;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy104;
	goto yy13;
yy100:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy105;
	goto yy13;
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy107;
	goto yy13;
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy109;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy110;
	goto yy13;
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy111;
	goto yy13;
yy105:
	++YYCURSOR;
#line 86 "../src/parse/lex.re"
	{
		if (!opts->rFlag) {
			fatal("found 'rules:re2c' block without -r flag");
		}
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		opts.reset_mapCodeName ();
		return Rules;
	}
#line 611 "src/parse/lex.cc"
yy107:
	++YYCURSOR;
#line 134 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start)
				.wdelay_line_info()
				.wdelay_types()
				.wline_info(cline, get_fname().c_str());
		}
		lex_end_of_comment();
		goto echo;
	}
#line 625 "src/parse/lex.cc"
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy113;
	goto yy13;
yy110:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy114;
	goto yy13;
yy111:
	++YYCURSOR;
#line 108 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		lex_end_of_comment();
		goto echo;
	}
#line 644 "src/parse/lex.cc"
yy113:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy115;
	goto yy13;
yy114:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy117;
	goto yy13;
yy115:
	++YYCURSOR;
#line 145 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		lex_contexts();
		goto echo;
	}
#line 663 "src/parse/lex.cc"
yy117:
	++YYCURSOR;
#line 125 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start)
				.wdelay_state_goto(opts->topIndent);
		}
		lex_end_of_comment();
		goto echo;
	}
#line 675 "src/parse/lex.cc"
}
#line 174 "../src/parse/lex.re"

}

void Scanner::lex_end_of_comment()
{
	uint32_t ignored = 0;
	for (;;) {
#line 685 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy121;
		if (yych == '\n') goto yy125;
		goto yy123;
	} else {
		if (yych <= '\r') goto yy127;
		if (yych == '*') goto yy128;
		goto yy123;
	}
yy121:
	++YYCURSOR;
#line 181 "../src/parse/lex.re"
	{ fatal("expected end of block"); }
#line 703 "src/parse/lex.cc"
yy123:
	++YYCURSOR;
yy124:
#line 183 "../src/parse/lex.re"
	{ continue; }
#line 709 "src/parse/lex.cc"
yy125:
	++YYCURSOR;
#line 184 "../src/parse/lex.re"
	{ ++ignored; continue; }
#line 714 "src/parse/lex.cc"
yy127:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy125;
	goto yy124;
yy128:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy124;
	++YYCURSOR;
#line 185 "../src/parse/lex.re"
	{
			if (ignored > 0) {
				cline += ignored;
				out.ws("\n").wline_info(cline, get_fname().c_str());
			}
			tok = pos = cur;
			return;
		}
#line 732 "src/parse/lex.cc"
}
#line 193 "../src/parse/lex.re"
}
}

void Scanner::lex_contexts()
{
	ConfContexts conf;
	for (;;) {
#line 742 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy135;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy138;
		} else {
			if (yych == '\r') goto yy140;
		}
	} else {
		if (yych <= 'l') {
			if (yych <= '*') goto yy141;
			if (yych >= 'l') goto yy142;
		} else {
			if (yych == 's') goto yy143;
		}
	}
	++YYCURSOR;
yy134:
#line 200 "../src/parse/lex.re"
	{ fatal("unrecognized configuration"); }
#line 802 "src/parse/lex.cc"
yy135:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy135;
	}
#line 205 "../src/parse/lex.re"
	{ continue; }
#line 812 "src/parse/lex.cc"
yy138:
	++YYCURSOR;
#line 206 "../src/parse/lex.re"
	{ ++cline; continue; }
#line 817 "src/parse/lex.cc"
yy140:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy138;
	goto yy134;
yy141:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy144;
	goto yy134;
yy142:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'i') goto yy146;
	goto yy134;
yy143:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy148;
	goto yy134;
yy144:
	++YYCURSOR;
#line 207 "../src/parse/lex.re"
	{
			if (opts->target == opt_t::CODE) {
				out.wdelay_contexts(opts->topIndent,
					new ConfContexts(conf));
			}
			tok = pos = cur;
			return;
		}
#line 845 "src/parse/lex.cc"
yy146:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy149;
yy147:
	YYCURSOR = YYMARKER;
	goto yy134;
yy148:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy150;
	goto yy147;
yy149:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy152;
	goto yy147;
yy150:
	++YYCURSOR;
#line 203 "../src/parse/lex.re"
	{ conf.sep  = lex_conf_string(); continue; }
#line 864 "src/parse/lex.cc"
yy152:
	++YYCURSOR;
#line 202 "../src/parse/lex.re"
	{ conf.line = lex_conf_string(); continue; }
#line 869 "src/parse/lex.cc"
}
#line 215 "../src/parse/lex.re"
}
}

int Scanner::scan()
{
	uint32_t depth;

scan:
	tchar = cur - pos;
	tline = cline;
	tok = cur;
	switch (lexer_state)
	{
		case LEX_NORMAL:    goto start;
		case LEX_FLEX_NAME: goto flex_name;
	}

start:

#line 891 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 6) YYFILL(6);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy158;
	}
	if (yych <= '9') {
		if (yych <= '&') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy156;
				if (yych <= '\n') goto yy161;
				if (yych >= '\r') goto yy163;
			} else {
				if (yych <= '"') {
					if (yych >= '"') goto yy164;
				} else {
					if (yych == '%') goto yy166;
				}
			}
		} else {
			if (yych <= '+') {
				if (yych <= '\'') goto yy167;
				if (yych <= ')') goto yy169;
				if (yych <= '*') goto yy171;
				goto yy173;
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy169;
				} else {
					if (yych <= '.') goto yy175;
					if (yych <= '/') goto yy177;
					goto yy178;
				}
			}
		}
	} else {
		if (yych <= '\\') {
			if (yych <= '>') {
				if (yych <= ':') goto yy179;
				if (yych == '<') goto yy180;
				goto yy169;
			} else {
				if (yych <= '@') {
					if (yych <= '?') goto yy173;
					goto yy181;
				} else {
					if (yych <= 'Z') goto yy178;
					if (yych <= '[') goto yy182;
					goto yy169;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych == '_') goto yy178;
				if (yych >= 'a') goto yy178;
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy184;
					goto yy178;
				} else {
					if (yych <= '{') goto yy185;
					if (yych <= '|') goto yy169;
				}
			}
		}
	}
yy156:
	++YYCURSOR;
yy157:
#line 397 "../src/parse/lex.re"
	{
					fatalf("unexpected character: '%c'", *tok);
					goto scan;
				}
#line 1002 "src/parse/lex.cc"
yy158:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy158;
	}
#line 381 "../src/parse/lex.re"
	{
					goto scan;
				}
#line 1014 "src/parse/lex.cc"
yy161:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy187;
	} else {
		if (yych <= ' ') goto yy187;
		if (yych == '#') goto yy190;
	}
yy162:
#line 390 "../src/parse/lex.re"
	{
					if (cur == eof) return 0;
					pos = cur;
					cline++;
					goto scan;
				}
#line 1032 "src/parse/lex.cc"
yy163:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy161;
	goto yy157;
yy164:
	++YYCURSOR;
#line 264 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"',  opts->bCaseInsensitive ||  opts->bCaseInverted); return TOKEN_REGEXP; }
#line 1041 "src/parse/lex.cc"
yy166:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy192;
	goto yy157;
yy167:
	++YYCURSOR;
#line 263 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\'', opts->bCaseInsensitive || !opts->bCaseInverted); return TOKEN_REGEXP; }
#line 1050 "src/parse/lex.cc"
yy169:
	++YYCURSOR;
yy170:
#line 284 "../src/parse/lex.re"
	{
					return *tok;
				}
#line 1058 "src/parse/lex.cc"
yy171:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '/') goto yy192;
#line 288 "../src/parse/lex.re"
	{
					yylval.op = *tok;
					return TOKEN_STAR;
				}
#line 1067 "src/parse/lex.cc"
yy173:
	++YYCURSOR;
#line 292 "../src/parse/lex.re"
	{
					yylval.op = *tok;
					return TOKEN_CLOSE;
				}
#line 1075 "src/parse/lex.cc"
yy175:
	++YYCURSOR;
#line 376 "../src/parse/lex.re"
	{
					yylval.regexp = mkDot();
					return TOKEN_REGEXP;
				}
#line 1083 "src/parse/lex.cc"
yy177:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy194;
	if (yych == '/') goto yy196;
	goto yy170;
yy178:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy204;
yy179:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy205;
	goto yy157;
yy180:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '!') goto yy207;
	if (yych == '>') goto yy209;
	goto yy170;
yy181:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy157;
		if (yych <= '9') goto yy210;
		if (yych <= '@') goto yy157;
		goto yy210;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy157;
			goto yy210;
		} else {
			if (yych <= '`') goto yy157;
			if (yych <= 'z') goto yy210;
			goto yy157;
		}
	}
yy182:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '^') goto yy213;
#line 265 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1124 "src/parse/lex.cc"
yy184:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy215;
	goto yy204;
yy185:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy218;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy216;
		if (yych >= 'A') goto yy220;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy220;
		} else {
			if (yych <= '`') goto yy186;
			if (yych <= 'z') goto yy220;
		}
	}
yy186:
#line 234 "../src/parse/lex.re"
	{
					depth = 1;
					goto code;
				}
#line 1152 "src/parse/lex.cc"
yy187:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy187;
	} else {
		if (yych <= ' ') goto yy187;
		if (yych == '#') goto yy190;
	}
yy189:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy162;
		} else {
			goto yy170;
		}
	} else {
		if (yyaccept == 2) {
			goto yy186;
		} else {
			goto yy217;
		}
	}
yy190:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy190;
		goto yy189;
	} else {
		if (yych <= ' ') goto yy190;
		if (yych == 'l') goto yy222;
		goto yy189;
	}
yy192:
	++YYCURSOR;
#line 258 "../src/parse/lex.re"
	{
					tok = cur;
					return 0;
				}
#line 1197 "src/parse/lex.cc"
yy194:
	++YYCURSOR;
#line 252 "../src/parse/lex.re"
	{
					depth = 1;
					goto comment;
				}
#line 1205 "src/parse/lex.cc"
yy196:
	++YYCURSOR;
#line 249 "../src/parse/lex.re"
	{
				goto nextLine;
			}
#line 1212 "src/parse/lex.cc"
yy198:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 360 "../src/parse/lex.re"
	{
					if (!opts->FFlag) {
						yylval.str = new std::string (tok, tok_len());
						return TOKEN_ID;
					} else {
						const RegExp *r = NULL;
						const bool casing = opts->bCaseInsensitive || opts->bCaseInverted;
						for (char *s = tok; s < cur; ++s) {
							const uint32_t c = static_cast<uint8_t>(*s);
							r = doCat(r, casing ? ichr(c) : schr(c));
						}
						yylval.regexp = r ? r : RegExp::nil();
						return TOKEN_REGEXP;
					}
				}
#line 1232 "src/parse/lex.cc"
yy200:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy226;
yy201:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 355 "../src/parse/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					return TOKEN_ID;
				}
#line 1244 "src/parse/lex.cc"
yy203:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
yy204:
	if (yybm[0+yych] & 32) {
		goto yy203;
	}
	if (yych <= ' ') {
		if (yych == '\t') {
			YYCTXMARKER = YYCURSOR;
			goto yy200;
		}
		if (yych <= 0x1F) goto yy198;
		YYCTXMARKER = YYCURSOR;
		goto yy200;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy198;
			YYCTXMARKER = YYCURSOR;
			goto yy201;
		} else {
			if (yych <= '<') goto yy198;
			if (yych <= '>') {
				YYCTXMARKER = YYCURSOR;
				goto yy201;
			}
			goto yy198;
		}
	}
yy205:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '>') goto yy227;
#line 243 "../src/parse/lex.re"
	{
					tok += 2; /* skip ":=" */
					depth = 0;
					goto code;
				}
#line 1284 "src/parse/lex.cc"
yy207:
	++YYCURSOR;
#line 271 "../src/parse/lex.re"
	{
					return TOKEN_SETUP;
				}
#line 1291 "src/parse/lex.cc"
yy209:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '9') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy189;
			YYCTXMARKER = YYCURSOR;
			goto yy229;
		} else {
			if (yych == ' ') {
				YYCTXMARKER = YYCURSOR;
				goto yy229;
			}
			goto yy189;
		}
	} else {
		if (yych <= '=') {
			if (yych <= ':') {
				YYCTXMARKER = YYCURSOR;
				goto yy231;
			}
			if (yych <= '<') goto yy189;
			YYCTXMARKER = YYCURSOR;
			goto yy232;
		} else {
			if (yych == '{') {
				YYCTXMARKER = YYCURSOR;
				goto yy233;
			}
			goto yy189;
		}
	}
yy210:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy212;
		if (yych <= '9') goto yy210;
		if (yych >= 'A') goto yy210;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy210;
		} else {
			if (yych <= '`') goto yy212;
			if (yych <= 'z') goto yy210;
		}
	}
yy212:
#line 275 "../src/parse/lex.re"
	{
		if (!opts->contexts) {
			fatal("tags are only allowed with '-T, --tags' option");
		}
		const std::string *name = new std::string(tok + 1, tok_len() - 1);
		yylval.regexp = RegExp::ctx(name);
		return TOKEN_REGEXP;
	}
#line 1349 "src/parse/lex.cc"
yy213:
	++YYCURSOR;
#line 266 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1354 "src/parse/lex.cc"
yy215:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy235;
	goto yy204;
yy216:
	++YYCURSOR;
yy217:
#line 328 "../src/parse/lex.re"
	{
					fatal("illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
				}
#line 1366 "src/parse/lex.cc"
yy218:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy218;
	}
	if (yych <= '^') {
		if (yych <= ',') {
			if (yych <= '+') goto yy189;
			goto yy236;
		} else {
			if (yych <= '@') goto yy189;
			if (yych >= '[') goto yy189;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy189;
		} else {
			if (yych == '}') goto yy237;
			goto yy189;
		}
	}
yy220:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy189;
			goto yy220;
		} else {
			if (yych <= '@') goto yy189;
			if (yych <= 'Z') goto yy220;
			goto yy189;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy189;
			goto yy220;
		} else {
			if (yych == '}') goto yy239;
			goto yy189;
		}
	}
yy222:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy241;
	goto yy189;
yy223:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 342 "../src/parse/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					if (opts->FFlag)
					{
						lexer_state = LEX_FLEX_NAME;
						return TOKEN_FID;
					}
					else
					{
						return TOKEN_ID;
					}
				}
#line 1432 "src/parse/lex.cc"
yy225:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy226:
	if (yych <= ' ') {
		if (yych == '\t') goto yy225;
		if (yych <= 0x1F) goto yy223;
		goto yy225;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy223;
			goto yy201;
		} else {
			if (yych <= '<') goto yy223;
			if (yych <= '>') goto yy201;
			goto yy223;
		}
	}
yy227:
	++YYCURSOR;
	YYCURSOR -= 2;
#line 239 "../src/parse/lex.re"
	{
					return *tok;
				}
#line 1459 "src/parse/lex.cc"
yy229:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '9') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy189;
			goto yy229;
		} else {
			if (yych == ' ') goto yy229;
			goto yy189;
		}
	} else {
		if (yych <= '=') {
			if (yych <= ':') goto yy231;
			if (yych <= '<') goto yy189;
			goto yy232;
		} else {
			if (yych == '{') goto yy233;
			goto yy189;
		}
	}
yy231:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy233;
	goto yy189;
yy232:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '>') goto yy189;
yy233:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 268 "../src/parse/lex.re"
	{
					return TOKEN_NOCOND;
				}
#line 1496 "src/parse/lex.cc"
yy235:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy242;
	goto yy204;
yy236:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy217;
	if (yych <= '9') goto yy243;
	if (yych == '}') goto yy245;
	goto yy217;
yy237:
	++YYCURSOR;
#line 297 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.extop.min))
					{
						fatal ("repetition count overflow");
					}
					yylval.extop.max = yylval.extop.min;
					return TOKEN_CLOSESIZE;
				}
#line 1519 "src/parse/lex.cc"
yy239:
	++YYCURSOR;
#line 332 "../src/parse/lex.re"
	{
					if (!opts->FFlag) {
						fatal("curly braces for names only allowed with -F switch");
					}
					yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
					return TOKEN_ID;
				}
#line 1530 "src/parse/lex.cc"
yy241:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy247;
	goto yy189;
yy242:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy248;
	goto yy204;
yy243:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy189;
	if (yych <= '9') goto yy243;
	if (yych == '}') goto yy250;
	goto yy189;
yy245:
	++YYCURSOR;
#line 319 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					yylval.extop.max = std::numeric_limits<uint32_t>::max();
					return TOKEN_CLOSESIZE;
				}
#line 1558 "src/parse/lex.cc"
yy247:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy252;
	goto yy189;
yy248:
	++YYCURSOR;
#line 340 "../src/parse/lex.re"
	{ lex_conf (); return TOKEN_CONF; }
#line 1567 "src/parse/lex.cc"
yy250:
	++YYCURSOR;
#line 306 "../src/parse/lex.re"
	{
					const char * p = strchr (tok, ',');
					if (!s_to_u32_unsafe (tok + 1, p, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.extop.max))
					{
						fatal ("repetition upper bound overflow");
					}
					return TOKEN_CLOSESIZE;
				}
#line 1583 "src/parse/lex.cc"
yy252:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy254;
	if (yych <= '9') goto yy189;
	goto yy254;
yy253:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy254:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy253;
		goto yy189;
	} else {
		if (yych <= ' ') goto yy253;
		if (yych <= '0') goto yy189;
		if (yych >= ':') goto yy189;
		YYCTXMARKER = YYCURSOR;
	}
yy255:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy189;
		} else {
			if (yych <= '\n') goto yy259;
			if (yych <= '\f') goto yy189;
			goto yy261;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy189;
		} else {
			if (yych <= '/') goto yy189;
			if (yych <= '9') goto yy255;
			goto yy189;
		}
	}
yy257:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy257;
		goto yy189;
	} else {
		if (yych <= ' ') goto yy257;
		if (yych == '"') goto yy262;
		goto yy189;
	}
yy259:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 385 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto scan;
				}
#line 1644 "src/parse/lex.cc"
yy261:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy259;
	goto yy189;
yy262:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy262;
	}
	if (yych <= '\n') goto yy189;
	if (yych >= '#') goto yy265;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy259;
	if (yych == '\r') goto yy261;
	goto yy189;
yy265:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy189;
	goto yy262;
}
#line 401 "../src/parse/lex.re"


flex_name:

#line 1674 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy270;
	if (yych == '\r') goto yy272;
	++YYCURSOR;
yy269:
#line 412 "../src/parse/lex.re"
	{
		YYCURSOR = tok;
		goto start;
	}
#line 1688 "src/parse/lex.cc"
yy270:
	++YYCURSOR;
#line 406 "../src/parse/lex.re"
	{
		YYCURSOR = tok;
		lexer_state = LEX_NORMAL;
		return TOKEN_FID_END;
	}
#line 1697 "src/parse/lex.cc"
yy272:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '\n') goto yy270;
	goto yy269;
}
#line 416 "../src/parse/lex.re"


code:

#line 1708 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96, 112,   0,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		112,  96,  64,  96,  96,  96,  96,  32, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,   0,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy275;
			if (yych <= '\t') goto yy277;
			goto yy279;
		} else {
			if (yych == '"') goto yy281;
			goto yy277;
		}
	} else {
		if (yych <= '{') {
			if (yych <= '\'') goto yy282;
			if (yych <= 'z') goto yy277;
			goto yy283;
		} else {
			if (yych == '}') goto yy285;
			goto yy277;
		}
	}
yy275:
	++YYCURSOR;
#line 479 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						if (depth)
						{
							fatal("missing '}'");
						}
						return 0;
					}
					goto code;
				}
#line 1781 "src/parse/lex.cc"
yy277:
	++YYCURSOR;
yy278:
#line 493 "../src/parse/lex.re"
	{
					goto code;
				}
#line 1789 "src/parse/lex.cc"
yy279:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy287;
		} else {
			if (yych <= '\n') goto yy289;
			if (yych >= '\r') goto yy289;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy287;
		} else {
			if (yych == '#') goto yy290;
		}
	}
yy280:
#line 460 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						tok += strspn(tok, " \t\r\n");
						while (cur > tok && strchr(" \t\r\n", cur[-1]))
						{
							--cur;
						}
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return TOKEN_CODE;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1828 "src/parse/lex.cc"
yy281:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy278;
	goto yy294;
yy282:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy278;
	goto yy299;
yy283:
	++YYCURSOR;
#line 432 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else
					{
						++depth;
					}
					goto code;
				}
#line 1853 "src/parse/lex.cc"
yy285:
	++YYCURSOR;
#line 420 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else if (--depth == 0)
					{
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return TOKEN_CODE;
					}
					goto code;
				}
#line 1869 "src/parse/lex.cc"
yy287:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy301;
	} else {
		if (yych <= ' ') goto yy301;
		if (yych == '#') goto yy290;
	}
yy288:
	YYCURSOR -= 1;
#line 447 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						goto code;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1895 "src/parse/lex.cc"
yy289:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy288;
yy290:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy290;
	}
	if (yych == 'l') goto yy303;
yy292:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy280;
		} else {
			goto yy278;
		}
	} else {
		goto yy288;
	}
yy293:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy294:
	if (yybm[0+yych] & 32) {
		goto yy293;
	}
	if (yych <= '\n') goto yy292;
	if (yych >= '#') goto yy297;
yy295:
	++YYCURSOR;
#line 490 "../src/parse/lex.re"
	{
					goto code;
				}
#line 1934 "src/parse/lex.cc"
yy297:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy292;
	goto yy293;
yy298:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy299:
	if (yybm[0+yych] & 64) {
		goto yy298;
	}
	if (yych <= '\n') goto yy292;
	if (yych <= '\'') goto yy295;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy292;
	goto yy298;
yy301:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy301;
		goto yy292;
	} else {
		if (yych <= ' ') goto yy301;
		if (yych == '#') goto yy290;
		goto yy292;
	}
yy303:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy292;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy292;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy292;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy308;
	if (yych <= '9') goto yy292;
	goto yy308;
yy307:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy308:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy307;
		goto yy292;
	} else {
		if (yych <= ' ') goto yy307;
		if (yych <= '0') goto yy292;
		if (yych >= ':') goto yy292;
		YYCTXMARKER = YYCURSOR;
	}
yy309:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy309;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy292;
		if (yych <= '\t') goto yy311;
		if (yych <= '\n') goto yy313;
		goto yy292;
	} else {
		if (yych <= '\r') goto yy315;
		if (yych != ' ') goto yy292;
	}
yy311:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy311;
		goto yy292;
	} else {
		if (yych <= ' ') goto yy311;
		if (yych == '"') goto yy316;
		goto yy292;
	}
yy313:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 443 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto code;
				}
#line 2029 "src/parse/lex.cc"
yy315:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy313;
	goto yy292;
yy316:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy292;
		goto yy316;
	} else {
		if (yych <= '"') goto yy318;
		if (yych == '\\') goto yy319;
		goto yy316;
	}
yy318:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy313;
	if (yych == '\r') goto yy315;
	goto yy292;
yy319:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy292;
	goto yy316;
}
#line 496 "../src/parse/lex.re"


comment:

#line 2063 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ')') {
		if (yych == '\n') goto yy324;
	} else {
		if (yych <= '*') goto yy326;
		if (yych == '/') goto yy327;
	}
	++YYCURSOR;
yy323:
#line 528 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					goto comment;
				}
#line 2118 "src/parse/lex.cc"
yy324:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy328;
	}
	if (yych == '#') goto yy331;
yy325:
#line 519 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					tok = pos = cur;
					cline++;
					goto comment;
				}
#line 2136 "src/parse/lex.cc"
yy326:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy333;
	goto yy323;
yy327:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy335;
	goto yy323;
yy328:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy328;
	}
	if (yych == '#') goto yy331;
yy330:
	YYCURSOR = YYMARKER;
	goto yy325;
yy331:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy331;
		goto yy330;
	} else {
		if (yych <= ' ') goto yy331;
		if (yych == 'l') goto yy337;
		goto yy330;
	}
yy333:
	++YYCURSOR;
#line 500 "../src/parse/lex.re"
	{
					if (--depth == 0)
					{
						goto scan;
					}
					else
					{
						goto comment;
					}
				}
#line 2181 "src/parse/lex.cc"
yy335:
	++YYCURSOR;
#line 510 "../src/parse/lex.re"
	{
					++depth;
					fatal("ambiguous /* found");
					goto comment;
				}
#line 2190 "src/parse/lex.cc"
yy337:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy330;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy330;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy330;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy342;
	if (yych <= '9') goto yy330;
	goto yy342;
yy341:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy342:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy341;
		goto yy330;
	} else {
		if (yych <= ' ') goto yy341;
		if (yych <= '0') goto yy330;
		if (yych >= ':') goto yy330;
		YYCTXMARKER = YYCURSOR;
	}
yy343:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy343;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy330;
		if (yych <= '\t') goto yy345;
		if (yych <= '\n') goto yy347;
		goto yy330;
	} else {
		if (yych <= '\r') goto yy349;
		if (yych != ' ') goto yy330;
	}
yy345:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy345;
		goto yy330;
	} else {
		if (yych <= ' ') goto yy345;
		if (yych == '"') goto yy350;
		goto yy330;
	}
yy347:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 515 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto comment;
				}
#line 2252 "src/parse/lex.cc"
yy349:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy347;
	goto yy330;
yy350:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy350;
	}
	if (yych <= '\n') goto yy330;
	if (yych >= '#') goto yy353;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy347;
	if (yych == '\r') goto yy349;
	goto yy330;
yy353:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy330;
	goto yy350;
}
#line 535 "../src/parse/lex.re"


nextLine:

#line 2282 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy358;
	++YYCURSOR;
#line 546 "../src/parse/lex.re"
	{  if(cur == eof) {
                  return 0;
               }
               goto nextLine;
            }
#line 2295 "src/parse/lex.cc"
yy358:
	++YYCURSOR;
#line 539 "../src/parse/lex.re"
	{ if(cur == eof) {
                  return 0;
               }
               tok = pos = cur;
               cline++;
               goto scan;
            }
#line 2306 "src/parse/lex.cc"
}
#line 551 "../src/parse/lex.re"

}

static void escape (std::string & dest, const std::string & src)
{
	dest = src;
	size_t l = dest.length();
	for (size_t p = 0; p < l; ++p)
	{
		if (dest[p] == '\\')
		{
			dest.insert(++p, "\\");
			++l;
		}
	}
}

const RegExp *Scanner::lex_cls(bool neg)
{
	Range *r = NULL, *s;
	uint32_t u, l;
fst:
	
#line 2332 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy363;
#line 575 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 2340 "src/parse/lex.cc"
yy363:
	++YYCURSOR;
#line 574 "../src/parse/lex.re"
	{ goto end; }
#line 2345 "src/parse/lex.cc"
}
#line 576 "../src/parse/lex.re"

snd:
	
#line 2351 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy368;
yy367:
#line 579 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 2360 "src/parse/lex.cc"
yy368:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy370;
	YYCURSOR = YYMARKER;
	goto yy367;
yy370:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 580 "../src/parse/lex.re"
	{
			u = lex_cls_chr();
			if (l > u) {
				warn.swapped_range(get_line(), l, u);
				std::swap(l, u);
			}
			goto add;
		}
#line 2378 "src/parse/lex.cc"
}
#line 588 "../src/parse/lex.re"

add:
	if (!(s = opts->encoding.encodeRange(l, u))) {
		fatalf ("Bad code point range: '0x%X - 0x%X'", l, u);
	}
	r = Range::add(r, s);
	goto fst;
end:
	if (neg) {
		r = Range::sub(opts->encoding.fullRange(), r);
	}
	return cls(r);
}

uint32_t Scanner::lex_cls_chr()
{
	tok = cur;
	
#line 2399 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy376;
	if (yych == '\\') goto yy378;
	++YYCURSOR;
#line 611 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(tok[0]); }
#line 2410 "src/parse/lex.cc"
yy376:
	++YYCURSOR;
#line 606 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error"); }
#line 2415 "src/parse/lex.cc"
yy378:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '`') {
		if (yych <= '7') {
			if (yych <= ',') {
				if (yych != '\n') goto yy380;
			} else {
				if (yych <= '-') goto yy382;
				if (yych <= '/') goto yy380;
				if (yych <= '3') goto yy384;
				goto yy386;
			}
		} else {
			if (yych <= 'X') {
				if (yych == 'U') goto yy387;
				if (yych <= 'W') goto yy380;
				goto yy389;
			} else {
				if (yych <= '[') goto yy380;
				if (yych <= '\\') goto yy390;
				if (yych <= ']') goto yy392;
				goto yy380;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy394;
				if (yych <= 'b') goto yy396;
				goto yy380;
			} else {
				if (yych <= 'f') goto yy398;
				if (yych == 'n') goto yy400;
				goto yy380;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy402;
				if (yych <= 's') goto yy380;
				if (yych <= 't') goto yy404;
				goto yy389;
			} else {
				if (yych <= 'v') goto yy406;
				if (yych == 'x') goto yy408;
				goto yy380;
			}
		}
	}
#line 609 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in escape sequence"); }
#line 2466 "src/parse/lex.cc"
yy380:
	++YYCURSOR;
#line 624 "../src/parse/lex.re"
	{
			warn.useless_escape(tline, tok - pos, tok[1]);
			return static_cast<uint8_t>(tok[1]);
		}
#line 2474 "src/parse/lex.cc"
yy382:
	++YYCURSOR;
#line 622 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 2479 "src/parse/lex.cc"
yy384:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy385;
	if (yych <= '7') goto yy409;
yy385:
#line 608 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in octal escape sequence"); }
#line 2488 "src/parse/lex.cc"
yy386:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy385;
yy387:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy388;
		if (yych <= '9') goto yy411;
	} else {
		if (yych <= 'F') goto yy411;
		if (yych <= '`') goto yy388;
		if (yych <= 'f') goto yy411;
	}
yy388:
#line 607 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2506 "src/parse/lex.cc"
yy389:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy388;
		if (yych <= '9') goto yy412;
		goto yy388;
	} else {
		if (yych <= 'F') goto yy412;
		if (yych <= '`') goto yy388;
		if (yych <= 'f') goto yy412;
		goto yy388;
	}
yy390:
	++YYCURSOR;
#line 621 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2524 "src/parse/lex.cc"
yy392:
	++YYCURSOR;
#line 623 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 2529 "src/parse/lex.cc"
yy394:
	++YYCURSOR;
#line 614 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2534 "src/parse/lex.cc"
yy396:
	++YYCURSOR;
#line 615 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2539 "src/parse/lex.cc"
yy398:
	++YYCURSOR;
#line 616 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2544 "src/parse/lex.cc"
yy400:
	++YYCURSOR;
#line 617 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2549 "src/parse/lex.cc"
yy402:
	++YYCURSOR;
#line 618 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2554 "src/parse/lex.cc"
yy404:
	++YYCURSOR;
#line 619 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2559 "src/parse/lex.cc"
yy406:
	++YYCURSOR;
#line 620 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2564 "src/parse/lex.cc"
yy408:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy388;
		if (yych <= '9') goto yy413;
		goto yy388;
	} else {
		if (yych <= 'F') goto yy413;
		if (yych <= '`') goto yy388;
		if (yych <= 'f') goto yy413;
		goto yy388;
	}
yy409:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy410;
	if (yych <= '7') goto yy414;
yy410:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy385;
	} else {
		goto yy388;
	}
yy411:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy410;
		if (yych <= '9') goto yy416;
		goto yy410;
	} else {
		if (yych <= 'F') goto yy416;
		if (yych <= '`') goto yy410;
		if (yych <= 'f') goto yy416;
		goto yy410;
	}
yy412:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy410;
		if (yych <= '9') goto yy417;
		goto yy410;
	} else {
		if (yych <= 'F') goto yy417;
		if (yych <= '`') goto yy410;
		if (yych <= 'f') goto yy417;
		goto yy410;
	}
yy413:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy410;
		if (yych <= '9') goto yy418;
		goto yy410;
	} else {
		if (yych <= 'F') goto yy418;
		if (yych <= '`') goto yy410;
		if (yych <= 'f') goto yy418;
		goto yy410;
	}
yy414:
	++YYCURSOR;
#line 613 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2629 "src/parse/lex.cc"
yy416:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy410;
		if (yych <= '9') goto yy420;
		goto yy410;
	} else {
		if (yych <= 'F') goto yy420;
		if (yych <= '`') goto yy410;
		if (yych <= 'f') goto yy420;
		goto yy410;
	}
yy417:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy410;
		if (yych <= '9') goto yy413;
		goto yy410;
	} else {
		if (yych <= 'F') goto yy413;
		if (yych <= '`') goto yy410;
		if (yych <= 'f') goto yy413;
		goto yy410;
	}
yy418:
	++YYCURSOR;
#line 612 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2658 "src/parse/lex.cc"
yy420:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy410;
		if (yych >= ':') goto yy410;
	} else {
		if (yych <= 'F') goto yy421;
		if (yych <= '`') goto yy410;
		if (yych >= 'g') goto yy410;
	}
yy421:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '@') {
		if (yych <= '/') goto yy410;
		if (yych <= '9') goto yy412;
		goto yy410;
	} else {
		if (yych <= 'F') goto yy412;
		if (yych <= '`') goto yy410;
		if (yych <= 'f') goto yy412;
		goto yy410;
	}
}
#line 628 "../src/parse/lex.re"

}

uint32_t Scanner::lex_str_chr(char quote, bool &end)
{
	end = false;
	tok = cur;
	
#line 2691 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy426;
	if (yych == '\\') goto yy428;
	++YYCURSOR;
#line 641 "../src/parse/lex.re"
	{
			end = tok[0] == quote;
			return static_cast<uint8_t>(tok[0]);
		}
#line 2705 "src/parse/lex.cc"
yy426:
	++YYCURSOR;
#line 636 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error"); }
#line 2710 "src/parse/lex.cc"
yy428:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= 'a') {
		if (yych <= 'T') {
			if (yych <= '/') {
				if (yych != '\n') goto yy430;
			} else {
				if (yych <= '3') goto yy432;
				if (yych <= '7') goto yy434;
				goto yy430;
			}
		} else {
			if (yych <= 'X') {
				if (yych <= 'U') goto yy435;
				if (yych <= 'W') goto yy430;
				goto yy437;
			} else {
				if (yych == '\\') goto yy438;
				if (yych <= '`') goto yy430;
				goto yy440;
			}
		}
	} else {
		if (yych <= 'r') {
			if (yych <= 'f') {
				if (yych <= 'b') goto yy442;
				if (yych <= 'e') goto yy430;
				goto yy444;
			} else {
				if (yych == 'n') goto yy446;
				if (yych <= 'q') goto yy430;
				goto yy448;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 's') goto yy430;
				if (yych <= 't') goto yy450;
				goto yy437;
			} else {
				if (yych <= 'v') goto yy452;
				if (yych == 'x') goto yy454;
				goto yy430;
			}
		}
	}
#line 639 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in escape sequence"); }
#line 2758 "src/parse/lex.cc"
yy430:
	++YYCURSOR;
#line 655 "../src/parse/lex.re"
	{
			if (tok[1] != quote) {
				warn.useless_escape(tline, tok - pos, tok[1]);
			}
			return static_cast<uint8_t>(tok[1]);
		}
#line 2768 "src/parse/lex.cc"
yy432:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy433;
	if (yych <= '7') goto yy455;
yy433:
#line 638 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in octal escape sequence"); }
#line 2777 "src/parse/lex.cc"
yy434:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy433;
yy435:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy436;
		if (yych <= '9') goto yy457;
	} else {
		if (yych <= 'F') goto yy457;
		if (yych <= '`') goto yy436;
		if (yych <= 'f') goto yy457;
	}
yy436:
#line 637 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2795 "src/parse/lex.cc"
yy437:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy436;
		if (yych <= '9') goto yy458;
		goto yy436;
	} else {
		if (yych <= 'F') goto yy458;
		if (yych <= '`') goto yy436;
		if (yych <= 'f') goto yy458;
		goto yy436;
	}
yy438:
	++YYCURSOR;
#line 654 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2813 "src/parse/lex.cc"
yy440:
	++YYCURSOR;
#line 647 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2818 "src/parse/lex.cc"
yy442:
	++YYCURSOR;
#line 648 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2823 "src/parse/lex.cc"
yy444:
	++YYCURSOR;
#line 649 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2828 "src/parse/lex.cc"
yy446:
	++YYCURSOR;
#line 650 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2833 "src/parse/lex.cc"
yy448:
	++YYCURSOR;
#line 651 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2838 "src/parse/lex.cc"
yy450:
	++YYCURSOR;
#line 652 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2843 "src/parse/lex.cc"
yy452:
	++YYCURSOR;
#line 653 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2848 "src/parse/lex.cc"
yy454:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy436;
		if (yych <= '9') goto yy459;
		goto yy436;
	} else {
		if (yych <= 'F') goto yy459;
		if (yych <= '`') goto yy436;
		if (yych <= 'f') goto yy459;
		goto yy436;
	}
yy455:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy456;
	if (yych <= '7') goto yy460;
yy456:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy433;
	} else {
		goto yy436;
	}
yy457:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy456;
		if (yych <= '9') goto yy462;
		goto yy456;
	} else {
		if (yych <= 'F') goto yy462;
		if (yych <= '`') goto yy456;
		if (yych <= 'f') goto yy462;
		goto yy456;
	}
yy458:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy456;
		if (yych <= '9') goto yy463;
		goto yy456;
	} else {
		if (yych <= 'F') goto yy463;
		if (yych <= '`') goto yy456;
		if (yych <= 'f') goto yy463;
		goto yy456;
	}
yy459:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy456;
		if (yych <= '9') goto yy464;
		goto yy456;
	} else {
		if (yych <= 'F') goto yy464;
		if (yych <= '`') goto yy456;
		if (yych <= 'f') goto yy464;
		goto yy456;
	}
yy460:
	++YYCURSOR;
#line 646 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2913 "src/parse/lex.cc"
yy462:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy456;
		if (yych <= '9') goto yy466;
		goto yy456;
	} else {
		if (yych <= 'F') goto yy466;
		if (yych <= '`') goto yy456;
		if (yych <= 'f') goto yy466;
		goto yy456;
	}
yy463:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy456;
		if (yych <= '9') goto yy459;
		goto yy456;
	} else {
		if (yych <= 'F') goto yy459;
		if (yych <= '`') goto yy456;
		if (yych <= 'f') goto yy459;
		goto yy456;
	}
yy464:
	++YYCURSOR;
#line 645 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2942 "src/parse/lex.cc"
yy466:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy456;
		if (yych >= ':') goto yy456;
	} else {
		if (yych <= 'F') goto yy467;
		if (yych <= '`') goto yy456;
		if (yych >= 'g') goto yy456;
	}
yy467:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '@') {
		if (yych <= '/') goto yy456;
		if (yych <= '9') goto yy458;
		goto yy456;
	} else {
		if (yych <= 'F') goto yy458;
		if (yych <= '`') goto yy456;
		if (yych <= 'f') goto yy458;
		goto yy456;
	}
}
#line 661 "../src/parse/lex.re"

}

const RegExp *Scanner::lex_str(char quote, bool casing)
{
	const RegExp *r = NULL;
	for (bool end;;) {
		const uint32_t c = lex_str_chr(quote, end);
		if (end) {
			return r ? r : RegExp::nil();
		}
		r = doCat(r, casing ? ichr(c) : schr(c));
	}
}

void Scanner::set_sourceline ()
{
sourceline:
	tok = cur;

#line 2987 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy472;
	} else {
		if (yych <= '"') goto yy474;
		if (yych <= '0') goto yy470;
		if (yych <= '9') goto yy475;
	}
yy470:
	++YYCURSOR;
yy471:
#line 704 "../src/parse/lex.re"
	{
  					goto sourceline;
  				}
#line 3040 "src/parse/lex.cc"
yy472:
	++YYCURSOR;
#line 692 "../src/parse/lex.re"
	{
  					if (cur == eof)
  					{
						--cur; 
					}
			  		else
			  		{
			  			pos = cur; 
			  		}
			  		tok = cur;
			  		return; 
				}
#line 3056 "src/parse/lex.cc"
yy474:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy471;
	goto yy479;
yy475:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy475;
	}
#line 681 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok, cur, cline))
					{
						fatal ("line number overflow");
					}
					goto sourceline; 
				}
#line 3076 "src/parse/lex.cc"
yy478:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy479:
	if (yybm[0+yych] & 128) {
		goto yy478;
	}
	if (yych <= '\n') goto yy480;
	if (yych <= '"') goto yy481;
	goto yy483;
yy480:
	YYCURSOR = YYMARKER;
	goto yy471;
yy481:
	++YYCURSOR;
#line 688 "../src/parse/lex.re"
	{
					escape (in.file_name, std::string (tok + 1, tok_len () - 2)); // -2 to omit quotes
			  		goto sourceline; 
				}
#line 3098 "src/parse/lex.cc"
yy483:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy480;
	goto yy478;
}
#line 707 "../src/parse/lex.re"

}

} // end namespace re2c
