/* Generated by re2c 0.16 on Thu Oct  6 15:19:41 2016 */
#line 1 "../src/parse/lex.re"
#include "src/util/c99_stdint.h"
#include <stddef.h>
#include <string.h>
#include <algorithm>
#include <limits>
#include <string>

#include "src/codegen/output.h"
#include "src/conf/opt.h"
#include "src/conf/warn.h"
#include "src/globals.h"
#include "src/ir/regexp/encoding/enc.h"
#include "src/ir/regexp/regexp.h"
#include "src/parse/code.h"
#include "src/parse/extop.h"
#include "src/parse/input.h"
#include "src/parse/scanner.h"
#include "src/parse/parser.h" // needed by "y.tab.h"
#include "src/parse/unescape.h"
#include "src/util/range.h"
#include "src/util/s_to_n32_unsafe.h"
#include "y.tab.h"

extern YYSTYPE yylval;

#define	YYCTYPE		unsigned char
#define	YYCURSOR	cur
#define	YYLIMIT		lim
#define	YYMARKER	ptr
#define	YYCTXMARKER ctx
#define	YYFILL(n)	{ fill (n); }

namespace re2c
{

// source code is in ASCII: pointers have type 'char *'
// but re2c makes an implicit assumption that YYCTYPE is unsigned
// when it generates comparisons
#line 41 "../src/parse/lex.re"


#line 62 "../src/parse/lex.re"


Scanner::ParseMode Scanner::echo()
{
	if (eof && cur == eof) // Catch EOF
	{
		return Stop;
	}

	tok = cur;
echo:
	const char *start = cur;


#line 60 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 16) YYFILL(16);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 153 "../src/parse/lex.re"
	{
		if (cur == eof) {
			if (opts->target == opt_t::CODE) {
				out.wraw(tok, start);
			}
			return Stop;
		}
		goto echo;
	}
#line 128 "src/parse/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 174 "../src/parse/lex.re"
	{ goto echo; }
#line 134 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 168 "../src/parse/lex.re"
	{
		cline++;
		pos = cur;
		goto echo;
	}
#line 149 "src/parse/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy7;
	} else {
		goto yy5;
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 76 "../src/parse/lex.re"
	{
		if (opts->rFlag) {
			fatal("found standard 're2c' block while using -r flag");
		}
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		return Parse;
	}
#line 202 "src/parse/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'i':	goto yy23;
	case 'm':	goto yy24;
	case 'r':	goto yy25;
	case 't':	goto yy26;
	case 'u':	goto yy27;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy28;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy29;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy30;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy31;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy32;
	if (yych == 'u') goto yy33;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy34;
	if (yych == 'y') goto yy35;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy36;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy37;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy38;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy39;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy40;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy41;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy42;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy43;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy44;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy45;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy47;
	if (yych <= '9') goto yy13;
	goto yy47;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy48;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy49;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy50;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy51;
	goto yy13;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy52;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy53;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy54;
	goto yy13;
yy46:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy47:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy46;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy46;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			YYCTXMARKER = YYCURSOR;
			goto yy55;
		}
		goto yy13;
	}
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy57;
	goto yy13;
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy58;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy59;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy60;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy61;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy62;
	goto yy13;
yy54:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy63;
	goto yy13;
yy55:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy55;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy64;
		if (yych <= '\n') goto yy66;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy68;
		if (yych == ' ') goto yy64;
		goto yy13;
	}
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy69;
	goto yy13;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy70;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy71;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy72;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy73;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy74;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy75;
	goto yy13;
yy64:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy64;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy64;
		if (yych == '"') goto yy76;
		goto yy13;
	}
yy66:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 163 "../src/parse/lex.re"
	{
		set_sourceline();
		goto echo;
	}
#line 435 "src/parse/lex.cc"
yy68:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy66;
	goto yy13;
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy78;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy79;
	goto yy13;
yy71:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy80;
	goto yy13;
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy81;
	goto yy13;
yy73:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy82;
	goto yy13;
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy83;
	goto yy13;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy84;
	goto yy13;
yy76:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy76;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy85;
	goto yy86;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy87;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy88;
	goto yy13;
yy80:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy89;
	goto yy13;
yy81:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy91;
	goto yy13;
yy82:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy92;
	goto yy13;
yy83:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy93;
	goto yy13;
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy94;
	goto yy13;
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy66;
	if (yych == '\r') goto yy68;
	goto yy13;
yy86:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy13;
	goto yy76;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy96;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy97;
	goto yy13;
yy89:
	++YYCURSOR;
#line 116 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start)
				.wdelay_yymaxfill();
		}
		lex_end_of_comment();
		goto echo;
	}
#line 536 "src/parse/lex.cc"
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy98;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy99;
	goto yy13;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy101;
	goto yy13;
yy94:
	++YYCURSOR;
#line 97 "../src/parse/lex.re"
	{
		if (!opts->rFlag) {
			fatal("found 'use:re2c' block without -r flag");
		}
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		reuse();
		return Reuse;
	}
#line 562 "src/parse/lex.cc"
yy96:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy102;
	goto yy13;
yy97:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy103;
	goto yy13;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy104;
	goto yy13;
yy99:
	++YYCURSOR;
#line 145 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		lex_tags();
		goto echo;
	}
#line 585 "src/parse/lex.cc"
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy106;
	goto yy13;
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy108;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy109;
	goto yy13;
yy104:
	++YYCURSOR;
#line 86 "../src/parse/lex.re"
	{
		if (!opts->rFlag) {
			fatal("found 'rules:re2c' block without -r flag");
		}
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		opts.reset_mapCodeName ();
		return Rules;
	}
#line 611 "src/parse/lex.cc"
yy106:
	++YYCURSOR;
#line 134 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start)
				.wdelay_line_info()
				.wdelay_types()
				.wline_info(cline, get_fname().c_str());
		}
		lex_end_of_comment();
		goto echo;
	}
#line 625 "src/parse/lex.cc"
yy108:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy111;
	goto yy13;
yy109:
	++YYCURSOR;
#line 108 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		lex_end_of_comment();
		goto echo;
	}
#line 640 "src/parse/lex.cc"
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
#line 125 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start)
				.wdelay_state_goto(opts->topIndent);
		}
		lex_end_of_comment();
		goto echo;
	}
#line 654 "src/parse/lex.cc"
}
#line 175 "../src/parse/lex.re"

}

void Scanner::lex_end_of_comment()
{
	uint32_t ignored = 0;
	for (;;) {
#line 664 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy116;
		if (yych == '\n') goto yy120;
		goto yy118;
	} else {
		if (yych <= '\r') goto yy122;
		if (yych == '*') goto yy123;
		goto yy118;
	}
yy116:
	++YYCURSOR;
#line 182 "../src/parse/lex.re"
	{ fatal("expected end of block"); }
#line 682 "src/parse/lex.cc"
yy118:
	++YYCURSOR;
yy119:
#line 184 "../src/parse/lex.re"
	{ continue; }
#line 688 "src/parse/lex.cc"
yy120:
	++YYCURSOR;
#line 185 "../src/parse/lex.re"
	{ ++ignored; continue; }
#line 693 "src/parse/lex.cc"
yy122:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy120;
	goto yy119;
yy123:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy119;
	++YYCURSOR;
#line 186 "../src/parse/lex.re"
	{
			if (ignored > 0) {
				cline += ignored;
				out.ws("\n").wline_info(cline, get_fname().c_str());
			}
			tok = pos = cur;
			return;
		}
#line 711 "src/parse/lex.cc"
}
#line 194 "../src/parse/lex.re"
}
}

void Scanner::lex_tags()
{
	ConfTags conf;
	for (;;) {
#line 721 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy130;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy133;
		} else {
			if (yych == '\r') goto yy135;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy136;
			if (yych >= 'f') goto yy137;
		} else {
			if (yych == 's') goto yy138;
		}
	}
	++YYCURSOR;
yy129:
#line 201 "../src/parse/lex.re"
	{ fatal("unrecognized configuration"); }
#line 781 "src/parse/lex.cc"
yy130:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy130;
	}
#line 206 "../src/parse/lex.re"
	{ continue; }
#line 791 "src/parse/lex.cc"
yy133:
	++YYCURSOR;
#line 207 "../src/parse/lex.re"
	{ ++cline; continue; }
#line 796 "src/parse/lex.cc"
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy133;
	goto yy129;
yy136:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy139;
	goto yy129;
yy137:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy141;
	goto yy129;
yy138:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy143;
	goto yy129;
yy139:
	++YYCURSOR;
#line 208 "../src/parse/lex.re"
	{
			if (opts->target == opt_t::CODE) {
				out.wdelay_tags(opts->topIndent,
					new ConfTags(conf));
			}
			tok = pos = cur;
			return;
		}
#line 824 "src/parse/lex.cc"
yy141:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy144;
yy142:
	YYCURSOR = YYMARKER;
	goto yy129;
yy143:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy145;
	goto yy142;
yy144:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy146;
	goto yy142;
yy145:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy147;
	goto yy142;
yy146:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy148;
	goto yy142;
yy147:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy149;
	goto yy142;
yy148:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy150;
	goto yy142;
yy149:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy152;
	goto yy142;
yy150:
	++YYCURSOR;
#line 203 "../src/parse/lex.re"
	{ conf.format    = lex_conf_string(); continue; }
#line 863 "src/parse/lex.cc"
yy152:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy142;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy142;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy142;
	++YYCURSOR;
#line 204 "../src/parse/lex.re"
	{ conf.separator = lex_conf_string(); continue; }
#line 874 "src/parse/lex.cc"
}
#line 216 "../src/parse/lex.re"
}
}

int Scanner::scan()
{
	uint32_t depth;

scan:
	tchar = cur - pos;
	tline = cline;
	tok = cur;
	switch (lexer_state)
	{
		case LEX_NORMAL:    goto start;
		case LEX_FLEX_NAME: goto flex_name;
	}

start:

#line 896 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 6) YYFILL(6);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy161;
	}
	if (yych <= '9') {
		if (yych <= '&') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy159;
				if (yych <= '\n') goto yy164;
				if (yych >= '\r') goto yy166;
			} else {
				if (yych <= '"') {
					if (yych >= '"') goto yy167;
				} else {
					if (yych == '%') goto yy169;
				}
			}
		} else {
			if (yych <= '+') {
				if (yych <= '\'') goto yy170;
				if (yych <= ')') goto yy172;
				if (yych <= '*') goto yy174;
				goto yy176;
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy172;
				} else {
					if (yych <= '.') goto yy178;
					if (yych <= '/') goto yy180;
					goto yy181;
				}
			}
		}
	} else {
		if (yych <= '\\') {
			if (yych <= '>') {
				if (yych <= ':') goto yy182;
				if (yych == '<') goto yy183;
				goto yy172;
			} else {
				if (yych <= '@') {
					if (yych <= '?') goto yy176;
					goto yy184;
				} else {
					if (yych <= 'Z') goto yy181;
					if (yych <= '[') goto yy185;
					goto yy172;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych == '_') goto yy181;
				if (yych >= 'a') goto yy181;
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy187;
					goto yy181;
				} else {
					if (yych <= '{') goto yy188;
					if (yych <= '|') goto yy172;
				}
			}
		}
	}
yy159:
	++YYCURSOR;
yy160:
#line 398 "../src/parse/lex.re"
	{
					fatalf("unexpected character: '%c'", *tok);
					goto scan;
				}
#line 1007 "src/parse/lex.cc"
yy161:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy161;
	}
#line 382 "../src/parse/lex.re"
	{
					goto scan;
				}
#line 1019 "src/parse/lex.cc"
yy164:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy190;
	} else {
		if (yych <= ' ') goto yy190;
		if (yych == '#') goto yy193;
	}
yy165:
#line 391 "../src/parse/lex.re"
	{
					if (cur == eof) return 0;
					pos = cur;
					cline++;
					goto scan;
				}
#line 1037 "src/parse/lex.cc"
yy166:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy164;
	goto yy160;
yy167:
	++YYCURSOR;
#line 265 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"',  opts->bCaseInsensitive ||  opts->bCaseInverted); return TOKEN_REGEXP; }
#line 1046 "src/parse/lex.cc"
yy169:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy195;
	goto yy160;
yy170:
	++YYCURSOR;
#line 264 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\'', opts->bCaseInsensitive || !opts->bCaseInverted); return TOKEN_REGEXP; }
#line 1055 "src/parse/lex.cc"
yy172:
	++YYCURSOR;
yy173:
#line 285 "../src/parse/lex.re"
	{
					return *tok;
				}
#line 1063 "src/parse/lex.cc"
yy174:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '/') goto yy195;
#line 289 "../src/parse/lex.re"
	{
					yylval.op = *tok;
					return TOKEN_STAR;
				}
#line 1072 "src/parse/lex.cc"
yy176:
	++YYCURSOR;
#line 293 "../src/parse/lex.re"
	{
					yylval.op = *tok;
					return TOKEN_CLOSE;
				}
#line 1080 "src/parse/lex.cc"
yy178:
	++YYCURSOR;
#line 377 "../src/parse/lex.re"
	{
					yylval.regexp = mkDot();
					return TOKEN_REGEXP;
				}
#line 1088 "src/parse/lex.cc"
yy180:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy197;
	if (yych == '/') goto yy199;
	goto yy173;
yy181:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy207;
yy182:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy208;
	goto yy160;
yy183:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '!') goto yy210;
	if (yych == '>') goto yy212;
	goto yy173;
yy184:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy160;
		if (yych <= '9') goto yy213;
		if (yych <= '@') goto yy160;
		goto yy213;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy160;
			goto yy213;
		} else {
			if (yych <= '`') goto yy160;
			if (yych <= 'z') goto yy213;
			goto yy160;
		}
	}
yy185:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '^') goto yy216;
#line 266 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1129 "src/parse/lex.cc"
yy187:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy218;
	goto yy207;
yy188:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy221;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy219;
		if (yych >= 'A') goto yy223;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy223;
		} else {
			if (yych <= '`') goto yy189;
			if (yych <= 'z') goto yy223;
		}
	}
yy189:
#line 235 "../src/parse/lex.re"
	{
					depth = 1;
					goto code;
				}
#line 1157 "src/parse/lex.cc"
yy190:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy190;
	} else {
		if (yych <= ' ') goto yy190;
		if (yych == '#') goto yy193;
	}
yy192:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy165;
		} else {
			goto yy173;
		}
	} else {
		if (yyaccept == 2) {
			goto yy189;
		} else {
			goto yy220;
		}
	}
yy193:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy193;
		goto yy192;
	} else {
		if (yych <= ' ') goto yy193;
		if (yych == 'l') goto yy225;
		goto yy192;
	}
yy195:
	++YYCURSOR;
#line 259 "../src/parse/lex.re"
	{
					tok = cur;
					return 0;
				}
#line 1202 "src/parse/lex.cc"
yy197:
	++YYCURSOR;
#line 253 "../src/parse/lex.re"
	{
					depth = 1;
					goto comment;
				}
#line 1210 "src/parse/lex.cc"
yy199:
	++YYCURSOR;
#line 250 "../src/parse/lex.re"
	{
				goto nextLine;
			}
#line 1217 "src/parse/lex.cc"
yy201:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 361 "../src/parse/lex.re"
	{
					if (!opts->FFlag) {
						yylval.str = new std::string (tok, tok_len());
						return TOKEN_ID;
					} else {
						const RegExp *r = NULL;
						const bool casing = opts->bCaseInsensitive || opts->bCaseInverted;
						for (char *s = tok; s < cur; ++s) {
							const uint32_t c = static_cast<uint8_t>(*s);
							r = doCat(r, casing ? ichr(c) : schr(c));
						}
						yylval.regexp = r ? r : RegExp::make_nil();
						return TOKEN_REGEXP;
					}
				}
#line 1237 "src/parse/lex.cc"
yy203:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy229;
yy204:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 356 "../src/parse/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					return TOKEN_ID;
				}
#line 1249 "src/parse/lex.cc"
yy206:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
yy207:
	if (yybm[0+yych] & 32) {
		goto yy206;
	}
	if (yych <= ' ') {
		if (yych == '\t') {
			YYCTXMARKER = YYCURSOR;
			goto yy203;
		}
		if (yych <= 0x1F) goto yy201;
		YYCTXMARKER = YYCURSOR;
		goto yy203;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy201;
			YYCTXMARKER = YYCURSOR;
			goto yy204;
		} else {
			if (yych <= '<') goto yy201;
			if (yych <= '>') {
				YYCTXMARKER = YYCURSOR;
				goto yy204;
			}
			goto yy201;
		}
	}
yy208:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '>') goto yy230;
#line 244 "../src/parse/lex.re"
	{
					tok += 2; /* skip ":=" */
					depth = 0;
					goto code;
				}
#line 1289 "src/parse/lex.cc"
yy210:
	++YYCURSOR;
#line 272 "../src/parse/lex.re"
	{
					return TOKEN_SETUP;
				}
#line 1296 "src/parse/lex.cc"
yy212:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '9') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy192;
			YYCTXMARKER = YYCURSOR;
			goto yy232;
		} else {
			if (yych == ' ') {
				YYCTXMARKER = YYCURSOR;
				goto yy232;
			}
			goto yy192;
		}
	} else {
		if (yych <= '=') {
			if (yych <= ':') {
				YYCTXMARKER = YYCURSOR;
				goto yy234;
			}
			if (yych <= '<') goto yy192;
			YYCTXMARKER = YYCURSOR;
			goto yy235;
		} else {
			if (yych == '{') {
				YYCTXMARKER = YYCURSOR;
				goto yy236;
			}
			goto yy192;
		}
	}
yy213:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy215;
		if (yych <= '9') goto yy213;
		if (yych >= 'A') goto yy213;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy213;
		} else {
			if (yych <= '`') goto yy215;
			if (yych <= 'z') goto yy213;
		}
	}
yy215:
#line 276 "../src/parse/lex.re"
	{
		if (!opts->tags) {
			fatal("tags are only allowed with '-T, --tags' option");
		}
		const std::string *name = new std::string(tok + 1, tok_len() - 1);
		yylval.regexp = RegExp::make_tag(name);
		return TOKEN_REGEXP;
	}
#line 1354 "src/parse/lex.cc"
yy216:
	++YYCURSOR;
#line 267 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1359 "src/parse/lex.cc"
yy218:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy238;
	goto yy207;
yy219:
	++YYCURSOR;
yy220:
#line 329 "../src/parse/lex.re"
	{
					fatal("illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
				}
#line 1371 "src/parse/lex.cc"
yy221:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy221;
	}
	if (yych <= '^') {
		if (yych <= ',') {
			if (yych <= '+') goto yy192;
			goto yy239;
		} else {
			if (yych <= '@') goto yy192;
			if (yych >= '[') goto yy192;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy192;
		} else {
			if (yych == '}') goto yy240;
			goto yy192;
		}
	}
yy223:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy192;
			goto yy223;
		} else {
			if (yych <= '@') goto yy192;
			if (yych <= 'Z') goto yy223;
			goto yy192;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy192;
			goto yy223;
		} else {
			if (yych == '}') goto yy242;
			goto yy192;
		}
	}
yy225:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy244;
	goto yy192;
yy226:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 343 "../src/parse/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					if (opts->FFlag)
					{
						lexer_state = LEX_FLEX_NAME;
						return TOKEN_FID;
					}
					else
					{
						return TOKEN_ID;
					}
				}
#line 1437 "src/parse/lex.cc"
yy228:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy229:
	if (yych <= ' ') {
		if (yych == '\t') goto yy228;
		if (yych <= 0x1F) goto yy226;
		goto yy228;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy226;
			goto yy204;
		} else {
			if (yych <= '<') goto yy226;
			if (yych <= '>') goto yy204;
			goto yy226;
		}
	}
yy230:
	++YYCURSOR;
	YYCURSOR -= 2;
#line 240 "../src/parse/lex.re"
	{
					return *tok;
				}
#line 1464 "src/parse/lex.cc"
yy232:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '9') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy192;
			goto yy232;
		} else {
			if (yych == ' ') goto yy232;
			goto yy192;
		}
	} else {
		if (yych <= '=') {
			if (yych <= ':') goto yy234;
			if (yych <= '<') goto yy192;
			goto yy235;
		} else {
			if (yych == '{') goto yy236;
			goto yy192;
		}
	}
yy234:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy236;
	goto yy192;
yy235:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '>') goto yy192;
yy236:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 269 "../src/parse/lex.re"
	{
					return TOKEN_NOCOND;
				}
#line 1501 "src/parse/lex.cc"
yy238:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy245;
	goto yy207;
yy239:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy220;
	if (yych <= '9') goto yy246;
	if (yych == '}') goto yy248;
	goto yy220;
yy240:
	++YYCURSOR;
#line 298 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.extop.min))
					{
						fatal ("repetition count overflow");
					}
					yylval.extop.max = yylval.extop.min;
					return TOKEN_CLOSESIZE;
				}
#line 1524 "src/parse/lex.cc"
yy242:
	++YYCURSOR;
#line 333 "../src/parse/lex.re"
	{
					if (!opts->FFlag) {
						fatal("curly braces for names only allowed with -F switch");
					}
					yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
					return TOKEN_ID;
				}
#line 1535 "src/parse/lex.cc"
yy244:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy250;
	goto yy192;
yy245:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy251;
	goto yy207;
yy246:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy192;
	if (yych <= '9') goto yy246;
	if (yych == '}') goto yy253;
	goto yy192;
yy248:
	++YYCURSOR;
#line 320 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					yylval.extop.max = std::numeric_limits<uint32_t>::max();
					return TOKEN_CLOSESIZE;
				}
#line 1563 "src/parse/lex.cc"
yy250:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy255;
	goto yy192;
yy251:
	++YYCURSOR;
#line 341 "../src/parse/lex.re"
	{ lex_conf (); return TOKEN_CONF; }
#line 1572 "src/parse/lex.cc"
yy253:
	++YYCURSOR;
#line 307 "../src/parse/lex.re"
	{
					const char * p = strchr (tok, ',');
					if (!s_to_u32_unsafe (tok + 1, p, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.extop.max))
					{
						fatal ("repetition upper bound overflow");
					}
					return TOKEN_CLOSESIZE;
				}
#line 1588 "src/parse/lex.cc"
yy255:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy257;
	if (yych <= '9') goto yy192;
	goto yy257;
yy256:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy257:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy256;
		goto yy192;
	} else {
		if (yych <= ' ') goto yy256;
		if (yych <= '0') goto yy192;
		if (yych >= ':') goto yy192;
		YYCTXMARKER = YYCURSOR;
	}
yy258:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy192;
		} else {
			if (yych <= '\n') goto yy262;
			if (yych <= '\f') goto yy192;
			goto yy264;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy192;
		} else {
			if (yych <= '/') goto yy192;
			if (yych <= '9') goto yy258;
			goto yy192;
		}
	}
yy260:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy260;
		goto yy192;
	} else {
		if (yych <= ' ') goto yy260;
		if (yych == '"') goto yy265;
		goto yy192;
	}
yy262:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 386 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto scan;
				}
#line 1649 "src/parse/lex.cc"
yy264:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy262;
	goto yy192;
yy265:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy265;
	}
	if (yych <= '\n') goto yy192;
	if (yych >= '#') goto yy268;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy262;
	if (yych == '\r') goto yy264;
	goto yy192;
yy268:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy192;
	goto yy265;
}
#line 402 "../src/parse/lex.re"


flex_name:

#line 1679 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy273;
	if (yych == '\r') goto yy275;
	++YYCURSOR;
yy272:
#line 413 "../src/parse/lex.re"
	{
		YYCURSOR = tok;
		goto start;
	}
#line 1693 "src/parse/lex.cc"
yy273:
	++YYCURSOR;
#line 407 "../src/parse/lex.re"
	{
		YYCURSOR = tok;
		lexer_state = LEX_NORMAL;
		return TOKEN_FID_END;
	}
#line 1702 "src/parse/lex.cc"
yy275:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '\n') goto yy273;
	goto yy272;
}
#line 417 "../src/parse/lex.re"


code:

#line 1713 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96, 112,   0,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		112,  96,  64,  96,  96,  96,  96,  32, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,   0,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy278;
			if (yych <= '\t') goto yy280;
			goto yy282;
		} else {
			if (yych == '"') goto yy284;
			goto yy280;
		}
	} else {
		if (yych <= '{') {
			if (yych <= '\'') goto yy285;
			if (yych <= 'z') goto yy280;
			goto yy286;
		} else {
			if (yych == '}') goto yy288;
			goto yy280;
		}
	}
yy278:
	++YYCURSOR;
#line 480 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						if (depth)
						{
							fatal("missing '}'");
						}
						return 0;
					}
					goto code;
				}
#line 1786 "src/parse/lex.cc"
yy280:
	++YYCURSOR;
yy281:
#line 494 "../src/parse/lex.re"
	{
					goto code;
				}
#line 1794 "src/parse/lex.cc"
yy282:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy290;
		} else {
			if (yych <= '\n') goto yy292;
			if (yych >= '\r') goto yy292;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy290;
		} else {
			if (yych == '#') goto yy293;
		}
	}
yy283:
#line 461 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						tok += strspn(tok, " \t\r\n");
						while (cur > tok && strchr(" \t\r\n", cur[-1]))
						{
							--cur;
						}
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return TOKEN_CODE;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1833 "src/parse/lex.cc"
yy284:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy281;
	goto yy297;
yy285:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy281;
	goto yy302;
yy286:
	++YYCURSOR;
#line 433 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else
					{
						++depth;
					}
					goto code;
				}
#line 1858 "src/parse/lex.cc"
yy288:
	++YYCURSOR;
#line 421 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else if (--depth == 0)
					{
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return TOKEN_CODE;
					}
					goto code;
				}
#line 1874 "src/parse/lex.cc"
yy290:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy304;
	} else {
		if (yych <= ' ') goto yy304;
		if (yych == '#') goto yy293;
	}
yy291:
	YYCURSOR -= 1;
#line 448 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						goto code;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1900 "src/parse/lex.cc"
yy292:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy291;
yy293:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy293;
	}
	if (yych == 'l') goto yy306;
yy295:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy283;
		} else {
			goto yy281;
		}
	} else {
		goto yy291;
	}
yy296:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy297:
	if (yybm[0+yych] & 32) {
		goto yy296;
	}
	if (yych <= '\n') goto yy295;
	if (yych >= '#') goto yy300;
yy298:
	++YYCURSOR;
#line 491 "../src/parse/lex.re"
	{
					goto code;
				}
#line 1939 "src/parse/lex.cc"
yy300:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy295;
	goto yy296;
yy301:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy302:
	if (yybm[0+yych] & 64) {
		goto yy301;
	}
	if (yych <= '\n') goto yy295;
	if (yych <= '\'') goto yy298;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy295;
	goto yy301;
yy304:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy304;
		goto yy295;
	} else {
		if (yych <= ' ') goto yy304;
		if (yych == '#') goto yy293;
		goto yy295;
	}
yy306:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy295;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy295;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy295;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy311;
	if (yych <= '9') goto yy295;
	goto yy311;
yy310:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy311:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy310;
		goto yy295;
	} else {
		if (yych <= ' ') goto yy310;
		if (yych <= '0') goto yy295;
		if (yych >= ':') goto yy295;
		YYCTXMARKER = YYCURSOR;
	}
yy312:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy312;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy295;
		if (yych <= '\t') goto yy314;
		if (yych <= '\n') goto yy316;
		goto yy295;
	} else {
		if (yych <= '\r') goto yy318;
		if (yych != ' ') goto yy295;
	}
yy314:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy314;
		goto yy295;
	} else {
		if (yych <= ' ') goto yy314;
		if (yych == '"') goto yy319;
		goto yy295;
	}
yy316:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 444 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto code;
				}
#line 2034 "src/parse/lex.cc"
yy318:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy316;
	goto yy295;
yy319:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy295;
		goto yy319;
	} else {
		if (yych <= '"') goto yy321;
		if (yych == '\\') goto yy322;
		goto yy319;
	}
yy321:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy316;
	if (yych == '\r') goto yy318;
	goto yy295;
yy322:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy295;
	goto yy319;
}
#line 497 "../src/parse/lex.re"


comment:

#line 2068 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ')') {
		if (yych == '\n') goto yy327;
	} else {
		if (yych <= '*') goto yy329;
		if (yych == '/') goto yy330;
	}
	++YYCURSOR;
yy326:
#line 529 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					goto comment;
				}
#line 2123 "src/parse/lex.cc"
yy327:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy331;
	}
	if (yych == '#') goto yy334;
yy328:
#line 520 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					tok = pos = cur;
					cline++;
					goto comment;
				}
#line 2141 "src/parse/lex.cc"
yy329:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy336;
	goto yy326;
yy330:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy338;
	goto yy326;
yy331:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy331;
	}
	if (yych == '#') goto yy334;
yy333:
	YYCURSOR = YYMARKER;
	goto yy328;
yy334:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy334;
		goto yy333;
	} else {
		if (yych <= ' ') goto yy334;
		if (yych == 'l') goto yy340;
		goto yy333;
	}
yy336:
	++YYCURSOR;
#line 501 "../src/parse/lex.re"
	{
					if (--depth == 0)
					{
						goto scan;
					}
					else
					{
						goto comment;
					}
				}
#line 2186 "src/parse/lex.cc"
yy338:
	++YYCURSOR;
#line 511 "../src/parse/lex.re"
	{
					++depth;
					fatal("ambiguous /* found");
					goto comment;
				}
#line 2195 "src/parse/lex.cc"
yy340:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy333;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy333;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy333;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy345;
	if (yych <= '9') goto yy333;
	goto yy345;
yy344:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy345:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy344;
		goto yy333;
	} else {
		if (yych <= ' ') goto yy344;
		if (yych <= '0') goto yy333;
		if (yych >= ':') goto yy333;
		YYCTXMARKER = YYCURSOR;
	}
yy346:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy346;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy333;
		if (yych <= '\t') goto yy348;
		if (yych <= '\n') goto yy350;
		goto yy333;
	} else {
		if (yych <= '\r') goto yy352;
		if (yych != ' ') goto yy333;
	}
yy348:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy348;
		goto yy333;
	} else {
		if (yych <= ' ') goto yy348;
		if (yych == '"') goto yy353;
		goto yy333;
	}
yy350:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 516 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto comment;
				}
#line 2257 "src/parse/lex.cc"
yy352:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy350;
	goto yy333;
yy353:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy353;
	}
	if (yych <= '\n') goto yy333;
	if (yych >= '#') goto yy356;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy350;
	if (yych == '\r') goto yy352;
	goto yy333;
yy356:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy333;
	goto yy353;
}
#line 536 "../src/parse/lex.re"


nextLine:

#line 2287 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy361;
	++YYCURSOR;
#line 547 "../src/parse/lex.re"
	{  if(cur == eof) {
                  return 0;
               }
               goto nextLine;
            }
#line 2300 "src/parse/lex.cc"
yy361:
	++YYCURSOR;
#line 540 "../src/parse/lex.re"
	{ if(cur == eof) {
                  return 0;
               }
               tok = pos = cur;
               cline++;
               goto scan;
            }
#line 2311 "src/parse/lex.cc"
}
#line 552 "../src/parse/lex.re"

}

static void escape (std::string & dest, const std::string & src)
{
	dest = src;
	size_t l = dest.length();
	for (size_t p = 0; p < l; ++p)
	{
		if (dest[p] == '\\')
		{
			dest.insert(++p, "\\");
			++l;
		}
	}
}

const RegExp *Scanner::lex_cls(bool neg)
{
	Range *r = NULL, *s;
	uint32_t u, l;
fst:
	
#line 2337 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy366;
#line 576 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 2345 "src/parse/lex.cc"
yy366:
	++YYCURSOR;
#line 575 "../src/parse/lex.re"
	{ goto end; }
#line 2350 "src/parse/lex.cc"
}
#line 577 "../src/parse/lex.re"

snd:
	
#line 2356 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy371;
yy370:
#line 580 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 2365 "src/parse/lex.cc"
yy371:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy373;
	YYCURSOR = YYMARKER;
	goto yy370;
yy373:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 581 "../src/parse/lex.re"
	{
			u = lex_cls_chr();
			if (l > u) {
				warn.swapped_range(get_line(), l, u);
				std::swap(l, u);
			}
			goto add;
		}
#line 2383 "src/parse/lex.cc"
}
#line 589 "../src/parse/lex.re"

add:
	if (!(s = opts->encoding.encodeRange(l, u))) {
		fatalf ("Bad code point range: '0x%X - 0x%X'", l, u);
	}
	r = Range::add(r, s);
	goto fst;
end:
	if (neg) {
		r = Range::sub(opts->encoding.fullRange(), r);
	}
	return cls(r);
}

uint32_t Scanner::lex_cls_chr()
{
	tok = cur;
	
#line 2404 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy379;
	if (yych == '\\') goto yy381;
	++YYCURSOR;
#line 612 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(tok[0]); }
#line 2415 "src/parse/lex.cc"
yy379:
	++YYCURSOR;
#line 607 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error"); }
#line 2420 "src/parse/lex.cc"
yy381:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '`') {
		if (yych <= '7') {
			if (yych <= ',') {
				if (yych != '\n') goto yy383;
			} else {
				if (yych <= '-') goto yy385;
				if (yych <= '/') goto yy383;
				if (yych <= '3') goto yy387;
				goto yy389;
			}
		} else {
			if (yych <= 'X') {
				if (yych == 'U') goto yy390;
				if (yych <= 'W') goto yy383;
				goto yy392;
			} else {
				if (yych <= '[') goto yy383;
				if (yych <= '\\') goto yy393;
				if (yych <= ']') goto yy395;
				goto yy383;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy397;
				if (yych <= 'b') goto yy399;
				goto yy383;
			} else {
				if (yych <= 'f') goto yy401;
				if (yych == 'n') goto yy403;
				goto yy383;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy405;
				if (yych <= 's') goto yy383;
				if (yych <= 't') goto yy407;
				goto yy392;
			} else {
				if (yych <= 'v') goto yy409;
				if (yych == 'x') goto yy411;
				goto yy383;
			}
		}
	}
#line 610 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in escape sequence"); }
#line 2471 "src/parse/lex.cc"
yy383:
	++YYCURSOR;
#line 625 "../src/parse/lex.re"
	{
			warn.useless_escape(tline, tok - pos, tok[1]);
			return static_cast<uint8_t>(tok[1]);
		}
#line 2479 "src/parse/lex.cc"
yy385:
	++YYCURSOR;
#line 623 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 2484 "src/parse/lex.cc"
yy387:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy388;
	if (yych <= '7') goto yy412;
yy388:
#line 609 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in octal escape sequence"); }
#line 2493 "src/parse/lex.cc"
yy389:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy388;
yy390:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy391;
		if (yych <= '9') goto yy414;
	} else {
		if (yych <= 'F') goto yy414;
		if (yych <= '`') goto yy391;
		if (yych <= 'f') goto yy414;
	}
yy391:
#line 608 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2511 "src/parse/lex.cc"
yy392:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy391;
		if (yych <= '9') goto yy415;
		goto yy391;
	} else {
		if (yych <= 'F') goto yy415;
		if (yych <= '`') goto yy391;
		if (yych <= 'f') goto yy415;
		goto yy391;
	}
yy393:
	++YYCURSOR;
#line 622 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2529 "src/parse/lex.cc"
yy395:
	++YYCURSOR;
#line 624 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 2534 "src/parse/lex.cc"
yy397:
	++YYCURSOR;
#line 615 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2539 "src/parse/lex.cc"
yy399:
	++YYCURSOR;
#line 616 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2544 "src/parse/lex.cc"
yy401:
	++YYCURSOR;
#line 617 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2549 "src/parse/lex.cc"
yy403:
	++YYCURSOR;
#line 618 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2554 "src/parse/lex.cc"
yy405:
	++YYCURSOR;
#line 619 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2559 "src/parse/lex.cc"
yy407:
	++YYCURSOR;
#line 620 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2564 "src/parse/lex.cc"
yy409:
	++YYCURSOR;
#line 621 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2569 "src/parse/lex.cc"
yy411:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy391;
		if (yych <= '9') goto yy416;
		goto yy391;
	} else {
		if (yych <= 'F') goto yy416;
		if (yych <= '`') goto yy391;
		if (yych <= 'f') goto yy416;
		goto yy391;
	}
yy412:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy413;
	if (yych <= '7') goto yy417;
yy413:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy388;
	} else {
		goto yy391;
	}
yy414:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy413;
		if (yych <= '9') goto yy419;
		goto yy413;
	} else {
		if (yych <= 'F') goto yy419;
		if (yych <= '`') goto yy413;
		if (yych <= 'f') goto yy419;
		goto yy413;
	}
yy415:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy413;
		if (yych <= '9') goto yy420;
		goto yy413;
	} else {
		if (yych <= 'F') goto yy420;
		if (yych <= '`') goto yy413;
		if (yych <= 'f') goto yy420;
		goto yy413;
	}
yy416:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy413;
		if (yych <= '9') goto yy421;
		goto yy413;
	} else {
		if (yych <= 'F') goto yy421;
		if (yych <= '`') goto yy413;
		if (yych <= 'f') goto yy421;
		goto yy413;
	}
yy417:
	++YYCURSOR;
#line 614 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2634 "src/parse/lex.cc"
yy419:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy413;
		if (yych <= '9') goto yy423;
		goto yy413;
	} else {
		if (yych <= 'F') goto yy423;
		if (yych <= '`') goto yy413;
		if (yych <= 'f') goto yy423;
		goto yy413;
	}
yy420:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy413;
		if (yych <= '9') goto yy416;
		goto yy413;
	} else {
		if (yych <= 'F') goto yy416;
		if (yych <= '`') goto yy413;
		if (yych <= 'f') goto yy416;
		goto yy413;
	}
yy421:
	++YYCURSOR;
#line 613 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2663 "src/parse/lex.cc"
yy423:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy413;
		if (yych >= ':') goto yy413;
	} else {
		if (yych <= 'F') goto yy424;
		if (yych <= '`') goto yy413;
		if (yych >= 'g') goto yy413;
	}
yy424:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '@') {
		if (yych <= '/') goto yy413;
		if (yych <= '9') goto yy415;
		goto yy413;
	} else {
		if (yych <= 'F') goto yy415;
		if (yych <= '`') goto yy413;
		if (yych <= 'f') goto yy415;
		goto yy413;
	}
}
#line 629 "../src/parse/lex.re"

}

uint32_t Scanner::lex_str_chr(char quote, bool &end)
{
	end = false;
	tok = cur;
	
#line 2696 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy429;
	if (yych == '\\') goto yy431;
	++YYCURSOR;
#line 642 "../src/parse/lex.re"
	{
			end = tok[0] == quote;
			return static_cast<uint8_t>(tok[0]);
		}
#line 2710 "src/parse/lex.cc"
yy429:
	++YYCURSOR;
#line 637 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error"); }
#line 2715 "src/parse/lex.cc"
yy431:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= 'a') {
		if (yych <= 'T') {
			if (yych <= '/') {
				if (yych != '\n') goto yy433;
			} else {
				if (yych <= '3') goto yy435;
				if (yych <= '7') goto yy437;
				goto yy433;
			}
		} else {
			if (yych <= 'X') {
				if (yych <= 'U') goto yy438;
				if (yych <= 'W') goto yy433;
				goto yy440;
			} else {
				if (yych == '\\') goto yy441;
				if (yych <= '`') goto yy433;
				goto yy443;
			}
		}
	} else {
		if (yych <= 'r') {
			if (yych <= 'f') {
				if (yych <= 'b') goto yy445;
				if (yych <= 'e') goto yy433;
				goto yy447;
			} else {
				if (yych == 'n') goto yy449;
				if (yych <= 'q') goto yy433;
				goto yy451;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 's') goto yy433;
				if (yych <= 't') goto yy453;
				goto yy440;
			} else {
				if (yych <= 'v') goto yy455;
				if (yych == 'x') goto yy457;
				goto yy433;
			}
		}
	}
#line 640 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in escape sequence"); }
#line 2763 "src/parse/lex.cc"
yy433:
	++YYCURSOR;
#line 656 "../src/parse/lex.re"
	{
			if (tok[1] != quote) {
				warn.useless_escape(tline, tok - pos, tok[1]);
			}
			return static_cast<uint8_t>(tok[1]);
		}
#line 2773 "src/parse/lex.cc"
yy435:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy436;
	if (yych <= '7') goto yy458;
yy436:
#line 639 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in octal escape sequence"); }
#line 2782 "src/parse/lex.cc"
yy437:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy436;
yy438:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy439;
		if (yych <= '9') goto yy460;
	} else {
		if (yych <= 'F') goto yy460;
		if (yych <= '`') goto yy439;
		if (yych <= 'f') goto yy460;
	}
yy439:
#line 638 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2800 "src/parse/lex.cc"
yy440:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy439;
		if (yych <= '9') goto yy461;
		goto yy439;
	} else {
		if (yych <= 'F') goto yy461;
		if (yych <= '`') goto yy439;
		if (yych <= 'f') goto yy461;
		goto yy439;
	}
yy441:
	++YYCURSOR;
#line 655 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2818 "src/parse/lex.cc"
yy443:
	++YYCURSOR;
#line 648 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2823 "src/parse/lex.cc"
yy445:
	++YYCURSOR;
#line 649 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2828 "src/parse/lex.cc"
yy447:
	++YYCURSOR;
#line 650 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2833 "src/parse/lex.cc"
yy449:
	++YYCURSOR;
#line 651 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2838 "src/parse/lex.cc"
yy451:
	++YYCURSOR;
#line 652 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2843 "src/parse/lex.cc"
yy453:
	++YYCURSOR;
#line 653 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2848 "src/parse/lex.cc"
yy455:
	++YYCURSOR;
#line 654 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2853 "src/parse/lex.cc"
yy457:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy439;
		if (yych <= '9') goto yy462;
		goto yy439;
	} else {
		if (yych <= 'F') goto yy462;
		if (yych <= '`') goto yy439;
		if (yych <= 'f') goto yy462;
		goto yy439;
	}
yy458:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy459;
	if (yych <= '7') goto yy463;
yy459:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy436;
	} else {
		goto yy439;
	}
yy460:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy459;
		if (yych <= '9') goto yy465;
		goto yy459;
	} else {
		if (yych <= 'F') goto yy465;
		if (yych <= '`') goto yy459;
		if (yych <= 'f') goto yy465;
		goto yy459;
	}
yy461:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy459;
		if (yych <= '9') goto yy466;
		goto yy459;
	} else {
		if (yych <= 'F') goto yy466;
		if (yych <= '`') goto yy459;
		if (yych <= 'f') goto yy466;
		goto yy459;
	}
yy462:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy459;
		if (yych <= '9') goto yy467;
		goto yy459;
	} else {
		if (yych <= 'F') goto yy467;
		if (yych <= '`') goto yy459;
		if (yych <= 'f') goto yy467;
		goto yy459;
	}
yy463:
	++YYCURSOR;
#line 647 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2918 "src/parse/lex.cc"
yy465:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy459;
		if (yych <= '9') goto yy469;
		goto yy459;
	} else {
		if (yych <= 'F') goto yy469;
		if (yych <= '`') goto yy459;
		if (yych <= 'f') goto yy469;
		goto yy459;
	}
yy466:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy459;
		if (yych <= '9') goto yy462;
		goto yy459;
	} else {
		if (yych <= 'F') goto yy462;
		if (yych <= '`') goto yy459;
		if (yych <= 'f') goto yy462;
		goto yy459;
	}
yy467:
	++YYCURSOR;
#line 646 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2947 "src/parse/lex.cc"
yy469:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy459;
		if (yych >= ':') goto yy459;
	} else {
		if (yych <= 'F') goto yy470;
		if (yych <= '`') goto yy459;
		if (yych >= 'g') goto yy459;
	}
yy470:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '@') {
		if (yych <= '/') goto yy459;
		if (yych <= '9') goto yy461;
		goto yy459;
	} else {
		if (yych <= 'F') goto yy461;
		if (yych <= '`') goto yy459;
		if (yych <= 'f') goto yy461;
		goto yy459;
	}
}
#line 662 "../src/parse/lex.re"

}

const RegExp *Scanner::lex_str(char quote, bool casing)
{
	const RegExp *r = NULL;
	for (bool end;;) {
		const uint32_t c = lex_str_chr(quote, end);
		if (end) {
			return r ? r : RegExp::make_nil();
		}
		r = doCat(r, casing ? ichr(c) : schr(c));
	}
}

void Scanner::set_sourceline ()
{
sourceline:
	tok = cur;

#line 2992 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy475;
	} else {
		if (yych <= '"') goto yy477;
		if (yych <= '0') goto yy473;
		if (yych <= '9') goto yy478;
	}
yy473:
	++YYCURSOR;
yy474:
#line 705 "../src/parse/lex.re"
	{
  					goto sourceline;
  				}
#line 3045 "src/parse/lex.cc"
yy475:
	++YYCURSOR;
#line 693 "../src/parse/lex.re"
	{
  					if (cur == eof)
  					{
						--cur; 
					}
			  		else
			  		{
			  			pos = cur; 
			  		}
			  		tok = cur;
			  		return; 
				}
#line 3061 "src/parse/lex.cc"
yy477:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy474;
	goto yy482;
yy478:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy478;
	}
#line 682 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok, cur, cline))
					{
						fatal ("line number overflow");
					}
					goto sourceline; 
				}
#line 3081 "src/parse/lex.cc"
yy481:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy482:
	if (yybm[0+yych] & 128) {
		goto yy481;
	}
	if (yych <= '\n') goto yy483;
	if (yych <= '"') goto yy484;
	goto yy486;
yy483:
	YYCURSOR = YYMARKER;
	goto yy474;
yy484:
	++YYCURSOR;
#line 689 "../src/parse/lex.re"
	{
					escape (in.file_name, std::string (tok + 1, tok_len () - 2)); // -2 to omit quotes
			  		goto sourceline; 
				}
#line 3103 "src/parse/lex.cc"
yy486:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy483;
	goto yy481;
}
#line 708 "../src/parse/lex.re"

}

} // end namespace re2c
