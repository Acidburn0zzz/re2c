/* Generated by re2c 0.14.3 on Tue Aug 18 21:48:49 2015 */
#line 1 "../src/parse/scanner_lex.re"
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <sstream>

#include "src/ir/dfa/dfa.h"
#include "src/globals.h"
#include "src/parse/extop.h"
#include "src/parse/parser.h"
#include "src/parse/scanner.h"
#include "src/parse/unescape.h"
#include "y.tab.h"
#include "src/util/s_to_n32_unsafe.h"

extern YYSTYPE yylval;

#define	YYCTYPE		unsigned char
#define	YYCURSOR	cur
#define	YYLIMIT		lim
#define	YYMARKER	ptr
#define	YYCTXMARKER ctx
#define	YYFILL(n)	{ fill (n); }

namespace re2c
{

// source code is in ASCII: pointers have type 'char *'
// but re2c makes an implicit assumption that YYCTYPE is unsigned
// when it generates comparisons
#line 32 "../src/parse/scanner_lex.re"


#line 50 "../src/parse/scanner_lex.re"


Scanner::ParseMode Scanner::echo()
{
	bool ignore_eoc = false;
	int  ignore_cnt = 0;

	if (eof && cur == eof) // Catch EOF
	{
		return Stop;
	}

	tok = cur;
echo:

#line 52 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};

	if ((YYLIMIT - YYCURSOR) < 16) YYFILL(16);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '%') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '$') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '*') {
			if (yych <= ')') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 193 "../src/parse/scanner_lex.re"
	{
					if (!(ignore_eoc || DFlag || flag_skeleton))
					{
						out.write(tok, tok_len () - 1);
						// -1 so we don't write out the \0
					}
					if(cur == eof)
					{
						return Stop;
					}
				}
#line 123 "src/parse/scanner_lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 204 "../src/parse/scanner_lex.re"
	{
					goto echo;
				}
#line 131 "src/parse/scanner_lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy89;
	}
	if (yych == '#') goto yy91;
yy7:
#line 180 "../src/parse/scanner_lex.re"
	{
					if (ignore_eoc)
					{
						ignore_cnt++;
					}
					else if (!(DFlag || flag_skeleton))
					{
						out.write(tok, tok_len ());
					}
					tok = pos = cur;
					cline++;
					goto echo;
				}
#line 154 "src/parse/scanner_lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy32;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy84;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych != '*') goto yy5;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy13;
yy12:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy7;
		} else {
			goto yy5;
		}
	} else {
		goto yy85;
	}
yy13:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy16;
	case 'i':	goto yy15;
	case 'm':	goto yy17;
	case 'r':	goto yy19;
	case 't':	goto yy14;
	case 'u':	goto yy18;
	default:	goto yy12;
	}
yy14:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy74;
	goto yy12;
yy15:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy63;
	goto yy12;
yy16:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy50;
	goto yy12;
yy17:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy42;
	goto yy12;
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy34;
	goto yy12;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy20;
	if (yych == 'u') goto yy21;
	goto yy12;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy31;
	goto yy12;
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'l') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 's') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 81 "../src/parse/scanner_lex.re"
	{
					if (rFlag)
					{
						mapCodeName.clear();
					}
					else
					{
						fatal("found 'rules:re2c' block without -r flag");
					}
					tok = cur;
					return Rules;
				}
#line 251 "src/parse/scanner_lex.cc"
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
yy32:
	++YYCURSOR;
#line 66 "../src/parse/scanner_lex.re"
	{
					if (rFlag)
					{
						fatal("found standard 're2c' block while using -r flag");
					}
					if (!(DFlag || flag_skeleton))
					{
						const size_t lexeme_len = cur[-1] == '{'
							? sizeof ("%{") - 1
							: sizeof ("/*!re2c") - 1;
						out.write(tok, tok_len () - lexeme_len);
					}
					tok = cur;
					return Parse;
				}
#line 273 "src/parse/scanner_lex.cc"
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 93 "../src/parse/scanner_lex.re"
	{
					if (!rFlag)
					{
						fatal("found 'use:re2c' block without -r flag");
					}
					reuse();
					if (!(DFlag || flag_skeleton))
					{
						const size_t lexeme_len = sizeof ("/*!use:re2c") - 1;
						out.write(tok, tok_len () - lexeme_len);
					}
					tok = cur;
					return Reuse;
				}
#line 303 "src/parse/scanner_lex.cc"
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'x') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 107 "../src/parse/scanner_lex.re"
	{
					if (!DFlag)
					{
						out.insert_yymaxfill ();
					}
					tok = pos = cur;
					ignore_eoc = true;
					goto echo;
				}
#line 328 "src/parse/scanner_lex.cc"
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 's') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'a') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 116 "../src/parse/scanner_lex.re"
	{
					tok = pos = cur;
					out.insert_state_goto (topIndent);
					ignore_eoc = true;
					goto echo;
				}
#line 360 "src/parse/scanner_lex.cc"
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 122 "../src/parse/scanner_lex.re"
	{
					tok = pos = cur;
					ignore_eoc = true;
					goto echo;
				}
#line 387 "src/parse/scanner_lex.cc"
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'p') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 's') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 127 "../src/parse/scanner_lex.re"
	{
					tok = pos = cur;
					ignore_eoc = true;
					if (!DFlag)
					{
						out.insert_line_info ();
						out << "\n";
						out.insert_types ();
						out << "\n";
						out.write_line_info (cline, get_fname ().c_str ());
					}
					goto echo;
				}
#line 420 "src/parse/scanner_lex.cc"
yy84:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy87;
	if (yych == '\r') goto yy86;
yy85:
#line 158 "../src/parse/scanner_lex.re"
	{
					if (ignore_eoc)
					{
						if (ignore_cnt)
						{
							out << "\n";
							out.write_line_info (cline, get_fname ().c_str ());
						}
						ignore_eoc = false;
						ignore_cnt = 0;
					}
					else if (!(DFlag || flag_skeleton))
					{
						out.write(tok, tok_len ());
					}
					tok = pos = cur;
					goto echo;
				}
#line 446 "src/parse/scanner_lex.cc"
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '\n') goto yy12;
yy87:
	++YYCURSOR;
#line 140 "../src/parse/scanner_lex.re"
	{
					cline++;
					if (ignore_eoc)
					{
						if (ignore_cnt)
						{
							out.write_line_info (cline, get_fname ().c_str ());
						}
						ignore_eoc = false;
						ignore_cnt = 0;
					}
					else if (!(DFlag || flag_skeleton))
					{
						out.write(tok, tok_len ());
					}
					tok = pos = cur;
					goto echo;
				}
#line 471 "src/parse/scanner_lex.cc"
yy89:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy89;
	}
	if (yych != '#') goto yy12;
yy91:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy91;
		goto yy12;
	} else {
		if (yych <= ' ') goto yy91;
		if (yych != 'l') goto yy12;
	}
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy98;
	if (yych <= '9') goto yy12;
	goto yy98;
yy97:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy98:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy97;
		goto yy12;
	} else {
		if (yych <= ' ') goto yy97;
		if (yych <= '0') goto yy12;
		if (yych >= ':') goto yy12;
	}
yy99:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy99;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy12;
		if (yych <= '\t') goto yy101;
		if (yych <= '\n') goto yy103;
		goto yy12;
	} else {
		if (yych <= '\r') goto yy105;
		if (yych != ' ') goto yy12;
	}
yy101:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy101;
		goto yy12;
	} else {
		if (yych <= ' ') goto yy101;
		if (yych == '"') goto yy106;
		goto yy12;
	}
yy103:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 176 "../src/parse/scanner_lex.re"
	{
					set_sourceline ();
					goto echo;
				}
#line 551 "src/parse/scanner_lex.cc"
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy103;
	goto yy12;
yy106:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy106;
	}
	if (yych <= '\n') goto yy12;
	if (yych <= '"') goto yy109;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy12;
	goto yy106;
yy109:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '\n') goto yy103;
	if (yych == '\r') goto yy105;
	goto yy12;
}
#line 207 "../src/parse/scanner_lex.re"

}

int Scanner::scan()
{
	uint32_t depth;

	bool negated_class = false;
	std::vector<uint32_t> cpoints;
scan:
	tchar = cur - pos;
	tline = cline;
	tok = cur;
	switch (lexer_state)
	{
		case LEX_NORMAL:       goto start;
		case LEX_CONFIG:       goto config;
		case LEX_CONFIG_VALUE: goto value;
		case LEX_FLEX_NAME:    goto flex_name;
	}

start:

#line 600 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 224,   0, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		224, 192,  64, 192, 192, 192, 192, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		216, 216, 216, 216, 216, 216, 216, 216, 
		216, 216, 192, 192, 192, 192, 192, 192, 
		192, 208, 208, 208, 208, 208, 208, 208, 
		208, 208, 208, 208, 208, 208, 208, 208, 
		208, 208, 208, 208, 208, 208, 208, 208, 
		208, 208, 208, 192,   0, 192, 192, 208, 
		192, 208, 208, 208, 208, 208, 208, 208, 
		208, 208, 208, 208, 208, 208, 208, 208, 
		208, 208, 208, 208, 208, 208, 208, 208, 
		208, 208, 208, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
	};
	if ((YYLIMIT - YYCURSOR) < 6) YYFILL(6);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '.') {
		if (yych <= '"') {
			if (yych <= '\f') {
				if (yych <= 0x08) goto yy112;
				if (yych <= '\t') goto yy114;
				if (yych <= '\n') goto yy116;
			} else {
				if (yych <= 0x1F) {
					if (yych <= '\r') goto yy118;
				} else {
					if (yych <= ' ') goto yy114;
					if (yych >= '"') goto yy119;
				}
			}
		} else {
			if (yych <= ')') {
				if (yych <= '%') {
					if (yych >= '%') goto yy121;
				} else {
					if (yych <= '&') goto yy112;
					if (yych <= '\'') goto yy122;
					goto yy124;
				}
			} else {
				if (yych <= '+') {
					if (yych <= '*') goto yy126;
					goto yy128;
				} else {
					if (yych <= ',') goto yy124;
					if (yych >= '.') goto yy130;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '<') {
				if (yych <= '9') {
					if (yych <= '/') goto yy132;
					goto yy133;
				} else {
					if (yych <= ':') goto yy134;
					if (yych <= ';') goto yy124;
					goto yy135;
				}
			} else {
				if (yych <= '?') {
					if (yych <= '>') goto yy124;
					goto yy128;
				} else {
					if (yych <= '@') goto yy112;
					if (yych <= 'Z') goto yy133;
					goto yy136;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy124;
				} else {
					if (yych != '`') goto yy133;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy138;
					goto yy133;
				} else {
					if (yych <= '{') goto yy139;
					if (yych <= '|') goto yy124;
				}
			}
		}
	}
yy112:
	++YYCURSOR;
yy113:
#line 422 "../src/parse/scanner_lex.re"
	{
					fatalf("unexpected character: '%c'", *tok);
					goto scan;
				}
#line 720 "src/parse/scanner_lex.cc"
yy114:
	++YYCURSOR;
	yych = (YYCTYPE)*YYCURSOR;
	goto yy236;
yy115:
#line 406 "../src/parse/scanner_lex.re"
	{
					goto scan;
				}
#line 730 "src/parse/scanner_lex.cc"
yy116:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy214;
	} else {
		if (yych <= ' ') goto yy214;
		if (yych == '#') goto yy216;
	}
yy117:
#line 415 "../src/parse/scanner_lex.re"
	{
					if (cur == eof) return 0;
					pos = cur;
					cline++;
					goto scan;
				}
#line 748 "src/parse/scanner_lex.cc"
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy213;
	goto yy113;
yy119:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych != '\n') goto yy209;
yy120:
#line 285 "../src/parse/scanner_lex.re"
	{
					fatal("unterminated string constant (missing \")");
				}
#line 762 "src/parse/scanner_lex.cc"
yy121:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy201;
	goto yy113;
yy122:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych != '\n') goto yy204;
yy123:
#line 288 "../src/parse/scanner_lex.re"
	{
					fatal("unterminated string constant (missing ')");
				}
#line 776 "src/parse/scanner_lex.cc"
yy124:
	++YYCURSOR;
yy125:
#line 301 "../src/parse/scanner_lex.re"
	{
					return *tok;
				}
#line 784 "src/parse/scanner_lex.cc"
yy126:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '/') goto yy201;
#line 305 "../src/parse/scanner_lex.re"
	{
					yylval.op = *tok;
					return STAR;
				}
#line 793 "src/parse/scanner_lex.cc"
yy128:
	++YYCURSOR;
#line 309 "../src/parse/scanner_lex.re"
	{
					yylval.op = *tok;
					return CLOSE;
				}
#line 801 "src/parse/scanner_lex.cc"
yy130:
	++YYCURSOR;
#line 401 "../src/parse/scanner_lex.re"
	{
					yylval.regexp = mkDot();
					return RANGE;
				}
#line 809 "src/parse/scanner_lex.cc"
yy132:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy197;
	if (yych == '/') goto yy199;
	goto yy125;
yy133:
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy165;
yy134:
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy193;
	goto yy113;
yy135:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '!') goto yy184;
	if (yych == '>') goto yy186;
	goto yy125;
yy136:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '^') goto yy182;
#line 292 "../src/parse/scanner_lex.re"
	{                       goto cpoint_class; }
#line 835 "src/parse/scanner_lex.cc"
yy138:
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy166;
	goto yy165;
yy139:
	yyaccept = 4;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 8) {
		goto yy141;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy146;
		if (yych >= 'A') goto yy144;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy144;
		} else {
			if (yych <= '`') goto yy140;
			if (yych <= 'z') goto yy144;
		}
	}
yy140:
#line 230 "../src/parse/scanner_lex.re"
	{
					depth = 1;
					goto code;
				}
#line 864 "src/parse/scanner_lex.cc"
yy141:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 8) {
		goto yy141;
	}
	if (yych <= '^') {
		if (yych <= ',') {
			if (yych >= ',') goto yy152;
		} else {
			if (yych <= '@') goto yy143;
			if (yych <= 'Z') goto yy144;
		}
	} else {
		if (yych <= 'z') {
			if (yych != '`') goto yy144;
		} else {
			if (yych == '}') goto yy150;
		}
	}
yy143:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy117;
			} else {
				goto yy120;
			}
		} else {
			if (yyaccept == 2) {
				goto yy123;
			} else {
				goto yy125;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy140;
			} else {
				goto yy147;
			}
		} else {
			goto yy172;
		}
	}
yy144:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy144;
	}
	if (yych == '}') goto yy148;
	goto yy143;
yy146:
	++YYCURSOR;
yy147:
#line 345 "../src/parse/scanner_lex.re"
	{
					fatal("illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
				}
#line 929 "src/parse/scanner_lex.cc"
yy148:
	++YYCURSOR;
#line 349 "../src/parse/scanner_lex.re"
	{
					if (!FFlag) {
						fatal("curly braces for names only allowed with -F switch");
					}
					yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
					return ID;
				}
#line 940 "src/parse/scanner_lex.cc"
yy150:
	++YYCURSOR;
#line 314 "../src/parse/scanner_lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.extop.min))
					{
						fatal ("repetition count overflow");
					}
					yylval.extop.max = yylval.extop.min;
					return CLOSESIZE;
				}
#line 952 "src/parse/scanner_lex.cc"
yy152:
	yyaccept = 5;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy147;
	if (yych <= '9') goto yy155;
	if (yych != '}') goto yy147;
	++YYCURSOR;
#line 336 "../src/parse/scanner_lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					yylval.extop.max = UINT32_MAX;
					return CLOSESIZE;
				}
#line 969 "src/parse/scanner_lex.cc"
yy155:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy143;
	if (yych <= '9') goto yy155;
	if (yych != '}') goto yy143;
	++YYCURSOR;
#line 323 "../src/parse/scanner_lex.re"
	{
					const char * p = strchr (tok, ',');
					if (!s_to_u32_unsafe (tok + 1, p, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.extop.max))
					{
						fatal ("repetition upper bound overflow");
					}
					return CLOSESIZE;
				}
#line 991 "src/parse/scanner_lex.cc"
yy159:
	++YYCURSOR;
yy160:
	YYCURSOR = YYCTXMARKER;
#line 382 "../src/parse/scanner_lex.re"
	{
					if (!FFlag) {
						yylval.str = new std::string (tok, tok_len ());
						return ID;
					} else {
						/* Add one char in front and one behind instead of 's or "s */
						SubStr s (tok, tok_len ());
						if (bCaseInsensitive || bCaseInverted)
						{
							yylval.regexp = strToCaseInsensitiveRE (s);
						}
						else
						{
							yylval.regexp = strToRE (s);
						}
						return STRING;
					}
				}
#line 1015 "src/parse/scanner_lex.cc"
yy161:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy180;
yy162:
	++YYCURSOR;
yy163:
	YYCURSOR = YYCTXMARKER;
#line 377 "../src/parse/scanner_lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					return ID;
				}
#line 1028 "src/parse/scanner_lex.cc"
yy164:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
yy165:
	if (yych <= '9') {
		if (yych <= ' ') {
			if (yych == '\t') goto yy161;
			if (yych <= 0x1F) goto yy159;
			goto yy161;
		} else {
			if (yych == ',') goto yy162;
			if (yych <= '/') goto yy159;
			goto yy164;
		}
	} else {
		if (yych <= 'Z') {
			if (yych <= '<') goto yy159;
			if (yych <= '>') goto yy162;
			if (yych <= '@') goto yy159;
			goto yy164;
		} else {
			if (yych <= '_') {
				if (yych <= '^') goto yy159;
				goto yy164;
			} else {
				if (yych <= '`') goto yy159;
				if (yych <= 'z') goto yy164;
				goto yy159;
			}
		}
	}
yy166:
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy165;
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy165;
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy165;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy160;
		if (yych <= '9') goto yy170;
		if (yych <= '@') goto yy160;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy160;
		} else {
			if (yych <= '`') goto yy160;
			if (yych >= '{') goto yy160;
		}
	}
yy170:
	yyaccept = 6;
	YYMARKER = ++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '9') {
			if (yych >= '0') goto yy170;
		} else {
			if (yych <= ':') goto yy174;
			if (yych >= '@') goto yy173;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') goto yy170;
			if (yych >= '_') goto yy170;
		} else {
			if (yych <= '`') goto yy172;
			if (yych <= 'z') goto yy170;
		}
	}
yy172:
#line 357 "../src/parse/scanner_lex.re"
	{
					tok += 5; /* skip "re2c:" */
					lexer_state = LEX_CONFIG;
					yylval.str = new std::string (tok, tok_len ());
					return CONFIG;
				}
#line 1114 "src/parse/scanner_lex.cc"
yy173:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy143;
		if (yych <= '9') goto yy175;
		if (yych <= '@') goto yy143;
		goto yy175;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy143;
			goto yy175;
		} else {
			if (yych <= '`') goto yy143;
			if (yych <= 'z') goto yy175;
			goto yy143;
		}
	}
yy174:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy143;
		if (yych <= '9') goto yy170;
		if (yych <= '@') goto yy143;
		goto yy170;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy143;
			goto yy170;
		} else {
			if (yych <= '`') goto yy143;
			if (yych <= 'z') goto yy170;
			goto yy143;
		}
	}
yy175:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy172;
		if (yych <= '9') goto yy175;
		if (yych <= '@') goto yy172;
		goto yy175;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy172;
			goto yy175;
		} else {
			if (yych <= '`') goto yy172;
			if (yych <= 'z') goto yy175;
			goto yy172;
		}
	}
yy177:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 364 "../src/parse/scanner_lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					if (FFlag)
					{
						lexer_state = LEX_FLEX_NAME;
						return FID;
					}
					else
					{
						return ID;
					}
				}
#line 1186 "src/parse/scanner_lex.cc"
yy179:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy180:
	if (yybm[0+yych] & 32) {
		goto yy179;
	}
	if (yych == ',') goto yy181;
	if (yych <= '<') goto yy177;
	if (yych >= '?') goto yy177;
yy181:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy163;
yy182:
	++YYCURSOR;
#line 293 "../src/parse/scanner_lex.re"
	{ negated_class = true; goto cpoint_class; }
#line 1205 "src/parse/scanner_lex.cc"
yy184:
	++YYCURSOR;
#line 298 "../src/parse/scanner_lex.re"
	{
					return SETUP;
				}
#line 1212 "src/parse/scanner_lex.cc"
yy186:
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy188;
yy187:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
yy188:
	if (yych <= '9') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy143;
			goto yy187;
		} else {
			if (yych == ' ') goto yy187;
			goto yy143;
		}
	} else {
		if (yych <= '=') {
			if (yych <= ':') goto yy192;
			if (yych <= '<') goto yy143;
			goto yy191;
		} else {
			if (yych != '{') goto yy143;
		}
	}
yy189:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 295 "../src/parse/scanner_lex.re"
	{
					return NOCOND;
				}
#line 1246 "src/parse/scanner_lex.cc"
yy191:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy189;
	goto yy143;
yy192:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy189;
	goto yy143;
yy193:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '>') goto yy195;
#line 239 "../src/parse/scanner_lex.re"
	{
					tok += 2; /* skip ":=" */
					depth = 0;
					goto code;
				}
#line 1264 "src/parse/scanner_lex.cc"
yy195:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 235 "../src/parse/scanner_lex.re"
	{
					return *tok;
				}
#line 1272 "src/parse/scanner_lex.cc"
yy197:
	++YYCURSOR;
#line 248 "../src/parse/scanner_lex.re"
	{
					depth = 1;
					goto comment;
				}
#line 1280 "src/parse/scanner_lex.cc"
yy199:
	++YYCURSOR;
#line 245 "../src/parse/scanner_lex.re"
	{
				goto nextLine;
			}
#line 1287 "src/parse/scanner_lex.cc"
yy201:
	++YYCURSOR;
#line 254 "../src/parse/scanner_lex.re"
	{
					tok = cur;
					return 0;
				}
#line 1295 "src/parse/scanner_lex.cc"
yy203:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy204:
	if (yybm[0+yych] & 64) {
		goto yy203;
	}
	if (yych <= '\n') goto yy143;
	if (yych <= '\'') goto yy206;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy143;
	goto yy203;
yy206:
	++YYCURSOR;
#line 272 "../src/parse/scanner_lex.re"
	{
					SubStr s (tok + 1, tok_len () - 2); // -2 to omit quotes
					if (bCaseInverted)
					{
						yylval.regexp = strToRE (s);
					}
					else
					{
						yylval.regexp = strToCaseInsensitiveRE (s);
					}
					return STRING;
				}
#line 1326 "src/parse/scanner_lex.cc"
yy208:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy209:
	if (yybm[0+yych] & 128) {
		goto yy208;
	}
	if (yych <= '\n') goto yy143;
	if (yych <= '"') goto yy211;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy143;
	goto yy208;
yy211:
	++YYCURSOR;
#line 259 "../src/parse/scanner_lex.re"
	{
					SubStr s (tok + 1, tok_len () - 2); // -2 to omit quotes
					if (bCaseInsensitive || bCaseInverted)
					{
						yylval.regexp = strToCaseInsensitiveRE (s);
					}
					else
					{
						yylval.regexp = strToRE (s);
					}
					return STRING;
				}
#line 1357 "src/parse/scanner_lex.cc"
yy213:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych != '\t') goto yy117;
	} else {
		if (yych <= ' ') goto yy214;
		if (yych == '#') goto yy216;
		goto yy117;
	}
yy214:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy214;
		goto yy143;
	} else {
		if (yych <= ' ') goto yy214;
		if (yych != '#') goto yy143;
	}
yy216:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy216;
		goto yy143;
	} else {
		if (yych <= ' ') goto yy216;
		if (yych != 'l') goto yy143;
	}
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy143;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy143;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy143;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy223;
	if (yych <= '9') goto yy143;
	goto yy223;
yy222:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy223:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy222;
		goto yy143;
	} else {
		if (yych <= ' ') goto yy222;
		if (yych <= '0') goto yy143;
		if (yych >= ':') goto yy143;
	}
yy224:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy143;
		} else {
			if (yych <= '\n') goto yy228;
			if (yych <= '\f') goto yy143;
			goto yy230;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy143;
		} else {
			if (yych <= '/') goto yy143;
			if (yych <= '9') goto yy224;
			goto yy143;
		}
	}
yy226:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy226;
		goto yy143;
	} else {
		if (yych <= ' ') goto yy226;
		if (yych == '"') goto yy231;
		goto yy143;
	}
yy228:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 410 "../src/parse/scanner_lex.re"
	{
					set_sourceline ();
					goto scan;
				}
#line 1455 "src/parse/scanner_lex.cc"
yy230:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy228;
	goto yy143;
yy231:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy143;
		goto yy231;
	} else {
		if (yych <= '"') goto yy234;
		if (yych != '\\') goto yy231;
	}
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy143;
	goto yy231;
yy234:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy228;
	if (yych == '\r') goto yy230;
	goto yy143;
yy235:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy236:
	if (yych == '\t') goto yy235;
	if (yych == ' ') goto yy235;
	goto yy115;
}
#line 426 "../src/parse/scanner_lex.re"


flex_name:

#line 1495 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy241;
	if (yych == '\r') goto yy243;
	++YYCURSOR;
yy240:
#line 437 "../src/parse/scanner_lex.re"
	{
		YYCURSOR = tok;
		goto start;
	}
#line 1509 "src/parse/scanner_lex.cc"
yy241:
	++YYCURSOR;
yy242:
#line 431 "../src/parse/scanner_lex.re"
	{
		YYCURSOR = tok;
		lexer_state = LEX_NORMAL;
		return FID_END;
	}
#line 1519 "src/parse/scanner_lex.cc"
yy243:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '\n') goto yy240;
	++YYCURSOR;
	yych = (YYCTYPE)*YYCURSOR;
	goto yy242;
}
#line 441 "../src/parse/scanner_lex.re"


cpoint_class:
	tok = cur;

#line 1533 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\\') {
		if (yych <= 0x1F) goto yy247;
		if (yych <= '[') goto yy249;
		goto yy251;
	} else {
		if (yych <= ']') goto yy253;
		if (yych <= '~') goto yy249;
	}
yy247:
	++YYCURSOR;
#line 453 "../src/parse/scanner_lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in character range"); }
#line 1551 "src/parse/scanner_lex.cc"
yy249:
	++YYCURSOR;
#line 462 "../src/parse/scanner_lex.re"
	{ cpoints.push_back (static_cast<uint32_t> (tok[0])); goto cpoint_class; }
#line 1556 "src/parse/scanner_lex.cc"
yy251:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= 'b') {
		if (yych <= 'U') {
			if (yych <= '3') {
				if (yych <= 0x1F) goto yy252;
				if (yych <= '/') goto yy255;
				goto yy257;
			} else {
				if (yych <= '7') goto yy259;
				if (yych <= 'T') goto yy255;
				goto yy260;
			}
		} else {
			if (yych <= '[') {
				if (yych == 'X') goto yy262;
				goto yy255;
			} else {
				if (yych <= '\\') goto yy263;
				if (yych <= ']') goto yy265;
				if (yych <= '`') goto yy255;
				goto yy263;
			}
		}
	} else {
		if (yych <= 's') {
			if (yych <= 'm') {
				if (yych == 'f') goto yy263;
				goto yy255;
			} else {
				if (yych <= 'n') goto yy263;
				if (yych == 'r') goto yy263;
				goto yy255;
			}
		} else {
			if (yych <= 'v') {
				if (yych == 'u') goto yy262;
				goto yy263;
			} else {
				if (yych == 'x') goto yy267;
				if (yych <= '~') goto yy255;
			}
		}
	}
yy252:
#line 456 "../src/parse/scanner_lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in escape sequence"); }
#line 1604 "src/parse/scanner_lex.cc"
yy253:
	++YYCURSOR;
#line 471 "../src/parse/scanner_lex.re"
	{
		yylval.regexp = cpoint_class (cpoints, negated_class);
		return RANGE;
	}
#line 1612 "src/parse/scanner_lex.cc"
yy255:
	++YYCURSOR;
#line 464 "../src/parse/scanner_lex.re"
	{
		const char c = tok[1];
		warn.useless_escape (tline, tok - pos, c);
		cpoints.push_back (static_cast<uint32_t> (c));
		goto cpoint_class;
	}
#line 1622 "src/parse/scanner_lex.cc"
yy257:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy258;
	if (yych <= '7') goto yy282;
yy258:
#line 455 "../src/parse/scanner_lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in octal escape sequence"); }
#line 1631 "src/parse/scanner_lex.cc"
yy259:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy258;
yy260:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy261;
		if (yych <= '9') goto yy275;
	} else {
		if (yych <= 'F') goto yy275;
		if (yych <= '`') goto yy261;
		if (yych <= 'f') goto yy275;
	}
yy261:
#line 454 "../src/parse/scanner_lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in hexadecimal escape sequence"); }
#line 1649 "src/parse/scanner_lex.cc"
yy262:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy261;
		if (yych <= '9') goto yy272;
		goto yy261;
	} else {
		if (yych <= 'F') goto yy272;
		if (yych <= '`') goto yy261;
		if (yych <= 'f') goto yy272;
		goto yy261;
	}
yy263:
	++YYCURSOR;
#line 460 "../src/parse/scanner_lex.re"
	{ cpoints.push_back (unesc_escapable (tok));          goto cpoint_class; }
#line 1667 "src/parse/scanner_lex.cc"
yy265:
	++YYCURSOR;
#line 461 "../src/parse/scanner_lex.re"
	{ cpoints.push_back (']');                            goto cpoint_class; }
#line 1672 "src/parse/scanner_lex.cc"
yy267:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy261;
		if (yych >= ':') goto yy261;
	} else {
		if (yych <= 'F') goto yy268;
		if (yych <= '`') goto yy261;
		if (yych >= 'g') goto yy261;
	}
yy268:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy269;
		if (yych <= '9') goto yy270;
	} else {
		if (yych <= 'F') goto yy270;
		if (yych <= '`') goto yy269;
		if (yych <= 'f') goto yy270;
	}
yy269:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy258;
	} else {
		goto yy261;
	}
yy270:
	++YYCURSOR;
#line 458 "../src/parse/scanner_lex.re"
	{ cpoints.push_back (unesc_hex (tok, cur));           goto cpoint_class; }
#line 1705 "src/parse/scanner_lex.cc"
yy272:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy269;
		if (yych >= ':') goto yy269;
	} else {
		if (yych <= 'F') goto yy273;
		if (yych <= '`') goto yy269;
		if (yych >= 'g') goto yy269;
	}
yy273:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy269;
		if (yych >= ':') goto yy269;
	} else {
		if (yych <= 'F') goto yy274;
		if (yych <= '`') goto yy269;
		if (yych >= 'g') goto yy269;
	}
yy274:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy269;
		if (yych <= '9') goto yy270;
		goto yy269;
	} else {
		if (yych <= 'F') goto yy270;
		if (yych <= '`') goto yy269;
		if (yych <= 'f') goto yy270;
		goto yy269;
	}
yy275:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy269;
		if (yych >= ':') goto yy269;
	} else {
		if (yych <= 'F') goto yy276;
		if (yych <= '`') goto yy269;
		if (yych >= 'g') goto yy269;
	}
yy276:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy269;
		if (yych >= ':') goto yy269;
	} else {
		if (yych <= 'F') goto yy277;
		if (yych <= '`') goto yy269;
		if (yych >= 'g') goto yy269;
	}
yy277:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy269;
		if (yych >= ':') goto yy269;
	} else {
		if (yych <= 'F') goto yy278;
		if (yych <= '`') goto yy269;
		if (yych >= 'g') goto yy269;
	}
yy278:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy269;
		if (yych >= ':') goto yy269;
	} else {
		if (yych <= 'F') goto yy279;
		if (yych <= '`') goto yy269;
		if (yych >= 'g') goto yy269;
	}
yy279:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy269;
		if (yych >= ':') goto yy269;
	} else {
		if (yych <= 'F') goto yy280;
		if (yych <= '`') goto yy269;
		if (yych >= 'g') goto yy269;
	}
yy280:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy269;
		if (yych >= ':') goto yy269;
	} else {
		if (yych <= 'F') goto yy281;
		if (yych <= '`') goto yy269;
		if (yych >= 'g') goto yy269;
	}
yy281:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy269;
		if (yych <= '9') goto yy270;
		goto yy269;
	} else {
		if (yych <= 'F') goto yy270;
		if (yych <= '`') goto yy269;
		if (yych <= 'f') goto yy270;
		goto yy269;
	}
yy282:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy269;
	if (yych >= '8') goto yy269;
	++YYCURSOR;
#line 459 "../src/parse/scanner_lex.re"
	{ cpoints.push_back (unesc_oct (tok, cur));           goto cpoint_class; }
#line 1817 "src/parse/scanner_lex.cc"
}
#line 475 "../src/parse/scanner_lex.re"


code:

#line 1824 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48, 112,   0,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		112,  48,  16,  48,  48,  48,  48,  32, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		176, 176, 176, 176, 176, 176, 176, 176, 
		176, 176,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,   0,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy287;
			if (yych <= '\t') goto yy289;
			goto yy291;
		} else {
			if (yych == '"') goto yy293;
			goto yy289;
		}
	} else {
		if (yych <= '{') {
			if (yych <= '\'') goto yy294;
			if (yych <= 'z') goto yy289;
			goto yy295;
		} else {
			if (yych == '}') goto yy297;
			goto yy289;
		}
	}
yy287:
	++YYCURSOR;
#line 538 "../src/parse/scanner_lex.re"
	{
					if (cur == eof)
					{
						if (depth)
						{
							fatal("missing '}'");
						}
						return 0;
					}
					goto code;
				}
#line 1897 "src/parse/scanner_lex.cc"
yy289:
	++YYCURSOR;
yy290:
#line 552 "../src/parse/scanner_lex.re"
	{
					goto code;
				}
#line 1905 "src/parse/scanner_lex.cc"
yy291:
	YYCTXMARKER = YYCURSOR + 1;
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy308;
		} else {
			if (yych <= '\n') goto yy310;
			if (yych >= '\r') goto yy310;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy308;
		} else {
			if (yych == '#') goto yy311;
		}
	}
yy292:
#line 519 "../src/parse/scanner_lex.re"
	{
					if (depth == 0)
					{
						tok += strspn(tok, " \t\r\n");
						while (cur > tok && strchr(" \t\r\n", cur[-1]))
						{
							--cur;
						}
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return CODE;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1945 "src/parse/scanner_lex.cc"
yy293:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy290;
	goto yy306;
yy294:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy290;
	goto yy300;
yy295:
	++YYCURSOR;
#line 491 "../src/parse/scanner_lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else
					{
						++depth;
					}
					goto code;
				}
#line 1970 "src/parse/scanner_lex.cc"
yy297:
	++YYCURSOR;
#line 479 "../src/parse/scanner_lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else if (--depth == 0)
					{
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return CODE;
					}
					goto code;
				}
#line 1986 "src/parse/scanner_lex.cc"
yy299:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy300:
	if (yybm[0+yych] & 16) {
		goto yy299;
	}
	if (yych <= '\n') goto yy301;
	if (yych <= '\'') goto yy303;
	goto yy302;
yy301:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy292;
		} else {
			goto yy290;
		}
	} else {
		goto yy309;
	}
yy302:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy301;
	goto yy299;
yy303:
	++YYCURSOR;
#line 549 "../src/parse/scanner_lex.re"
	{
					goto code;
				}
#line 2021 "src/parse/scanner_lex.cc"
yy305:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy306:
	if (yybm[0+yych] & 32) {
		goto yy305;
	}
	if (yych <= '\n') goto yy301;
	if (yych <= '"') goto yy303;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy301;
	goto yy305;
yy308:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy330;
	} else {
		if (yych <= ' ') goto yy330;
		if (yych == '#') goto yy311;
	}
yy309:
	YYCURSOR = YYCTXMARKER;
#line 506 "../src/parse/scanner_lex.re"
	{
					if (depth == 0)
					{
						goto code;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 2062 "src/parse/scanner_lex.cc"
yy310:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy309;
yy311:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy311;
	}
	if (yych != 'l') goto yy301;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy301;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy301;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy301;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy318;
	if (yych <= '9') goto yy301;
	goto yy318;
yy317:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy318:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy317;
		goto yy301;
	} else {
		if (yych <= ' ') goto yy317;
		if (yych <= '0') goto yy301;
		if (yych >= ':') goto yy301;
	}
yy319:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy319;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy301;
		if (yych <= '\t') goto yy321;
		if (yych <= '\n') goto yy323;
		goto yy301;
	} else {
		if (yych <= '\r') goto yy325;
		if (yych != ' ') goto yy301;
	}
yy321:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy321;
		goto yy301;
	} else {
		if (yych <= ' ') goto yy321;
		if (yych == '"') goto yy326;
		goto yy301;
	}
yy323:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 502 "../src/parse/scanner_lex.re"
	{
					set_sourceline ();
					goto code;
				}
#line 2134 "src/parse/scanner_lex.cc"
yy325:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy323;
	goto yy301;
yy326:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy301;
		goto yy326;
	} else {
		if (yych <= '"') goto yy329;
		if (yych != '\\') goto yy326;
	}
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy301;
	goto yy326;
yy329:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy323;
	if (yych == '\r') goto yy325;
	goto yy301;
yy330:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy330;
		goto yy301;
	} else {
		if (yych <= ' ') goto yy330;
		if (yych == '#') goto yy311;
		goto yy301;
	}
}
#line 555 "../src/parse/scanner_lex.re"


comment:

#line 2178 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ')') {
		if (yych == '\n') goto yy336;
	} else {
		if (yych <= '*') goto yy338;
		if (yych == '/') goto yy339;
	}
	++YYCURSOR;
yy335:
#line 587 "../src/parse/scanner_lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					goto comment;
				}
#line 2233 "src/parse/scanner_lex.cc"
yy336:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy344;
	}
	if (yych == '#') goto yy347;
yy337:
#line 578 "../src/parse/scanner_lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					tok = pos = cur;
					cline++;
					goto comment;
				}
#line 2251 "src/parse/scanner_lex.cc"
yy338:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy342;
	goto yy335;
yy339:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '*') goto yy335;
	++YYCURSOR;
#line 569 "../src/parse/scanner_lex.re"
	{
					++depth;
					fatal("ambiguous /* found");
					goto comment;
				}
#line 2266 "src/parse/scanner_lex.cc"
yy342:
	++YYCURSOR;
#line 559 "../src/parse/scanner_lex.re"
	{
					if (--depth == 0)
					{
						goto scan;
					}
					else
					{
						goto comment;
					}
				}
#line 2280 "src/parse/scanner_lex.cc"
yy344:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy344;
	}
	if (yych == '#') goto yy347;
yy346:
	YYCURSOR = YYMARKER;
	goto yy337;
yy347:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy347;
		goto yy346;
	} else {
		if (yych <= ' ') goto yy347;
		if (yych != 'l') goto yy346;
	}
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy346;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy346;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy346;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy354;
	if (yych <= '9') goto yy346;
	goto yy354;
yy353:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy354:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy353;
		goto yy346;
	} else {
		if (yych <= ' ') goto yy353;
		if (yych <= '0') goto yy346;
		if (yych >= ':') goto yy346;
	}
yy355:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy355;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy346;
		if (yych <= '\t') goto yy357;
		if (yych <= '\n') goto yy359;
		goto yy346;
	} else {
		if (yych <= '\r') goto yy361;
		if (yych != ' ') goto yy346;
	}
yy357:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy357;
		goto yy346;
	} else {
		if (yych <= ' ') goto yy357;
		if (yych == '"') goto yy362;
		goto yy346;
	}
yy359:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 574 "../src/parse/scanner_lex.re"
	{
					set_sourceline ();
					goto comment;
				}
#line 2363 "src/parse/scanner_lex.cc"
yy361:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy359;
	goto yy346;
yy362:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy362;
	}
	if (yych <= '\n') goto yy346;
	if (yych <= '"') goto yy365;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy346;
	goto yy362;
yy365:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '\n') goto yy359;
	if (yych == '\r') goto yy361;
	goto yy346;
}
#line 594 "../src/parse/scanner_lex.re"


nextLine:

#line 2393 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy370;
	++YYCURSOR;
#line 605 "../src/parse/scanner_lex.re"
	{  if(cur == eof) {
                  return 0;
               }
               goto nextLine;
            }
#line 2406 "src/parse/scanner_lex.cc"
yy370:
	++YYCURSOR;
#line 598 "../src/parse/scanner_lex.re"
	{ if(cur == eof) {
                  return 0;
               }
               tok = pos = cur;
               cline++;
               goto scan;
            }
#line 2417 "src/parse/scanner_lex.cc"
}
#line 610 "../src/parse/scanner_lex.re"


config:

#line 2424 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy376;
	} else {
		if (yych <= ' ') goto yy376;
		if (yych == '=') goto yy378;
	}
	++YYCURSOR;
#line 621 "../src/parse/scanner_lex.re"
	{
					fatal("missing '='");
				}
#line 2474 "src/parse/scanner_lex.cc"
yy376:
	++YYCURSOR;
	yych = (YYCTYPE)*YYCURSOR;
	goto yy383;
yy377:
#line 614 "../src/parse/scanner_lex.re"
	{
					goto config;
				}
#line 2484 "src/parse/scanner_lex.cc"
yy378:
	++YYCURSOR;
	yych = (YYCTYPE)*YYCURSOR;
	goto yy381;
yy379:
#line 617 "../src/parse/scanner_lex.re"
	{
					lexer_state = LEX_CONFIG_VALUE;
					return '=';
				}
#line 2495 "src/parse/scanner_lex.cc"
yy380:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy381:
	if (yybm[0+yych] & 128) {
		goto yy380;
	}
	goto yy379;
yy382:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy383:
	if (yych == '\t') goto yy382;
	if (yych == ' ') goto yy382;
	goto yy377;
}
#line 624 "../src/parse/scanner_lex.re"


value:

#line 2519 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 192,   0, 248, 248, 192, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		192, 248, 104, 248, 248, 248, 248, 152, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		252, 252, 252, 252, 252, 252, 252, 252, 
		252, 252, 248, 192, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248,   8, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\r') {
			if (yych <= 0x08) goto yy392;
			if (yych <= '\n') goto yy386;
			if (yych <= '\f') goto yy392;
		} else {
			if (yych <= ' ') {
				if (yych <= 0x1F) goto yy392;
			} else {
				if (yych == '"') goto yy394;
				goto yy392;
			}
		}
	} else {
		if (yych <= '/') {
			if (yych <= '\'') goto yy396;
			if (yych == '-') goto yy389;
			goto yy392;
		} else {
			if (yych <= '9') {
				if (yych <= '0') goto yy387;
				goto yy390;
			} else {
				if (yych != ';') goto yy392;
			}
		}
	}
yy386:
#line 636 "../src/parse/scanner_lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					lexer_state = LEX_NORMAL;
					return VALUE;
				}
#line 2592 "src/parse/scanner_lex.cc"
yy387:
	++YYCURSOR;
	if (yybm[0+(yych = (YYCTYPE)*YYCURSOR)] & 8) {
		goto yy392;
	}
yy388:
#line 628 "../src/parse/scanner_lex.re"
	{
					if (!s_to_i32_unsafe (tok, cur, yylval.number))
					{
						fatal ("configuration value overflow");
					}
					lexer_state = LEX_NORMAL;
					return NUMBER;
				}
#line 2608 "src/parse/scanner_lex.cc"
yy389:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy393;
	if (yych >= ':') goto yy393;
yy390:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 4) {
		goto yy390;
	}
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy392;
		if (yych <= '\n') goto yy388;
		if (yych >= '\r') goto yy388;
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy388;
		} else {
			if (yych == ';') goto yy388;
		}
	}
yy392:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy393:
	if (yybm[0+yych] & 8) {
		goto yy392;
	}
	goto yy386;
yy394:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy394;
	}
	if (yych <= ' ') {
		if (yych == '\n') goto yy386;
		goto yy404;
	} else {
		if (yych <= '"') goto yy392;
		if (yych <= ';') goto yy404;
		goto yy406;
	}
yy396:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy396;
	}
	if (yych <= ' ') {
		if (yych == '\n') goto yy386;
	} else {
		if (yych <= '\'') goto yy392;
		if (yych >= '<') goto yy401;
	}
yy398:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy398;
	}
	if (yych <= '\n') goto yy400;
	if (yych <= '\'') goto yy402;
	goto yy403;
yy400:
	YYCURSOR = YYMARKER;
	goto yy386;
yy401:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy396;
			goto yy398;
		} else {
			if (yych <= '\n') goto yy386;
			if (yych <= '\f') goto yy396;
			goto yy398;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy396;
			goto yy398;
		} else {
			if (yych == ';') goto yy398;
			goto yy396;
		}
	}
yy402:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy386;
yy403:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy400;
	goto yy398;
yy404:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy404;
	}
	if (yych <= '\n') goto yy400;
	if (yych <= '"') goto yy402;
	goto yy407;
yy406:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy394;
			goto yy404;
		} else {
			if (yych <= '\n') goto yy386;
			if (yych <= '\f') goto yy394;
			goto yy404;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy394;
			goto yy404;
		} else {
			if (yych == ';') goto yy404;
			goto yy394;
		}
	}
yy407:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy400;
	goto yy404;
}
#line 641 "../src/parse/scanner_lex.re"

}

static void escape (std::string & dest, const std::string & src)
{
	dest = src;
	size_t l = dest.length();
	for (size_t p = 0; p < l; ++p)
	{
		if (dest[p] == '\\')
		{
			dest.insert(++p, "\\");
			++l;
		}
	}
}

void Scanner::set_sourceline ()
{
sourceline:
	tok = cur;

#line 2774 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy412;
	} else {
		if (yych <= '"') goto yy414;
		if (yych <= '0') goto yy410;
		if (yych <= '9') goto yy415;
	}
yy410:
	++YYCURSOR;
yy411:
#line 686 "../src/parse/scanner_lex.re"
	{
  					goto sourceline;
  				}
#line 2827 "src/parse/scanner_lex.cc"
yy412:
	++YYCURSOR;
#line 674 "../src/parse/scanner_lex.re"
	{
  					if (cur == eof)
  					{
						--cur; 
					}
			  		else
			  		{
			  			pos = cur; 
			  		}
			  		tok = cur;
			  		return; 
				}
#line 2843 "src/parse/scanner_lex.cc"
yy414:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy411;
	goto yy420;
yy415:
	++YYCURSOR;
	yych = (YYCTYPE)*YYCURSOR;
	goto yy418;
yy416:
#line 663 "../src/parse/scanner_lex.re"
	{
					if (!s_to_u32_unsafe (tok, cur, cline))
					{
						fatal ("line number overflow");
					}
					goto sourceline; 
				}
#line 2861 "src/parse/scanner_lex.cc"
yy417:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy418:
	if (yybm[0+yych] & 64) {
		goto yy417;
	}
	goto yy416;
yy419:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy420:
	if (yybm[0+yych] & 128) {
		goto yy419;
	}
	if (yych <= '\n') goto yy421;
	if (yych <= '"') goto yy423;
	goto yy422;
yy421:
	YYCURSOR = YYMARKER;
	goto yy411;
yy422:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy421;
	goto yy419;
yy423:
	++YYCURSOR;
#line 670 "../src/parse/scanner_lex.re"
	{
					escape (in.file_name, std::string (tok + 1, tok_len () - 2)); // -2 to omit quotes
			  		goto sourceline; 
				}
#line 2898 "src/parse/scanner_lex.cc"
}
#line 689 "../src/parse/scanner_lex.re"

}

} // end namespace re2c
