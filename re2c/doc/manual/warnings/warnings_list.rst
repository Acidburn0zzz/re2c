``-Wcondition-order``
    Warn if the generated program makes implicit
    assumptions about condition numbering. You should use either the ``-t, --type-header`` option or
    the ``/*!types:re2c*/`` directive to generate a mapping of condition names to numbers and then use
    the autogenerated condition names.

``-Wempty-character-class``
    Warn if a regular expression contains an empty
    character class. Rationally, trying to match an empty
    character class makes no sense: it should always fail. However, for
    backwards compatibility reasons, ``re2c`` allows empty character classes and
    treats them as empty strings. Use the ``--empty-class`` option to change the default
    behavior.

``-Wmatch-empty-string``
    Warn if a regular expression in a rule is
    nullable (matches an empty string). If the DFA runs in a loop and an empty match
    is unintentional (the input position in not advanced manually), the lexer may
    get stuck in an infinite loop.

``-Wswapped-range``
    Warn if the lower bound of a range is greater than its upper
    bound. The default behavior is to silently swap the range bounds.

``-Wundefined-control-flow``
    Warn if some input strings cause undefined
    control flow in the lexer (the faulty patterns are reported). This is the
    most dangerous and most common mistake. It can be easily fixed by adding
    the default rule (``*``) (this rule has the lowest priority, matches any code unit, and consumes
    exactly one code unit).

``-Wunreachable-rules``
    Warn about rules that are shadowed by other rules and will never match.

``-Wuseless-escape``
    Warn if a symbol is escaped when it shouldn't be.
    By default, re2c silently ignores such escapes, but this may as well indicate a
    typo or error in the escape sequence.

``-Wnondeterministic-tags``
    Warn if tag has ``n``-th degree of nondeterminism, where ``n`` is greater than 1.

