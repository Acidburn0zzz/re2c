/* Generated by re2c 0.13.3.dev on Tue Mar  4 00:28:13 2008 */
/* $Id$ */
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <sstream>
#include <stdarg.h>
#include "scanner.h"
#include "parser.h"
#include "y.tab.h"
#include "globals.h"
#include "dfa.h"

extern YYSTYPE yylval;

#ifndef MAX
#define MAX(a,b) (((a)>(b))?(a):(b))
#endif

#define	BSIZE		8192
#define	YYCTYPE		unsigned char
#define	YYCURSOR	cursor
#define	YYLIMIT		lim
#define	YYMARKER	ptr
#define YYCTXMARKER ctx
#define	YYFILL(n)	{cursor = fill(cursor);}

#define	RETURN(i)	{cur = cursor; return i;}

namespace re2c
{

Scanner::Scanner(std::istream& i, std::ostream& o)
	: in(i)
	, out(o)
	, bot(NULL), tok(NULL), ptr(NULL), cur(NULL), pos(NULL), lim(NULL)
	, top(NULL), eof(NULL), ctx(NULL), tchar(0), tline(0), cline(1), iscfg(0)
{
	;
}

char *Scanner::fill(char *cursor)
{
	if(!eof)
	{
		uint cnt = tok - bot;
		if(cnt)
		{
			memcpy(bot, tok, cnt);
			tok = bot;
			ptr -= cnt;
			cursor -= cnt;
			pos -= cnt;
			lim -= cnt;
		}
		if((top - lim) < BSIZE)
		{
			char *buf = new char[(lim - bot) + BSIZE];
			memcpy(buf, tok, lim - tok);
			tok = buf;
			ptr = &buf[ptr - bot];
			cursor = &buf[cursor - bot];
			pos = &buf[pos - bot];
			lim = &buf[lim - bot];
			top = &lim[BSIZE];
			delete [] bot;
			bot = buf;
		}
		in.read(lim, BSIZE);
		if((cnt = in.gcount()) != BSIZE)
		{
			eof = &lim[cnt];
			*eof++ = '\0';
		}
		lim += cnt;
	}
	return cursor;
}



int Scanner::echo()
{
	char *cursor = cur;
	bool ignore_eoc = false;
	int  ignore_cnt = 0;

	if (eof && cursor == eof) // Catch EOF
	{
		return 0;
	}
	
	tok = cursor;
echo:

{
	YYCTYPE yych;
	unsigned int yyaccept = 0;

	if ((YYLIMIT - YYCURSOR) < 16) YYFILL(16);
	yych = *YYCURSOR;
	if (yych <= ')') {
		if (yych <= 0x00) goto yy7;
		if (yych == 0x0A) goto yy5;
		goto yy9;
	} else {
		if (yych <= '*') goto yy4;
		if (yych != '/') goto yy9;
	}
	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy16;
yy3:
	{
					goto echo;
				}
yy4:
	yych = *++YYCURSOR;
	if (yych == '/') goto yy10;
	goto yy3;
yy5:
	++YYCURSOR;
	{
					if (ignore_eoc)
					{
						ignore_cnt++;
					}
					else if (!DFlag)
					{
						out.write((const char*)(tok), (const char*)(cursor) - (const char*)(tok));
					}
					tok = pos = cursor;
					cline++;
					goto echo;
				}
yy7:
	++YYCURSOR;
	{
					if (!ignore_eoc && !DFlag)
					{
						out.write((const char*)(tok), (const char*)(cursor) - (const char*)(tok) - 1);
						// -1 so we don't write out the \0
					}
					if(cursor == eof)
					{
						RETURN(0);
					}
				}
yy9:
	yych = *++YYCURSOR;
	goto yy3;
yy10:
	yyaccept = 1;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 0x0A) goto yy14;
	if (yych == 0x0D) goto yy12;
yy11:
	{
					if (ignore_eoc)
					{
						if (ignore_cnt)
						{
							out << "\n" << sourceFileInfo;
						}
						ignore_eoc = false;
						ignore_cnt = 0;
					}
					else if (!DFlag)
					{
						out.write((const char*)(tok), (const char*)(cursor) - (const char*)(tok));
					}
					tok = pos = cursor;
					goto echo;
				}
yy12:
	yych = *++YYCURSOR;
	if (yych == 0x0A) goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 0) {
		goto yy3;
	} else {
		goto yy11;
	}
yy14:
	++YYCURSOR;
	{
					cline++;
					if (ignore_eoc)
					{
						if (ignore_cnt)
						{
							out << sourceFileInfo;
						}
						ignore_eoc = false;
						ignore_cnt = 0;
					}
					else if (!DFlag)
					{
						out.write((const char*)(tok), (const char*)(cursor) - (const char*)(tok));
					}
					tok = pos = cursor;
					goto echo;
				}
yy16:
	yych = *++YYCURSOR;
	if (yych != '!') goto yy13;
	yych = *++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy20;
	case 'i':	goto yy19;
	case 'm':	goto yy21;
	case 'r':	goto yy22;
	case 't':	goto yy18;
	default:	goto yy13;
	}
yy18:
	yych = *++YYCURSOR;
	if (yych == 'y') goto yy59;
	goto yy13;
yy19:
	yych = *++YYCURSOR;
	if (yych == 'g') goto yy48;
	goto yy13;
yy20:
	yych = *++YYCURSOR;
	if (yych == 'e') goto yy35;
	goto yy13;
yy21:
	yych = *++YYCURSOR;
	if (yych == 'a') goto yy27;
	goto yy13;
yy22:
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy13;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
	{
					if (bUsedYYMaxFill && bSinglePass)
					{
						fatal("found scanner block after YYMAXFILL declaration");
					}
					if (!DFlag)
					{
						out.write((const char*)(tok), (const char*)(&cursor[-7]) - (const char*)(tok));
					}
					tok = cursor;
					RETURN(1);
				}
yy27:
	yych = *++YYCURSOR;
	if (yych != 'x') goto yy13;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy13;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
	{
					if (bUsedYYMaxFill)
					{
						fatal("cannot generate YYMAXFILL twice");
					}
					if (!DFlag)
					{
						out << "#define YYMAXFILL " << maxFill << std::endl;
					}
					tok = pos = cursor;
					ignore_eoc = true;
					bUsedYYMaxFill = true;
					goto echo;
				}
yy35:
	yych = *++YYCURSOR;
	if (yych != 't') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'a') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy13;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy13;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
	{
					tok = pos = cursor;
					genGetStateGoto(out, topIndent, 0);
					ignore_eoc = true;
					goto echo;
				}
yy48:
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy13;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy13;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
	{
					tok = pos = cursor;
					ignore_eoc = true;
					goto echo;
				}
yy59:
	yych = *++YYCURSOR;
	if (yych != 'p') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy13;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy13;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy13;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
	{
					if (bSinglePass)
					{
						fatal("cannot generate types inline in single pass mode");
					}
					tok = pos = cursor;
					ignore_eoc = true;
					if (bLastPass && !DFlag)
					{
						out << outputFileInfo;
						out << "\n";
						out << typesInline;
						out << "\n";
						out << sourceFileInfo;
					}
					goto echo;
				}
}

}


int Scanner::scan()
{
	char *cursor = cur;
	uint depth;

scan:
	tchar = cursor - pos;
	tline = cline;
	tok = cursor;
	if (iscfg == 1)
	{
		goto config;
	}
	else if (iscfg == 2)
	{
		goto value;
	}

{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 116,   0, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		116, 112,  48, 112, 112, 112, 112,  80, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 112, 112, 112, 112, 112, 112, 
		112, 120, 120, 120, 120, 120, 120, 120, 
		120, 120, 120, 120, 120, 120, 120, 120, 
		120, 120, 120, 120, 120, 120, 120, 120, 
		120, 120, 120, 112,   0,  96, 112, 120, 
		112, 120, 120, 120, 120, 120, 120, 120, 
		120, 120, 120, 120, 120, 120, 120, 120, 
		120, 120, 120, 120, 120, 120, 120, 120, 
		120, 120, 120, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
		112, 112, 112, 112, 112, 112, 112, 112, 
	};
	if ((YYLIMIT - YYCURSOR) < 6) YYFILL(6);
	yych = *YYCURSOR;
	if (yych <= '/') {
		if (yych <= '"') {
			if (yych <= 0x0C) {
				if (yych <= 0x08) goto yy98;
				if (yych <= 0x09) goto yy93;
				if (yych <= 0x0A) goto yy95;
				goto yy98;
			} else {
				if (yych <= 0x1F) {
					if (yych <= 0x0D) goto yy97;
					goto yy98;
				} else {
					if (yych <= ' ') goto yy93;
					if (yych <= '!') goto yy98;
					goto yy79;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') goto yy98;
				if (yych <= '\'') goto yy81;
				if (yych <= ')') goto yy86;
				goto yy77;
			} else {
				if (yych <= ',') {
					if (yych <= '+') goto yy87;
					goto yy86;
				} else {
					if (yych <= '-') goto yy98;
					if (yych <= '.') goto yy91;
					goto yy75;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '<') {
				if (yych <= '9') goto yy98;
				if (yych <= ':') goto yy73;
				if (yych <= ';') goto yy86;
				goto yy85;
			} else {
				if (yych <= '?') {
					if (yych <= '>') goto yy86;
					goto yy87;
				} else {
					if (yych <= '@') goto yy98;
					if (yych <= 'Z') goto yy90;
					goto yy83;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy86;
					goto yy98;
				} else {
					if (yych == '`') goto yy98;
					goto yy90;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy89;
					goto yy90;
				} else {
					if (yych <= '{') goto yy71;
					if (yych <= '|') goto yy86;
					goto yy98;
				}
			}
		}
	}
yy71:
	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') {
			if (yych == ',') goto yy168;
		} else {
			if (yych <= '0') goto yy165;
			if (yych <= '9') goto yy166;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') goto yy163;
			if (yych >= '_') goto yy163;
		} else {
			if (yych <= '`') goto yy72;
			if (yych <= 'z') goto yy163;
		}
	}
yy72:
	{
					depth = 1;
					goto code;
				}
yy73:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if ((yych = *YYCURSOR) == '=') goto yy159;
yy74:
	{
					std::ostringstream msg;
					msg << "unexpected character: ";
					prtChOrHex(msg, *tok);
					fatal(msg.str().c_str());
					goto scan;
				}
yy75:
	++YYCURSOR;
	if ((yych = *YYCURSOR) == '*') goto yy157;
yy76:
	{
					RETURN(*tok);
				}
yy77:
	++YYCURSOR;
	if ((yych = *YYCURSOR) == '/') goto yy155;
	{
					yylval.op = *tok;
					RETURN(STAR);
				}
yy79:
	yyaccept = 1;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych != 0x0A) goto yy151;
yy80:
	{
					fatal("unterminated string constant (missing \")");
				}
yy81:
	yyaccept = 2;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych != 0x0A) goto yy146;
yy82:
	{
					fatal("unterminated string constant (missing ')");
				}
yy83:
	yyaccept = 3;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 0x0A) goto yy84;
	if (yych == '^') goto yy137;
	goto yy136;
yy84:
	{
					fatal("unterminated range (missing ])");
				}
yy85:
	yyaccept = 4;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == '!') goto yy126;
	if (yych == '>') goto yy128;
	goto yy76;
yy86:
	yych = *++YYCURSOR;
	goto yy76;
yy87:
	++YYCURSOR;
	{
					yylval.op = *tok;
					RETURN(CLOSE);
				}
yy89:
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	if (yych == 'e') goto yy114;
	goto yy103;
yy90:
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	goto yy103;
yy91:
	++YYCURSOR;
	{
					cur = cursor;
					yylval.regexp = mkDot();
					return RANGE;
				}
yy93:
	++YYCURSOR;
	yych = *YYCURSOR;
	goto yy101;
yy94:
	{
					goto scan;
				}
yy95:
	++YYCURSOR;
yy96:
	{
					if(cursor == eof) RETURN(0);
					pos = cursor;
					cline++;
					goto scan;
				}
yy97:
	yych = *++YYCURSOR;
	if (yych == 0x0A) goto yy99;
	goto yy74;
yy98:
	yych = *++YYCURSOR;
	goto yy74;
yy99:
	yych = *++YYCURSOR;
	goto yy96;
yy100:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy101:
	if (yybm[0+yych] & 4) {
		goto yy100;
	}
	goto yy94;
yy102:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
yy103:
	if (yybm[0+yych] & 8) {
		goto yy102;
	}
	if (yych <= ' ') {
		if (yych == 0x09) goto yy106;
		if (yych <= 0x1F) goto yy105;
		goto yy106;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy105;
			goto yy107;
		} else {
			if (yych <= '<') goto yy105;
			if (yych <= '>') goto yy107;
			goto yy105;
		}
	}
yy104:
	YYCURSOR = YYCTXMARKER;
	{
					if (!FFlag) {
						cur = cursor;
						yylval.symbol = Symbol::find(token());
						return ID;
					} else {
						/* Add one char in front and one behind instead of 's or "s */
						cur = cursor;
						if (bCaseInsensitive || bCaseInverted)
						{
							yylval.regexp = strToCaseInsensitiveRE(raw_token("\""));
						}
						else
						{
							yylval.regexp = strToRE(raw_token("\""));
						}
						return STRING;
					}
				}
yy105:
	yych = *++YYCURSOR;
	goto yy104;
yy106:
	yych = *++YYCURSOR;
	goto yy112;
yy107:
	++YYCURSOR;
yy108:
	YYCURSOR = YYCTXMARKER;
	{
					cur = ptr > tok ? ptr - 1 : cursor;
					yylval.symbol = Symbol::find(token());
					return ID;
				}
yy109:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
	{
					if (FFlag)
					{
						cur = ptr > tok ? ptr - 1 : cursor;
						yylval.symbol = Symbol::find(token());
						return FID;
					} else {
						cur = ptr > tok ? ptr - 1 : cursor;
						yylval.symbol = Symbol::find(token());
						return ID;
					}
				}
yy111:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy112:
	if (yych <= ' ') {
		if (yych == 0x09) goto yy111;
		if (yych <= 0x1F) goto yy109;
		goto yy111;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy109;
		} else {
			if (yych <= '<') goto yy109;
			if (yych >= '?') goto yy109;
		}
	}
	yych = *++YYCURSOR;
	goto yy108;
yy114:
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy103;
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy103;
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy103;
	yych = *++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy104;
		if (yych >= '[') goto yy104;
	} else {
		if (yych == '`') goto yy104;
		if (yych >= '{') goto yy104;
	}
yy118:
	yyaccept = 5;
	YYMARKER = ++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= '@') {
		if (yych <= '9') {
			if (yych >= '0') goto yy118;
		} else {
			if (yych <= ':') goto yy123;
			if (yych >= '@') goto yy121;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') goto yy118;
			if (yych >= '_') goto yy118;
		} else {
			if (yych <= '`') goto yy120;
			if (yych <= 'z') goto yy118;
		}
	}
yy120:
	{
					cur = cursor;
					tok+= 5; /* skip "re2c:" */
					iscfg = 1;
					yylval.str = new Str(token());
					return CONFIG;
				}
yy121:
	yych = *++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy122;
		if (yych <= 'Z') goto yy124;
	} else {
		if (yych == '`') goto yy122;
		if (yych <= 'z') goto yy124;
	}
yy122:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept <= 0) {
				goto yy72;
			} else {
				goto yy80;
			}
		} else {
			if (yyaccept <= 2) {
				goto yy82;
			} else {
				goto yy84;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept <= 4) {
				goto yy76;
			} else {
				goto yy120;
			}
		} else {
			goto yy169;
		}
	}
yy123:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy122;
		if (yych <= 'Z') goto yy118;
		goto yy122;
	} else {
		if (yych == '`') goto yy122;
		if (yych <= 'z') goto yy118;
		goto yy122;
	}
yy124:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy120;
		if (yych <= '9') goto yy124;
		if (yych <= '@') goto yy120;
		goto yy124;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy120;
			goto yy124;
		} else {
			if (yych <= '`') goto yy120;
			if (yych <= 'z') goto yy124;
			goto yy120;
		}
	}
yy126:
	++YYCURSOR;
	{
					RETURN(SETUP);
				}
yy128:
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	goto yy130;
yy129:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
yy130:
	if (yych <= '9') {
		if (yych <= 0x09) {
			if (yych <= 0x08) goto yy122;
			goto yy129;
		} else {
			if (yych == ' ') goto yy129;
			goto yy122;
		}
	} else {
		if (yych <= '=') {
			if (yych <= ':') goto yy134;
			if (yych <= '<') goto yy122;
			goto yy133;
		} else {
			if (yych != '{') goto yy122;
		}
	}
yy131:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
	{
					RETURN(NOCOND);
				}
yy133:
	yych = *++YYCURSOR;
	if (yych == '>') goto yy131;
	goto yy122;
yy134:
	yych = *++YYCURSOR;
	if (yych == '=') goto yy131;
	goto yy122;
yy135:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy136:
	if (yybm[0+yych] & 16) {
		goto yy135;
	}
	if (yych <= '[') goto yy122;
	if (yych <= '\\') goto yy139;
	goto yy140;
yy137:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= '[') {
		if (yych == 0x0A) goto yy122;
		goto yy137;
	} else {
		if (yych <= '\\') goto yy142;
		if (yych <= ']') goto yy143;
		goto yy137;
	}
yy139:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == 0x0A) goto yy122;
	goto yy135;
yy140:
	++YYCURSOR;
	{
					cur = cursor;
					yylval.regexp = ranToRE(token());
					return RANGE;
				}
yy142:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == 0x0A) goto yy122;
	goto yy137;
yy143:
	++YYCURSOR;
	{
					cur = cursor;
					yylval.regexp = invToRE(token());
					return RANGE;
				}
yy145:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy146:
	if (yybm[0+yych] & 32) {
		goto yy145;
	}
	if (yych <= '&') goto yy122;
	if (yych <= '\'') goto yy148;
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == 0x0A) goto yy122;
	goto yy145;
yy148:
	++YYCURSOR;
	{
					cur = cursor;
					if (bCaseInverted)
					{
						yylval.regexp = strToRE(token());
					}
					else
					{
						yylval.regexp = strToCaseInsensitiveRE(token());
					}
					return STRING;
				}
yy150:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy151:
	if (yybm[0+yych] & 64) {
		goto yy150;
	}
	if (yych <= '!') goto yy122;
	if (yych <= '"') goto yy153;
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == 0x0A) goto yy122;
	goto yy150;
yy153:
	++YYCURSOR;
	{
					cur = cursor;
					if (bCaseInsensitive || bCaseInverted)
					{
						yylval.regexp = strToCaseInsensitiveRE(token());
					}
					else
					{
						yylval.regexp = strToRE(token());
					}
					return STRING;
				}
yy155:
	++YYCURSOR;
	{
					tok = cursor;
					RETURN(0);
				}
yy157:
	++YYCURSOR;
	{
					depth = 1;
					goto comment;
				}
yy159:
	++YYCURSOR;
	if ((yych = *YYCURSOR) == '>') goto yy161;
	{
					cur = cursor;
					tok+= 2; /* skip ":=" */
					depth = 0;
					goto code;
				}
yy161:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
	{
					RETURN(*tok);
				}
yy163:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy122;
			goto yy163;
		} else {
			if (yych <= '@') goto yy122;
			if (yych <= 'Z') goto yy163;
			goto yy122;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy122;
			goto yy163;
		} else {
			if (yych == '}') goto yy182;
			goto yy122;
		}
	}
yy165:
	yych = *++YYCURSOR;
	if (yych == ',') goto yy179;
	goto yy167;
yy166:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
yy167:
	if (yybm[0+yych] & 128) {
		goto yy166;
	}
	if (yych == ',') goto yy172;
	if (yych == '}') goto yy170;
	goto yy122;
yy168:
	++YYCURSOR;
yy169:
	{
					fatal("illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
				}
yy170:
	++YYCURSOR;
	{
					yylval.extop.minsize = atoi((char *)tok+1);
					yylval.extop.maxsize = atoi((char *)tok+1);
					RETURN(CLOSESIZE);
				}
yy172:
	yyaccept = 6;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy169;
	if (yych <= '9') goto yy175;
	if (yych != '}') goto yy169;
	++YYCURSOR;
	{
					yylval.extop.minsize = atoi((char *)tok+1);
					yylval.extop.maxsize = -1;
					RETURN(CLOSESIZE);
				}
yy175:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= '/') goto yy122;
	if (yych <= '9') goto yy175;
	if (yych != '}') goto yy122;
	++YYCURSOR;
	{
					yylval.extop.minsize = atoi((char *)tok+1);
					yylval.extop.maxsize = MAX(yylval.extop.minsize,atoi(strchr((char *)tok, ',')+1));
					RETURN(CLOSESIZE);
				}
yy179:
	yyaccept = 6;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy169;
	if (yych <= '9') goto yy175;
	if (yych != '}') goto yy169;
	++YYCURSOR;
	{
					yylval.op = '*';
					RETURN(CLOSE);
				}
yy182:
	++YYCURSOR;
	{
					if (!FFlag) {
						fatal("curly braces for names only allowed with -F switch");
					}
					cur = cursor;
					yylval.symbol = Symbol::find(token(1, cur - tok - 2));
					return ID;
				}
}


code:

{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192,   0, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192,  64, 192, 192, 192, 192, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192,   0, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= '&') {
		if (yych <= 0x0A) {
			if (yych <= 0x00) goto yy192;
			if (yych <= 0x09) goto yy194;
			goto yy190;
		} else {
			if (yych == '"') goto yy196;
			goto yy194;
		}
	} else {
		if (yych <= '{') {
			if (yych <= '\'') goto yy197;
			if (yych <= 'z') goto yy194;
			goto yy188;
		} else {
			if (yych != '}') goto yy194;
		}
	}
	++YYCURSOR;
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else if (--depth == 0)
					{
						cur = cursor;
						yylval.token = new Token(token(), tline);
						return CODE;
					}
					goto code;
				}
yy188:
	++YYCURSOR;
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else
					{
						++depth;
					}
					goto code;
				}
yy190:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if ((yych = *YYCURSOR) <= 0x0C) {
		if (yych <= 0x08) goto yy191;
		if (yych <= 0x0A) goto yy205;
	} else {
		if (yych <= 0x0D) goto yy205;
		if (yych == ' ') goto yy205;
	}
yy191:
	{
					if (depth == 0)
					{
						cur = cursor;
						tok += strspn(tok, " \t\r\n");
						while (cur > tok && strchr(" \t\r\n", cur[-1]))
						{
							--cur;
						}
						yylval.token = new Token(token(), tline);
						return CODE;
					}
					else if (cursor == eof)
					{
						fatal("missing '}'");
					}
					pos = cursor;
					cline++;
					goto code;
				}
yy192:
	++YYCURSOR;
	{
					if (cursor == eof)
					{
						if (depth)
						{
							fatal("missing '}'");
						}
						RETURN(0);
					}
					goto code;
				}
yy194:
	++YYCURSOR;
yy195:
	{
					goto code;
				}
yy196:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 0x0A) goto yy195;
	goto yy203;
yy197:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 0x0A) goto yy195;
	goto yy199;
yy198:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy199:
	if (yybm[0+yych] & 64) {
		goto yy198;
	}
	if (yych <= '&') goto yy200;
	if (yych <= '\'') goto yy194;
	goto yy201;
yy200:
	YYCURSOR = YYMARKER;
	goto yy195;
yy201:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == 0x0A) goto yy200;
	goto yy198;
yy202:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy203:
	if (yybm[0+yych] & 128) {
		goto yy202;
	}
	if (yych <= '!') goto yy200;
	if (yych <= '"') goto yy194;
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == 0x0A) goto yy200;
	goto yy202;
yy205:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
	{
					if (depth == 0)
					{
						goto code;
					}
					else if (cursor == eof)
					{
						fatal("missing '}'");
					}
					pos = cursor;
					cline++;
					goto code;
				}
}


comment:

{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= ')') {
		if (yych == 0x0A) goto yy212;
		goto yy214;
	} else {
		if (yych <= '*') goto yy209;
		if (yych == '/') goto yy211;
		goto yy214;
	}
yy209:
	++YYCURSOR;
	if ((yych = *YYCURSOR) == '/') goto yy217;
yy210:
	{
					if(cursor == eof)
					{
						RETURN(0);
					}
					goto comment;
				}
yy211:
	yych = *++YYCURSOR;
	if (yych == '*') goto yy215;
	goto yy210;
yy212:
	++YYCURSOR;
	{
					if(cursor == eof)
					{
						RETURN(0);
					}
					tok = pos = cursor;
					cline++;
					goto comment;
				}
yy214:
	yych = *++YYCURSOR;
	goto yy210;
yy215:
	++YYCURSOR;
	{
					++depth;
					fatal("ambiguous /* found");
					goto comment;
				}
yy217:
	++YYCURSOR;
	{
					if(--depth == 0)
					{
						goto scan;
					}
					else
					{
						goto comment;
					}
				}
}


config:

{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych != 0x09) goto yy225;
	} else {
		if (yych <= ' ') goto yy221;
		if (yych == '=') goto yy223;
		goto yy225;
	}
yy221:
	++YYCURSOR;
	yych = *YYCURSOR;
	goto yy230;
yy222:
	{
					goto config;
				}
yy223:
	++YYCURSOR;
	yych = *YYCURSOR;
	goto yy228;
yy224:
	{
					iscfg = 2;
					cur = cursor;
					RETURN('=');
				}
yy225:
	++YYCURSOR;
	{
					fatal("missing '='");
				}
yy227:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy228:
	if (yybm[0+yych] & 128) {
		goto yy227;
	}
	goto yy224;
yy229:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy230:
	if (yych == 0x09) goto yy229;
	if (yych == ' ') goto yy229;
	goto yy222;
}


value:

{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 192,   0, 248, 248, 192, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		192, 248, 104, 248, 248, 248, 248, 152, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		252, 252, 252, 252, 252, 252, 252, 252, 
		252, 252, 248, 192, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248,   8, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= '&') {
		if (yych <= 0x0D) {
			if (yych <= 0x08) goto yy239;
			if (yych <= 0x0A) goto yy233;
			if (yych <= 0x0C) goto yy239;
		} else {
			if (yych <= ' ') {
				if (yych <= 0x1F) goto yy239;
			} else {
				if (yych == '"') goto yy241;
				goto yy239;
			}
		}
	} else {
		if (yych <= '/') {
			if (yych <= '\'') goto yy243;
			if (yych == '-') goto yy236;
			goto yy239;
		} else {
			if (yych <= '9') {
				if (yych <= '0') goto yy234;
				goto yy237;
			} else {
				if (yych != ';') goto yy239;
			}
		}
	}
yy233:
	{
					cur = cursor;
					yylval.str = new Str(token());
					iscfg = 0;
					return VALUE;
				}
yy234:
	++YYCURSOR;
	if (yybm[0+(yych = *YYCURSOR)] & 8) {
		goto yy239;
	}
yy235:
	{
					cur = cursor;
					yylval.number = atoi(token().to_string().c_str());
					iscfg = 0;
					return NUMBER;
				}
yy236:
	yych = *++YYCURSOR;
	if (yych <= '0') goto yy240;
	if (yych >= ':') goto yy240;
yy237:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 4) {
		goto yy237;
	}
	if (yych <= 0x0D) {
		if (yych <= 0x08) goto yy239;
		if (yych <= 0x0A) goto yy235;
		if (yych >= 0x0D) goto yy235;
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy235;
		} else {
			if (yych == ';') goto yy235;
		}
	}
yy239:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy240:
	if (yybm[0+yych] & 8) {
		goto yy239;
	}
	goto yy233;
yy241:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy241;
	}
	if (yych <= '!') {
		if (yych == 0x0A) goto yy233;
		goto yy251;
	} else {
		if (yych <= '"') goto yy239;
		if (yych <= '[') goto yy251;
		goto yy253;
	}
yy243:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy243;
	}
	if (yych <= '&') {
		if (yych == 0x0A) goto yy233;
	} else {
		if (yych <= '\'') goto yy239;
		if (yych >= '\\') goto yy248;
	}
yy245:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy245;
	}
	if (yych <= '&') goto yy247;
	if (yych <= '\'') goto yy249;
	goto yy250;
yy247:
	YYCURSOR = YYMARKER;
	goto yy233;
yy248:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 0x0D) {
		if (yych <= 0x09) {
			if (yych <= 0x08) goto yy243;
			goto yy245;
		} else {
			if (yych <= 0x0A) goto yy233;
			if (yych <= 0x0C) goto yy243;
			goto yy245;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy243;
			goto yy245;
		} else {
			if (yych == ';') goto yy245;
			goto yy243;
		}
	}
yy249:
	yych = *++YYCURSOR;
	goto yy233;
yy250:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == 0x0A) goto yy247;
	goto yy245;
yy251:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy251;
	}
	if (yych <= '!') goto yy247;
	if (yych <= '"') goto yy249;
	goto yy254;
yy253:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 0x0D) {
		if (yych <= 0x09) {
			if (yych <= 0x08) goto yy241;
			goto yy251;
		} else {
			if (yych <= 0x0A) goto yy233;
			if (yych <= 0x0C) goto yy241;
			goto yy251;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy241;
			goto yy251;
		} else {
			if (yych == ';') goto yy251;
			goto yy241;
		}
	}
yy254:
	++YYCURSOR;
	if (YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == 0x0A) goto yy247;
	goto yy251;
}

}

void Scanner::fatal(uint ofs, const char *msg) const
{
	out.flush();
	std::cerr << "re2c: error: "
		<< "line " << tline << ", column " << (tchar + ofs + 1) << ": "
		<< msg << std::endl;
	exit(1);
}

void Scanner::fatalf(const char *fmt, ...) const
{
	char szBuf[4096];

	va_list args;
	
	va_start(args, fmt);
	vsnprintf(szBuf, sizeof(szBuf), fmt, args);
	va_end(args);
	
	szBuf[sizeof(szBuf)-1] = '0';
	
	fatal(szBuf);
}

Scanner::~Scanner()
{
	if (bot)
	{
		delete [] bot;
	}
}

void Scanner::check_token_length(char *pos, uint len) const
{
	if (pos < bot || pos + len >= top)
	{
		fatal("Token exceeds limit");
	}
}

SubStr Scanner::raw_token(std::string enclosure) const
{
	return SubStr(std::string(enclosure + token().to_string() + enclosure).c_str());
}

} // end namespace re2c
