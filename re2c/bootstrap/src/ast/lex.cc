/* Generated by re2c 0.16 on Sun Jul 30 18:04:13 2017 */
#line 1 "../src/ast/lex.re"
#include "src/util/c99_stdint.h"
#include <stddef.h>
#include <string.h>
#include <algorithm>
#include <limits>
#include <string>

#include "src/conf/msg.h"
#include "src/code/output.h"
#include "src/re/encoding/enc.h"
#include "src/ast/input.h"
#include "src/ast/ast.h"
#include "src/ast/scanner.h"
#include "src/ast/parser.h" // needed by "y.tab.h"
#include "src/ast/unescape.h"
#include "src/util/range.h"
#include "src/util/s_to_n32_unsafe.h"
#include "y.tab.h"

extern YYSTYPE yylval;

#define	YYCTYPE		unsigned char
#define	YYCURSOR	cur
#define	YYLIMIT		lim
#define	YYMARKER	mar
#define	YYCTXMARKER ctx
#define	YYFILL(n)	{ fill (n); }

namespace re2c
{

// source code is in ASCII: pointers have type 'char *'
// but re2c makes an implicit assumption that YYCTYPE is unsigned
// when it generates comparisons
#line 37 "../src/ast/lex.re"


#line 58 "../src/ast/lex.re"


Scanner::ParseMode Scanner::echo(OutputFile &out)
{
	if (eof && cur == eof) // Catch EOF
	{
		return Stop;
	}

	tok = cur;
echo:
	ptr = cur;


#line 56 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 16) YYFILL(16);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 128 "../src/ast/lex.re"
	{
		if (cur != eof) goto echo;
		out.wraw(tok, ptr);
		return Stop;
	}
#line 120 "src/ast/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 145 "../src/ast/lex.re"
	{ goto echo; }
#line 126 "src/ast/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 139 "../src/ast/lex.re"
	{
		cline++;
		pos = cur;
		goto echo;
	}
#line 141 "src/ast/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy7;
	} else {
		goto yy5;
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 72 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		return Parse;
	}
#line 189 "src/ast/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'i':	goto yy23;
	case 'm':	goto yy24;
	case 'r':	goto yy25;
	case 's':	goto yy26;
	case 't':	goto yy27;
	case 'u':	goto yy28;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy29;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy30;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy31;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy32;
	if (yych == 't') goto yy33;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy34;
	if (yych == 'u') goto yy35;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy36;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy37;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy38;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy39;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy40;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy41;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy42;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy43;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy44;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy45;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy46;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy47;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy48;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy50;
	if (yych <= '9') goto yy13;
	goto yy50;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy51;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy52;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy53;
	goto yy13;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy54;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy55;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy56;
	goto yy13;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy57;
	goto yy13;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy58;
	goto yy13;
yy49:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy50:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy49;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy49;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			YYCTXMARKER = YYCURSOR;
			goto yy59;
		}
		goto yy13;
	}
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy61;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy62;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy63;
	goto yy13;
yy54:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy64;
	goto yy13;
yy55:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy65;
	goto yy13;
yy56:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy66;
	goto yy13;
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy67;
	goto yy13;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy68;
	goto yy13;
yy59:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy59;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy69;
		if (yych <= '\n') goto yy71;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy73;
		if (yych == ' ') goto yy69;
		goto yy13;
	}
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy74;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy75;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy76;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy77;
	goto yy13;
yy65:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy78;
	goto yy13;
yy66:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy79;
	goto yy13;
yy67:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy80;
	goto yy13;
yy68:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy81;
	goto yy13;
yy69:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy69;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy69;
		if (yych == '"') goto yy82;
		goto yy13;
	}
yy71:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 134 "../src/ast/lex.re"
	{
		set_sourceline();
		goto echo;
	}
#line 443 "src/ast/lex.cc"
yy73:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy71;
	goto yy13;
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy84;
	goto yy13;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy85;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy86;
	goto yy13;
yy77:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy87;
	goto yy13;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy88;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy89;
	goto yy13;
yy80:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy90;
	goto yy13;
yy81:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy91;
	goto yy13;
yy82:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy82;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy92;
	goto yy93;
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy94;
	goto yy13;
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy95;
	goto yy13;
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy96;
	goto yy13;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy98;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy99;
	goto yy13;
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy100;
	goto yy13;
yy90:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy101;
	goto yy13;
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy102;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy71;
	if (yych == '\r') goto yy73;
	goto yy13;
yy93:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy13;
	goto yy82;
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy104;
	goto yy13;
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy105;
	goto yy13;
yy96:
	++YYCURSOR;
#line 93 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		out.wdelay_yymaxfill();
		lex_end_of_comment(out);
		goto echo;
	}
#line 550 "src/ast/lex.cc"
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy106;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy107;
	goto yy13;
yy100:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy108;
	goto yy13;
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy109;
	goto yy13;
yy102:
	++YYCURSOR;
#line 82 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		return Reuse;
	}
#line 574 "src/ast/lex.cc"
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy110;
	goto yy13;
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy111;
	goto yy13;
yy106:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy112;
	goto yy13;
yy107:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy114;
	goto yy13;
yy108:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy116;
	goto yy13;
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy118;
	goto yy13;
yy110:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy120;
	goto yy13;
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy121;
	goto yy13;
yy112:
	++YYCURSOR;
#line 122 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		lex_tags(out, true);
		goto echo;
	}
#line 615 "src/ast/lex.cc"
yy114:
	++YYCURSOR;
#line 77 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		return Rules;
	}
#line 623 "src/ast/lex.cc"
yy116:
	++YYCURSOR;
#line 116 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		lex_tags(out, false);
		goto echo;
	}
#line 632 "src/ast/lex.cc"
yy118:
	++YYCURSOR;
#line 107 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		out.wdelay_line_info();
		out.wdelay_types();
		out.wline_info(cline, get_fname().c_str());
		lex_end_of_comment(out);
		goto echo;
	}
#line 644 "src/ast/lex.cc"
yy120:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy123;
	goto yy13;
yy121:
	++YYCURSOR;
#line 87 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		lex_end_of_comment(out);
		goto echo;
	}
#line 657 "src/ast/lex.cc"
yy123:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
#line 100 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		out.wdelay_state_goto(0);
		lex_end_of_comment(out);
		goto echo;
	}
#line 669 "src/ast/lex.cc"
}
#line 146 "../src/ast/lex.re"

}

void Scanner::lex_end_of_comment(OutputFile &out)
{
	uint32_t ignored = 0;
	for (;;) {
#line 679 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy128;
		if (yych == '\n') goto yy132;
		goto yy130;
	} else {
		if (yych <= '\r') goto yy134;
		if (yych == '*') goto yy135;
		goto yy130;
	}
yy128:
	++YYCURSOR;
#line 153 "../src/ast/lex.re"
	{ fatal_lc(get_cline(), get_column(), "expected end of block"); }
#line 697 "src/ast/lex.cc"
yy130:
	++YYCURSOR;
yy131:
#line 155 "../src/ast/lex.re"
	{ continue; }
#line 703 "src/ast/lex.cc"
yy132:
	++YYCURSOR;
#line 156 "../src/ast/lex.re"
	{ ++ignored; continue; }
#line 708 "src/ast/lex.cc"
yy134:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy132;
	goto yy131;
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy131;
	++YYCURSOR;
#line 157 "../src/ast/lex.re"
	{
			if (ignored > 0) {
				cline += ignored;
				out.wline_info(cline, get_fname().c_str());
			}
			tok = pos = cur;
			return;
		}
#line 726 "src/ast/lex.cc"
}
#line 165 "../src/ast/lex.re"
}
}

void Scanner::lex_tags(OutputFile &out, bool mtags)
{
	std::string fmt, sep;
	for (;;) {
#line 736 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy142;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy145;
		} else {
			if (yych == '\r') goto yy147;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy148;
			if (yych >= 'f') goto yy149;
		} else {
			if (yych == 's') goto yy150;
		}
	}
	++YYCURSOR;
yy141:
#line 172 "../src/ast/lex.re"
	{ fatal_lc(get_cline(), get_column(), "unrecognized configuration"); }
#line 796 "src/ast/lex.cc"
yy142:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy142;
	}
#line 177 "../src/ast/lex.re"
	{ continue; }
#line 806 "src/ast/lex.cc"
yy145:
	++YYCURSOR;
#line 178 "../src/ast/lex.re"
	{ ++cline; continue; }
#line 811 "src/ast/lex.cc"
yy147:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy145;
	goto yy141;
yy148:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy151;
	goto yy141;
yy149:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy153;
	goto yy141;
yy150:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy155;
	goto yy141;
yy151:
	++YYCURSOR;
#line 179 "../src/ast/lex.re"
	{
			out.wdelay_tags(new ConfTags(fmt, sep), mtags);
			tok = pos = cur;
			return;
		}
#line 836 "src/ast/lex.cc"
yy153:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy156;
yy154:
	YYCURSOR = YYMARKER;
	goto yy141;
yy155:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy157;
	goto yy154;
yy156:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy158;
	goto yy154;
yy157:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy159;
	goto yy154;
yy158:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy160;
	goto yy154;
yy159:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy161;
	goto yy154;
yy160:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy162;
	goto yy154;
yy161:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy164;
	goto yy154;
yy162:
	++YYCURSOR;
#line 174 "../src/ast/lex.re"
	{ fmt = lex_conf_string(); continue; }
#line 875 "src/ast/lex.cc"
yy164:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy154;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy154;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy154;
	++YYCURSOR;
#line 175 "../src/ast/lex.re"
	{ sep = lex_conf_string(); continue; }
#line 886 "src/ast/lex.cc"
}
#line 184 "../src/ast/lex.re"
}
}

int Scanner::scan(const conopt_t *globopts)
{
	uint32_t depth, code_line;
scan:
	tchar = cur - pos;
	tok = cur;

#line 899 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy173;
	}
	if (yych <= '.') {
		if (yych <= '#') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy171;
				if (yych <= '\n') goto yy176;
				if (yych >= '\r') goto yy178;
			} else {
				if (yych <= 0x1F) goto yy171;
				if (yych <= '!') goto yy179;
				if (yych <= '"') goto yy181;
				goto yy183;
			}
		} else {
			if (yych <= '\'') {
				if (yych == '%') goto yy184;
				if (yych >= '\'') goto yy185;
			} else {
				if (yych <= '*') {
					if (yych <= ')') goto yy179;
					goto yy187;
				} else {
					if (yych <= ',') goto yy179;
					if (yych >= '.') goto yy188;
				}
			}
		}
	} else {
		if (yych <= '\\') {
			if (yych <= '?') {
				if (yych <= '/') goto yy190;
				if (yych <= '9') goto yy191;
				if (yych <= ':') goto yy193;
				goto yy179;
			} else {
				if (yych <= '@') goto yy183;
				if (yych <= 'Z') goto yy191;
				if (yych <= '[') goto yy194;
				goto yy179;
			}
		} else {
			if (yych <= 'q') {
				if (yych == '_') goto yy191;
				if (yych >= 'a') goto yy191;
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy196;
					goto yy191;
				} else {
					if (yych <= '{') goto yy197;
					if (yych <= '|') goto yy179;
				}
			}
		}
	}
yy171:
	++YYCURSOR;
yy172:
#line 344 "../src/ast/lex.re"
	{
					fatal_lc(get_cline(), get_column(), "unexpected character: '%c'", *tok);
					goto scan;
				}
#line 1004 "src/ast/lex.cc"
yy173:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy173;
	}
#line 323 "../src/ast/lex.re"
	{
					goto scan;
				}
#line 1016 "src/ast/lex.cc"
yy176:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy199;
	} else {
		if (yych <= ' ') goto yy199;
		if (yych == '#') goto yy202;
	}
yy177:
#line 332 "../src/ast/lex.re"
	{
		if (cur == eof) return 0;
		pos = cur;
		cline++;
		if (lexer_state == LEX_FLEX_NAME) {
			lexer_state = LEX_NORMAL;
			return TOKEN_FID_END;
		} else {
			goto scan;
		}
	}
#line 1039 "src/ast/lex.cc"
yy178:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy176;
	goto yy172;
yy179:
	++YYCURSOR;
yy180:
#line 236 "../src/ast/lex.re"
	{ return *tok; }
#line 1049 "src/ast/lex.cc"
yy181:
	++YYCURSOR;
#line 226 "../src/ast/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1054 "src/ast/lex.cc"
yy183:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy172;
		if (yych <= '9') goto yy204;
		if (yych <= '@') goto yy172;
		goto yy204;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy172;
			goto yy204;
		} else {
			if (yych <= '`') goto yy172;
			if (yych <= 'z') goto yy204;
			goto yy172;
		}
	}
yy184:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy207;
	goto yy172;
yy185:
	++YYCURSOR;
#line 225 "../src/ast/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1080 "src/ast/lex.cc"
yy187:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy207;
	goto yy180;
yy188:
	++YYCURSOR;
#line 318 "../src/ast/lex.re"
	{
					yylval.regexp = ast_dot(cline, get_column());
					return TOKEN_REGEXP;
				}
#line 1092 "src/ast/lex.cc"
yy190:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy209;
	if (yych == '/') goto yy211;
	goto yy180;
yy191:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy192:
	if (yybm[0+yych] & 32) {
		goto yy191;
	}
	if (yych <= ' ') {
		if (yych == '\t') {
			YYCTXMARKER = YYCURSOR;
			goto yy215;
		}
		if (yych <= 0x1F) goto yy213;
		YYCTXMARKER = YYCURSOR;
		goto yy215;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy213;
			YYCTXMARKER = YYCURSOR;
			goto yy217;
		} else {
			if (yych <= '<') goto yy213;
			if (yych <= '>') {
				YYCTXMARKER = YYCURSOR;
				goto yy217;
			}
			goto yy213;
		}
	}
yy193:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy219;
	goto yy172;
yy194:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy221;
#line 227 "../src/ast/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1137 "src/ast/lex.cc"
yy196:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy223;
	goto yy192;
yy197:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy226;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy224;
		if (yych >= 'A') goto yy228;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy228;
		} else {
			if (yych <= '`') goto yy198;
			if (yych <= 'z') goto yy228;
		}
	}
yy198:
#line 194 "../src/ast/lex.re"
	{
					depth = 1;
					code_line = cline;
					goto code;
				}
#line 1166 "src/ast/lex.cc"
yy199:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy199;
	} else {
		if (yych <= ' ') goto yy199;
		if (yych == '#') goto yy202;
	}
yy201:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy177;
		} else {
			goto yy198;
		}
	} else {
		goto yy225;
	}
yy202:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy202;
		goto yy201;
	} else {
		if (yych <= ' ') goto yy202;
		if (yych == 'l') goto yy230;
		goto yy201;
	}
yy204:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy206;
		if (yych <= '9') goto yy204;
		if (yych >= 'A') goto yy204;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy204;
		} else {
			if (yych <= '`') goto yy206;
			if (yych <= 'z') goto yy204;
		}
	}
yy206:
#line 230 "../src/ast/lex.re"
	{
		const std::string *name = new std::string(tok + 1, tok_len() - 1);
		yylval.regexp = ast_tag(cline, get_column(), name, tok[0] == '#');
		return TOKEN_REGEXP;
	}
#line 1223 "src/ast/lex.cc"
yy207:
	++YYCURSOR;
#line 220 "../src/ast/lex.re"
	{
					tok = cur;
					return 0;
				}
#line 1231 "src/ast/lex.cc"
yy209:
	++YYCURSOR;
#line 214 "../src/ast/lex.re"
	{
					depth = 1;
					goto comment;
				}
#line 1239 "src/ast/lex.cc"
yy211:
	++YYCURSOR;
#line 211 "../src/ast/lex.re"
	{
				goto nextLine;
			}
#line 1246 "src/ast/lex.cc"
yy213:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 301 "../src/ast/lex.re"
	{
					if (!globopts->FFlag) {
						yylval.str = new std::string (tok, tok_len());
						return TOKEN_ID;
					} else {
						std::vector<ASTChar> *str = new std::vector<ASTChar>;
						for (char *s = tok; s < cur; ++s) {
							const uint32_t
								chr = static_cast<uint8_t>(*s),
								col = static_cast<uint32_t>(s - tok);
							str->push_back(ASTChar(chr, col));
						}
						yylval.regexp = ast_str(cline, get_column(), str, false);
						return TOKEN_REGEXP;
					}
				}
#line 1267 "src/ast/lex.cc"
yy215:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy215;
		if (yych <= 0x1F) goto yy231;
		goto yy215;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy231;
		} else {
			if (yych <= '<') goto yy231;
			if (yych >= '?') goto yy231;
		}
	}
yy217:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 296 "../src/ast/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					return TOKEN_ID;
				}
#line 1292 "src/ast/lex.cc"
yy219:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy233;
#line 204 "../src/ast/lex.re"
	{
					tok += 2; /* skip ":=" */
					depth = 0;
					code_line = cline;
					goto code;
				}
#line 1303 "src/ast/lex.cc"
yy221:
	++YYCURSOR;
#line 228 "../src/ast/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1308 "src/ast/lex.cc"
yy223:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy235;
	goto yy192;
yy224:
	++YYCURSOR;
yy225:
#line 269 "../src/ast/lex.re"
	{
					fatal_lc(get_cline(), get_column(), "illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
				}
#line 1320 "src/ast/lex.cc"
yy226:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy226;
	}
	if (yych <= '^') {
		if (yych <= ',') {
			if (yych <= '+') goto yy201;
			goto yy236;
		} else {
			if (yych <= '@') goto yy201;
			if (yych >= '[') goto yy201;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy201;
		} else {
			if (yych == '}') goto yy237;
			goto yy201;
		}
	}
yy228:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy201;
			goto yy228;
		} else {
			if (yych <= '@') goto yy201;
			if (yych <= 'Z') goto yy228;
			goto yy201;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy201;
			goto yy228;
		} else {
			if (yych == '}') goto yy239;
			goto yy201;
		}
	}
yy230:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy241;
	goto yy201;
yy231:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 283 "../src/ast/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					if (globopts->FFlag)
					{
						lexer_state = LEX_FLEX_NAME;
						return TOKEN_FID;
					}
					else
					{
						return TOKEN_ID;
					}
				}
#line 1386 "src/ast/lex.cc"
yy233:
	++YYCURSOR;
	YYCURSOR -= 2;
#line 200 "../src/ast/lex.re"
	{
					return *tok;
				}
#line 1394 "src/ast/lex.cc"
yy235:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy242;
	goto yy192;
yy236:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy225;
	if (yych <= '9') goto yy243;
	if (yych == '}') goto yy245;
	goto yy225;
yy237:
	++YYCURSOR;
#line 238 "../src/ast/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min))
					{
						fatal_lc(get_cline(), get_column(), "repetition count overflow");
					}
					yylval.bounds.max = yylval.bounds.min;
					return TOKEN_CLOSESIZE;
				}
#line 1417 "src/ast/lex.cc"
yy239:
	++YYCURSOR;
#line 273 "../src/ast/lex.re"
	{
					if (!globopts->FFlag) {
						fatal_lc(get_cline(), get_column(), "curly braces for names only allowed with -F switch");
					}
					yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
					return TOKEN_ID;
				}
#line 1428 "src/ast/lex.cc"
yy241:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy247;
	goto yy201;
yy242:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy248;
	goto yy192;
yy243:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy201;
	if (yych <= '9') goto yy243;
	if (yych == '}') goto yy250;
	goto yy201;
yy245:
	++YYCURSOR;
#line 260 "../src/ast/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min))
					{
						fatal_lc(get_cline(), get_column(), "repetition lower bound overflow");
					}
					yylval.bounds.max = std::numeric_limits<uint32_t>::max();
					return TOKEN_CLOSESIZE;
				}
#line 1456 "src/ast/lex.cc"
yy247:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy252;
	goto yy201;
yy248:
	++YYCURSOR;
#line 281 "../src/ast/lex.re"
	{ return TOKEN_CONF; }
#line 1465 "src/ast/lex.cc"
yy250:
	++YYCURSOR;
#line 247 "../src/ast/lex.re"
	{
					const char * p = strchr (tok, ',');
					if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min))
					{
						fatal_lc(get_cline(), get_column(), "repetition lower bound overflow");
					}
					if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max))
					{
						fatal_lc(get_cline(), get_column(), "repetition upper bound overflow");
					}
					return TOKEN_CLOSESIZE;
				}
#line 1481 "src/ast/lex.cc"
yy252:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy254;
	if (yych <= '9') goto yy201;
	goto yy254;
yy253:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy254:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy253;
		goto yy201;
	} else {
		if (yych <= ' ') goto yy253;
		if (yych <= '0') goto yy201;
		if (yych >= ':') goto yy201;
		YYCTXMARKER = YYCURSOR;
	}
yy255:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy201;
		} else {
			if (yych <= '\n') goto yy259;
			if (yych <= '\f') goto yy201;
			goto yy261;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy201;
		} else {
			if (yych <= '/') goto yy201;
			if (yych <= '9') goto yy255;
			goto yy201;
		}
	}
yy257:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy257;
		goto yy201;
	} else {
		if (yych <= ' ') goto yy257;
		if (yych == '"') goto yy262;
		goto yy201;
	}
yy259:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 327 "../src/ast/lex.re"
	{
		set_sourceline ();
		return TOKEN_LINE_INFO;
	}
#line 1542 "src/ast/lex.cc"
yy261:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy259;
	goto yy201;
yy262:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy262;
	}
	if (yych <= '\n') goto yy201;
	if (yych >= '#') goto yy265;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy259;
	if (yych == '\r') goto yy261;
	goto yy201;
yy265:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy201;
	goto yy262;
}
#line 348 "../src/ast/lex.re"


code:

#line 1572 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96, 112,   0,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		112,  96,  64,  96,  96,  96,  96,  32, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,   0,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy268;
			if (yych <= '\t') goto yy270;
			goto yy272;
		} else {
			if (yych == '"') goto yy274;
			goto yy270;
		}
	} else {
		if (yych <= '{') {
			if (yych <= '\'') goto yy275;
			if (yych <= 'z') goto yy270;
			goto yy276;
		} else {
			if (yych == '}') goto yy278;
			goto yy270;
		}
	}
yy268:
	++YYCURSOR;
#line 411 "../src/ast/lex.re"
	{
					if (cur == eof)
					{
						if (depth)
						{
							fatal_l(get_cline(), "missing '}'");
						}
						return 0;
					}
					goto code;
				}
#line 1645 "src/ast/lex.cc"
yy270:
	++YYCURSOR;
yy271:
#line 425 "../src/ast/lex.re"
	{
					goto code;
				}
#line 1653 "src/ast/lex.cc"
yy272:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy280;
		} else {
			if (yych <= '\n') goto yy282;
			if (yych >= '\r') goto yy282;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy280;
		} else {
			if (yych == '#') goto yy283;
		}
	}
yy273:
#line 392 "../src/ast/lex.re"
	{
					if (depth == 0)
					{
						tok += strspn(tok, " \t\r\n");
						while (cur > tok && strchr(" \t\r\n", cur[-1]))
						{
							--cur;
						}
						yylval.code = new Code(get_fname (), code_line, tok, tok_len ());
						return TOKEN_CODE;
					}
					else if (cur == eof)
					{
						fatal_l(get_cline(), "missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1692 "src/ast/lex.cc"
yy274:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy271;
	goto yy287;
yy275:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy271;
	goto yy292;
yy276:
	++YYCURSOR;
#line 364 "../src/ast/lex.re"
	{
					if (depth == 0)
					{
						fatal_l(get_cline(), "Curly braces are not allowed after ':='");
					}
					else
					{
						++depth;
					}
					goto code;
				}
#line 1717 "src/ast/lex.cc"
yy278:
	++YYCURSOR;
#line 352 "../src/ast/lex.re"
	{
					if (depth == 0)
					{
						fatal_l(get_cline(), "Curly braces are not allowed after ':='");
					}
					else if (--depth == 0)
					{
						yylval.code = new Code(get_fname (), code_line, tok, tok_len ());
						return TOKEN_CODE;
					}
					goto code;
				}
#line 1733 "src/ast/lex.cc"
yy280:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy294;
	} else {
		if (yych <= ' ') goto yy294;
		if (yych == '#') goto yy283;
	}
yy281:
	YYCURSOR -= 1;
#line 379 "../src/ast/lex.re"
	{
					if (depth == 0)
					{
						goto code;
					}
					else if (cur == eof)
					{
						fatal_l(get_cline(), "missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1759 "src/ast/lex.cc"
yy282:
	++YYCURSOR;
	goto yy281;
yy283:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy283;
	}
	if (yych == 'l') goto yy296;
yy285:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy273;
		} else {
			goto yy271;
		}
	} else {
		goto yy281;
	}
yy286:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy287:
	if (yybm[0+yych] & 32) {
		goto yy286;
	}
	if (yych <= '\n') goto yy285;
	if (yych >= '#') goto yy290;
yy288:
	++YYCURSOR;
#line 422 "../src/ast/lex.re"
	{
					goto code;
				}
#line 1798 "src/ast/lex.cc"
yy290:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy285;
	goto yy286;
yy291:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy292:
	if (yybm[0+yych] & 64) {
		goto yy291;
	}
	if (yych <= '\n') goto yy285;
	if (yych <= '\'') goto yy288;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy285;
	goto yy291;
yy294:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy294;
		goto yy285;
	} else {
		if (yych <= ' ') goto yy294;
		if (yych == '#') goto yy283;
		goto yy285;
	}
yy296:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy285;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy285;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy285;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy301;
	if (yych <= '9') goto yy285;
	goto yy301;
yy300:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy301:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy300;
		goto yy285;
	} else {
		if (yych <= ' ') goto yy300;
		if (yych <= '0') goto yy285;
		if (yych >= ':') goto yy285;
		YYCTXMARKER = YYCURSOR;
	}
yy302:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy302;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy285;
		if (yych <= '\t') goto yy304;
		if (yych <= '\n') goto yy306;
		goto yy285;
	} else {
		if (yych <= '\r') goto yy308;
		if (yych != ' ') goto yy285;
	}
yy304:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy304;
		goto yy285;
	} else {
		if (yych <= ' ') goto yy304;
		if (yych == '"') goto yy309;
		goto yy285;
	}
yy306:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 375 "../src/ast/lex.re"
	{
					set_sourceline ();
					goto code;
				}
#line 1893 "src/ast/lex.cc"
yy308:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy306;
	goto yy285;
yy309:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy285;
		goto yy309;
	} else {
		if (yych <= '"') goto yy311;
		if (yych == '\\') goto yy312;
		goto yy309;
	}
yy311:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy306;
	if (yych == '\r') goto yy308;
	goto yy285;
yy312:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy285;
	goto yy309;
}
#line 428 "../src/ast/lex.re"


comment:

#line 1927 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ')') {
		if (yych == '\n') goto yy317;
	} else {
		if (yych <= '*') goto yy319;
		if (yych == '/') goto yy320;
	}
	++YYCURSOR;
yy316:
#line 460 "../src/ast/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					goto comment;
				}
#line 1982 "src/ast/lex.cc"
yy317:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy321;
	}
	if (yych == '#') goto yy324;
yy318:
#line 451 "../src/ast/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					tok = pos = cur;
					cline++;
					goto comment;
				}
#line 2000 "src/ast/lex.cc"
yy319:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy326;
	goto yy316;
yy320:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy328;
	goto yy316;
yy321:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy321;
	}
	if (yych == '#') goto yy324;
yy323:
	YYCURSOR = YYMARKER;
	goto yy318;
yy324:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy324;
		goto yy323;
	} else {
		if (yych <= ' ') goto yy324;
		if (yych == 'l') goto yy330;
		goto yy323;
	}
yy326:
	++YYCURSOR;
#line 432 "../src/ast/lex.re"
	{
					if (--depth == 0)
					{
						goto scan;
					}
					else
					{
						goto comment;
					}
				}
#line 2045 "src/ast/lex.cc"
yy328:
	++YYCURSOR;
#line 442 "../src/ast/lex.re"
	{
					++depth;
					fatal_lc(get_cline(), get_column(), "ambiguous /* found");
					goto comment;
				}
#line 2054 "src/ast/lex.cc"
yy330:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy323;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy323;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy323;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy335;
	if (yych <= '9') goto yy323;
	goto yy335;
yy334:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy335:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy334;
		goto yy323;
	} else {
		if (yych <= ' ') goto yy334;
		if (yych <= '0') goto yy323;
		if (yych >= ':') goto yy323;
		YYCTXMARKER = YYCURSOR;
	}
yy336:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy336;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy323;
		if (yych <= '\t') goto yy338;
		if (yych <= '\n') goto yy340;
		goto yy323;
	} else {
		if (yych <= '\r') goto yy342;
		if (yych != ' ') goto yy323;
	}
yy338:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy338;
		goto yy323;
	} else {
		if (yych <= ' ') goto yy338;
		if (yych == '"') goto yy343;
		goto yy323;
	}
yy340:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 447 "../src/ast/lex.re"
	{
					set_sourceline ();
					goto comment;
				}
#line 2116 "src/ast/lex.cc"
yy342:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy340;
	goto yy323;
yy343:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy343;
	}
	if (yych <= '\n') goto yy323;
	if (yych >= '#') goto yy346;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy340;
	if (yych == '\r') goto yy342;
	goto yy323;
yy346:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy323;
	goto yy343;
}
#line 467 "../src/ast/lex.re"


nextLine:

#line 2146 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy351;
	++YYCURSOR;
#line 478 "../src/ast/lex.re"
	{  if(cur == eof) {
                  return 0;
               }
               goto nextLine;
            }
#line 2159 "src/ast/lex.cc"
yy351:
	++YYCURSOR;
#line 471 "../src/ast/lex.re"
	{ if(cur == eof) {
                  return 0;
               }
               tok = pos = cur;
               cline++;
               goto scan;
            }
#line 2170 "src/ast/lex.cc"
}
#line 483 "../src/ast/lex.re"

}

static void escape (std::string & dest, const std::string & src)
{
	dest = src;
	size_t l = dest.length();
	for (size_t p = 0; p < l; ++p)
	{
		if (dest[p] == '\\')
		{
			dest.insert(++p, "\\");
			++l;
		}
	}
}

const AST *Scanner::lex_cls(bool neg)
{
	std::vector<ASTRange> *cls = new std::vector<ASTRange>;
	uint32_t u, l, c, c0 = get_column();
fst:
	tok = cur;
	c = get_column();
	
#line 2198 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy356;
#line 509 "../src/ast/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 2206 "src/ast/lex.cc"
yy356:
	++YYCURSOR;
#line 508 "../src/ast/lex.re"
	{ return ast_cls(cline, c0, cls, neg); }
#line 2211 "src/ast/lex.cc"
}
#line 510 "../src/ast/lex.re"

snd:
	
#line 2217 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy361;
yy360:
#line 513 "../src/ast/lex.re"
	{ u = l; goto add; }
#line 2226 "src/ast/lex.cc"
yy361:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy363;
	YYCURSOR = YYMARKER;
	goto yy360;
yy363:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 514 "../src/ast/lex.re"
	{
			u = lex_cls_chr();
			if (l > u) {
				warn.swapped_range(cline, l, u);
				std::swap(l, u);
			}
			goto add;
		}
#line 2244 "src/ast/lex.cc"
}
#line 522 "../src/ast/lex.re"

add:
	cls->push_back(ASTRange(l, u, c));
	goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
	tok = cur;
	const uint32_t l = get_cline(), c = get_column();
	
#line 2258 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych == '\n') goto yy369;
	} else {
		if (yych <= '\r') goto yy371;
		if (yych == '\\') goto yy372;
	}
	++YYCURSOR;
yy368:
#line 539 "../src/ast/lex.re"
	{ return static_cast<uint8_t>(tok[0]); }
#line 2274 "src/ast/lex.cc"
yy369:
	++YYCURSOR;
#line 534 "../src/ast/lex.re"
	{ fatal_lc(l, c, "newline in character class"); }
#line 2279 "src/ast/lex.cc"
yy371:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy369;
	goto yy368;
yy372:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= ']') {
		if (yych <= '3') {
			if (yych <= '\r') {
				if (yych == '\n') goto yy369;
				if (yych >= '\r') goto yy375;
			} else {
				if (yych == '-') goto yy376;
				if (yych >= '0') goto yy378;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy380;
				if (yych == 'U') goto yy381;
			} else {
				if (yych <= 'X') goto yy383;
				if (yych <= '[') goto yy373;
				if (yych <= '\\') goto yy384;
				goto yy386;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= '`') goto yy373;
				if (yych <= 'a') goto yy388;
				if (yych <= 'b') goto yy390;
			} else {
				if (yych <= 'f') goto yy392;
				if (yych == 'n') goto yy394;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy396;
				if (yych <= 's') goto yy373;
				if (yych <= 't') goto yy398;
				goto yy383;
			} else {
				if (yych <= 'v') goto yy400;
				if (yych == 'x') goto yy402;
			}
		}
	}
yy373:
	++YYCURSOR;
yy374:
#line 552 "../src/ast/lex.re"
	{
			warn.useless_escape(cline, get_column(), tok[1]);
			return static_cast<uint8_t>(tok[1]);
		}
#line 2336 "src/ast/lex.cc"
yy375:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy369;
	goto yy374;
yy376:
	++YYCURSOR;
#line 550 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 2345 "src/ast/lex.cc"
yy378:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy379;
	if (yych <= '7') goto yy403;
yy379:
#line 536 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in octal escape sequence"); }
#line 2354 "src/ast/lex.cc"
yy380:
	++YYCURSOR;
	goto yy379;
yy381:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy382;
		if (yych <= '9') goto yy405;
	} else {
		if (yych <= 'F') goto yy405;
		if (yych <= '`') goto yy382;
		if (yych <= 'f') goto yy405;
	}
yy382:
#line 535 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in hexadecimal escape sequence"); }
#line 2372 "src/ast/lex.cc"
yy383:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy382;
		if (yych <= '9') goto yy406;
		goto yy382;
	} else {
		if (yych <= 'F') goto yy406;
		if (yych <= '`') goto yy382;
		if (yych <= 'f') goto yy406;
		goto yy382;
	}
yy384:
	++YYCURSOR;
#line 549 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2390 "src/ast/lex.cc"
yy386:
	++YYCURSOR;
#line 551 "../src/ast/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 2395 "src/ast/lex.cc"
yy388:
	++YYCURSOR;
#line 542 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2400 "src/ast/lex.cc"
yy390:
	++YYCURSOR;
#line 543 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2405 "src/ast/lex.cc"
yy392:
	++YYCURSOR;
#line 544 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2410 "src/ast/lex.cc"
yy394:
	++YYCURSOR;
#line 545 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2415 "src/ast/lex.cc"
yy396:
	++YYCURSOR;
#line 546 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2420 "src/ast/lex.cc"
yy398:
	++YYCURSOR;
#line 547 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2425 "src/ast/lex.cc"
yy400:
	++YYCURSOR;
#line 548 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2430 "src/ast/lex.cc"
yy402:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy382;
		if (yych <= '9') goto yy407;
		goto yy382;
	} else {
		if (yych <= 'F') goto yy407;
		if (yych <= '`') goto yy382;
		if (yych <= 'f') goto yy407;
		goto yy382;
	}
yy403:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy404;
	if (yych <= '7') goto yy408;
yy404:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy379;
	} else {
		goto yy382;
	}
yy405:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy404;
		if (yych <= '9') goto yy410;
		goto yy404;
	} else {
		if (yych <= 'F') goto yy410;
		if (yych <= '`') goto yy404;
		if (yych <= 'f') goto yy410;
		goto yy404;
	}
yy406:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy404;
		if (yych <= '9') goto yy411;
		goto yy404;
	} else {
		if (yych <= 'F') goto yy411;
		if (yych <= '`') goto yy404;
		if (yych <= 'f') goto yy411;
		goto yy404;
	}
yy407:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy404;
		if (yych <= '9') goto yy412;
		goto yy404;
	} else {
		if (yych <= 'F') goto yy412;
		if (yych <= '`') goto yy404;
		if (yych <= 'f') goto yy412;
		goto yy404;
	}
yy408:
	++YYCURSOR;
#line 541 "../src/ast/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2495 "src/ast/lex.cc"
yy410:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy404;
		if (yych <= '9') goto yy414;
		goto yy404;
	} else {
		if (yych <= 'F') goto yy414;
		if (yych <= '`') goto yy404;
		if (yych <= 'f') goto yy414;
		goto yy404;
	}
yy411:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy404;
		if (yych <= '9') goto yy407;
		goto yy404;
	} else {
		if (yych <= 'F') goto yy407;
		if (yych <= '`') goto yy404;
		if (yych <= 'f') goto yy407;
		goto yy404;
	}
yy412:
	++YYCURSOR;
#line 540 "../src/ast/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2524 "src/ast/lex.cc"
yy414:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy404;
		if (yych >= ':') goto yy404;
	} else {
		if (yych <= 'F') goto yy415;
		if (yych <= '`') goto yy404;
		if (yych >= 'g') goto yy404;
	}
yy415:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy404;
		if (yych <= '9') goto yy406;
		goto yy404;
	} else {
		if (yych <= 'F') goto yy406;
		if (yych <= '`') goto yy404;
		if (yych <= 'f') goto yy406;
		goto yy404;
	}
}
#line 556 "../src/ast/lex.re"

}

uint32_t Scanner::lex_str_chr(char quote, bool &end)
{
	end = false;
	tok = cur;
	const uint32_t l = get_cline(), c = get_column();
	
#line 2558 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych == '\n') goto yy420;
	} else {
		if (yych <= '\r') goto yy422;
		if (yych == '\\') goto yy423;
	}
	++YYCURSOR;
yy419:
#line 571 "../src/ast/lex.re"
	{
			end = tok[0] == quote;
			return static_cast<uint8_t>(tok[0]);
		}
#line 2577 "src/ast/lex.cc"
yy420:
	++YYCURSOR;
#line 566 "../src/ast/lex.re"
	{ fatal_lc(l, c, "newline in character string"); }
#line 2582 "src/ast/lex.cc"
yy422:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy420;
	goto yy419;
yy423:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '7') {
			if (yych <= '\f') {
				if (yych == '\n') goto yy420;
			} else {
				if (yych <= '\r') goto yy426;
				if (yych <= '/') goto yy424;
				if (yych <= '3') goto yy427;
				goto yy429;
			}
		} else {
			if (yych <= 'W') {
				if (yych == 'U') goto yy430;
			} else {
				if (yych <= 'X') goto yy432;
				if (yych == '\\') goto yy433;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy435;
				if (yych <= 'b') goto yy437;
			} else {
				if (yych <= 'f') goto yy439;
				if (yych == 'n') goto yy441;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy443;
				if (yych <= 's') goto yy424;
				if (yych <= 't') goto yy445;
				goto yy432;
			} else {
				if (yych <= 'v') goto yy447;
				if (yych == 'x') goto yy449;
			}
		}
	}
yy424:
	++YYCURSOR;
yy425:
#line 585 "../src/ast/lex.re"
	{
			if (tok[1] != quote) {
				warn.useless_escape(cline, get_column(), tok[1]);
			}
			return static_cast<uint8_t>(tok[1]);
		}
#line 2638 "src/ast/lex.cc"
yy426:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy420;
	goto yy425;
yy427:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy428;
	if (yych <= '7') goto yy450;
yy428:
#line 568 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in octal escape sequence"); }
#line 2651 "src/ast/lex.cc"
yy429:
	++YYCURSOR;
	goto yy428;
yy430:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy431;
		if (yych <= '9') goto yy452;
	} else {
		if (yych <= 'F') goto yy452;
		if (yych <= '`') goto yy431;
		if (yych <= 'f') goto yy452;
	}
yy431:
#line 567 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in hexadecimal escape sequence"); }
#line 2669 "src/ast/lex.cc"
yy432:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy431;
		if (yych <= '9') goto yy453;
		goto yy431;
	} else {
		if (yych <= 'F') goto yy453;
		if (yych <= '`') goto yy431;
		if (yych <= 'f') goto yy453;
		goto yy431;
	}
yy433:
	++YYCURSOR;
#line 584 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2687 "src/ast/lex.cc"
yy435:
	++YYCURSOR;
#line 577 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2692 "src/ast/lex.cc"
yy437:
	++YYCURSOR;
#line 578 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2697 "src/ast/lex.cc"
yy439:
	++YYCURSOR;
#line 579 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2702 "src/ast/lex.cc"
yy441:
	++YYCURSOR;
#line 580 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2707 "src/ast/lex.cc"
yy443:
	++YYCURSOR;
#line 581 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2712 "src/ast/lex.cc"
yy445:
	++YYCURSOR;
#line 582 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2717 "src/ast/lex.cc"
yy447:
	++YYCURSOR;
#line 583 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2722 "src/ast/lex.cc"
yy449:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy431;
		if (yych <= '9') goto yy454;
		goto yy431;
	} else {
		if (yych <= 'F') goto yy454;
		if (yych <= '`') goto yy431;
		if (yych <= 'f') goto yy454;
		goto yy431;
	}
yy450:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy451;
	if (yych <= '7') goto yy455;
yy451:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy428;
	} else {
		goto yy431;
	}
yy452:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy451;
		if (yych <= '9') goto yy457;
		goto yy451;
	} else {
		if (yych <= 'F') goto yy457;
		if (yych <= '`') goto yy451;
		if (yych <= 'f') goto yy457;
		goto yy451;
	}
yy453:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy451;
		if (yych <= '9') goto yy458;
		goto yy451;
	} else {
		if (yych <= 'F') goto yy458;
		if (yych <= '`') goto yy451;
		if (yych <= 'f') goto yy458;
		goto yy451;
	}
yy454:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy451;
		if (yych <= '9') goto yy459;
		goto yy451;
	} else {
		if (yych <= 'F') goto yy459;
		if (yych <= '`') goto yy451;
		if (yych <= 'f') goto yy459;
		goto yy451;
	}
yy455:
	++YYCURSOR;
#line 576 "../src/ast/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2787 "src/ast/lex.cc"
yy457:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy451;
		if (yych <= '9') goto yy461;
		goto yy451;
	} else {
		if (yych <= 'F') goto yy461;
		if (yych <= '`') goto yy451;
		if (yych <= 'f') goto yy461;
		goto yy451;
	}
yy458:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy451;
		if (yych <= '9') goto yy454;
		goto yy451;
	} else {
		if (yych <= 'F') goto yy454;
		if (yych <= '`') goto yy451;
		if (yych <= 'f') goto yy454;
		goto yy451;
	}
yy459:
	++YYCURSOR;
#line 575 "../src/ast/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2816 "src/ast/lex.cc"
yy461:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy451;
		if (yych >= ':') goto yy451;
	} else {
		if (yych <= 'F') goto yy462;
		if (yych <= '`') goto yy451;
		if (yych >= 'g') goto yy451;
	}
yy462:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy451;
		if (yych <= '9') goto yy453;
		goto yy451;
	} else {
		if (yych <= 'F') goto yy453;
		if (yych <= '`') goto yy451;
		if (yych <= 'f') goto yy453;
		goto yy451;
	}
}
#line 591 "../src/ast/lex.re"

}

const AST *Scanner::lex_str(char quote)
{
	const uint32_t column = get_column();
	std::vector<ASTChar> *str = new std::vector<ASTChar>;
	for (bool end;;) {
		const uint32_t c = lex_str_chr(quote, end);
		if (end) return ast_str(cline, column, str, quote == '\'');
		str->push_back(ASTChar(c, get_column()));
	}
}

void Scanner::set_sourceline ()
{
sourceline:
	tok = cur;

#line 2860 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy467;
	} else {
		if (yych <= '"') goto yy469;
		if (yych <= '0') goto yy465;
		if (yych <= '9') goto yy470;
	}
yy465:
	++YYCURSOR;
yy466:
#line 633 "../src/ast/lex.re"
	{
  					goto sourceline;
  				}
#line 2913 "src/ast/lex.cc"
yy467:
	++YYCURSOR;
#line 621 "../src/ast/lex.re"
	{
  					if (cur == eof)
  					{
						--cur; 
					}
			  		else
			  		{
			  			pos = cur; 
			  		}
			  		tok = cur;
			  		return; 
				}
#line 2929 "src/ast/lex.cc"
yy469:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy466;
	goto yy474;
yy470:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy470;
	}
#line 610 "../src/ast/lex.re"
	{
					if (!s_to_u32_unsafe (tok, cur, cline))
					{
						fatal_lc(get_cline(), get_column(), "line number overflow");
					}
					goto sourceline; 
				}
#line 2949 "src/ast/lex.cc"
yy473:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy474:
	if (yybm[0+yych] & 128) {
		goto yy473;
	}
	if (yych <= '\n') goto yy475;
	if (yych <= '"') goto yy476;
	goto yy478;
yy475:
	YYCURSOR = YYMARKER;
	goto yy466;
yy476:
	++YYCURSOR;
#line 617 "../src/ast/lex.re"
	{
					escape (in.file_name, std::string (tok + 1, tok_len () - 2)); // -2 to omit quotes
			  		goto sourceline; 
				}
#line 2971 "src/ast/lex.cc"
yy478:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy475;
	goto yy473;
}
#line 636 "../src/ast/lex.re"

}

} // end namespace re2c
