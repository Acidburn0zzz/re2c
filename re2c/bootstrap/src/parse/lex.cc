/* Generated by re2c 0.16 on Sun Dec 18 11:56:11 2016 */
#line 1 "../src/parse/lex.re"
#include "src/util/c99_stdint.h"
#include <stddef.h>
#include <string.h>
#include <algorithm>
#include <limits>
#include <string>

#include "src/codegen/output.h"
#include "src/conf/warn.h"
#include "src/globals.h"
#include "src/ir/regexp/encoding/enc.h"
#include "src/ir/regexp/regexp.h"
#include "src/parse/code.h"
#include "src/parse/extop.h"
#include "src/parse/input.h"
#include "src/parse/scanner.h"
#include "src/parse/parser.h" // needed by "y.tab.h"
#include "src/parse/unescape.h"
#include "src/util/range.h"
#include "src/util/s_to_n32_unsafe.h"
#include "y.tab.h"

extern YYSTYPE yylval;

#define	YYCTYPE		unsigned char
#define	YYCURSOR	cur
#define	YYLIMIT		lim
#define	YYMARKER	ptr
#define	YYCTXMARKER ctx
#define	YYFILL(n)	{ fill (n); }

namespace re2c
{

// source code is in ASCII: pointers have type 'char *'
// but re2c makes an implicit assumption that YYCTYPE is unsigned
// when it generates comparisons
#line 40 "../src/parse/lex.re"


#line 61 "../src/parse/lex.re"


Scanner::ParseMode Scanner::echo()
{
	if (eof && cur == eof) // Catch EOF
	{
		return Stop;
	}

	tok = cur;
echo:
	const char *start = cur;


#line 59 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 16) YYFILL(16);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 152 "../src/parse/lex.re"
	{
		if (cur == eof) {
			if (opts->target == opt_t::CODE) {
				out.wraw(tok, start);
			}
			return Stop;
		}
		goto echo;
	}
#line 127 "src/parse/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 173 "../src/parse/lex.re"
	{ goto echo; }
#line 133 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 167 "../src/parse/lex.re"
	{
		cline++;
		pos = cur;
		goto echo;
	}
#line 148 "src/parse/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy7;
	} else {
		goto yy5;
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 75 "../src/parse/lex.re"
	{
		if (opts->rFlag) {
			fatal("found standard 're2c' block while using -r flag");
		}
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		return Parse;
	}
#line 201 "src/parse/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'i':	goto yy23;
	case 'm':	goto yy24;
	case 'r':	goto yy25;
	case 't':	goto yy26;
	case 'u':	goto yy27;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy28;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy29;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy30;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy31;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy32;
	if (yych == 'u') goto yy33;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy34;
	if (yych == 'y') goto yy35;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy36;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy37;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy38;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy39;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy40;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy41;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy42;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy43;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy44;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy45;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy47;
	if (yych <= '9') goto yy13;
	goto yy47;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy48;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy49;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy50;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy51;
	goto yy13;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy52;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy53;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy54;
	goto yy13;
yy46:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy47:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy46;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy46;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			YYCTXMARKER = YYCURSOR;
			goto yy55;
		}
		goto yy13;
	}
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy57;
	goto yy13;
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy58;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy59;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy60;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy61;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy62;
	goto yy13;
yy54:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy63;
	goto yy13;
yy55:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy55;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy64;
		if (yych <= '\n') goto yy66;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy68;
		if (yych == ' ') goto yy64;
		goto yy13;
	}
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy69;
	goto yy13;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy70;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy71;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy72;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy73;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy74;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy75;
	goto yy13;
yy64:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy64;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy64;
		if (yych == '"') goto yy76;
		goto yy13;
	}
yy66:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 162 "../src/parse/lex.re"
	{
		set_sourceline();
		goto echo;
	}
#line 434 "src/parse/lex.cc"
yy68:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy66;
	goto yy13;
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy78;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy79;
	goto yy13;
yy71:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy80;
	goto yy13;
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy81;
	goto yy13;
yy73:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy82;
	goto yy13;
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy83;
	goto yy13;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy84;
	goto yy13;
yy76:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy76;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy85;
	goto yy86;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy87;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy88;
	goto yy13;
yy80:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy89;
	goto yy13;
yy81:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy91;
	goto yy13;
yy82:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy92;
	goto yy13;
yy83:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy93;
	goto yy13;
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy94;
	goto yy13;
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy66;
	if (yych == '\r') goto yy68;
	goto yy13;
yy86:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy13;
	goto yy76;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy96;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy97;
	goto yy13;
yy89:
	++YYCURSOR;
#line 115 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start)
				.wdelay_yymaxfill();
		}
		lex_end_of_comment();
		goto echo;
	}
#line 535 "src/parse/lex.cc"
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy98;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy99;
	goto yy13;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy101;
	goto yy13;
yy94:
	++YYCURSOR;
#line 96 "../src/parse/lex.re"
	{
		if (!opts->rFlag) {
			fatal("found 'use:re2c' block without -r flag");
		}
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		reuse();
		return Reuse;
	}
#line 561 "src/parse/lex.cc"
yy96:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy102;
	goto yy13;
yy97:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy103;
	goto yy13;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy104;
	goto yy13;
yy99:
	++YYCURSOR;
#line 144 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		lex_tags();
		goto echo;
	}
#line 584 "src/parse/lex.cc"
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy106;
	goto yy13;
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy108;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy109;
	goto yy13;
yy104:
	++YYCURSOR;
#line 85 "../src/parse/lex.re"
	{
		if (!opts->rFlag) {
			fatal("found 'rules:re2c' block without -r flag");
		}
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		opts.reset_mapCodeName ();
		return Rules;
	}
#line 610 "src/parse/lex.cc"
yy106:
	++YYCURSOR;
#line 133 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start)
				.wdelay_line_info()
				.wdelay_types()
				.wline_info(cline, get_fname().c_str());
		}
		lex_end_of_comment();
		goto echo;
	}
#line 624 "src/parse/lex.cc"
yy108:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy111;
	goto yy13;
yy109:
	++YYCURSOR;
#line 107 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		lex_end_of_comment();
		goto echo;
	}
#line 639 "src/parse/lex.cc"
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
#line 124 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start)
				.wdelay_state_goto(opts->topIndent);
		}
		lex_end_of_comment();
		goto echo;
	}
#line 653 "src/parse/lex.cc"
}
#line 174 "../src/parse/lex.re"

}

void Scanner::lex_end_of_comment()
{
	uint32_t ignored = 0;
	for (;;) {
#line 663 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy116;
		if (yych == '\n') goto yy120;
		goto yy118;
	} else {
		if (yych <= '\r') goto yy122;
		if (yych == '*') goto yy123;
		goto yy118;
	}
yy116:
	++YYCURSOR;
#line 181 "../src/parse/lex.re"
	{ fatal("expected end of block"); }
#line 681 "src/parse/lex.cc"
yy118:
	++YYCURSOR;
yy119:
#line 183 "../src/parse/lex.re"
	{ continue; }
#line 687 "src/parse/lex.cc"
yy120:
	++YYCURSOR;
#line 184 "../src/parse/lex.re"
	{ ++ignored; continue; }
#line 692 "src/parse/lex.cc"
yy122:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy120;
	goto yy119;
yy123:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy119;
	++YYCURSOR;
#line 185 "../src/parse/lex.re"
	{
			if (ignored > 0) {
				cline += ignored;
				out.ws("\n").wline_info(cline, get_fname().c_str());
			}
			tok = pos = cur;
			return;
		}
#line 710 "src/parse/lex.cc"
}
#line 193 "../src/parse/lex.re"
}
}

void Scanner::lex_tags()
{
	std::string fmt, sep;
	for (;;) {
#line 720 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy130;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy133;
		} else {
			if (yych == '\r') goto yy135;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy136;
			if (yych >= 'f') goto yy137;
		} else {
			if (yych == 's') goto yy138;
		}
	}
	++YYCURSOR;
yy129:
#line 200 "../src/parse/lex.re"
	{ fatal("unrecognized configuration"); }
#line 780 "src/parse/lex.cc"
yy130:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy130;
	}
#line 205 "../src/parse/lex.re"
	{ continue; }
#line 790 "src/parse/lex.cc"
yy133:
	++YYCURSOR;
#line 206 "../src/parse/lex.re"
	{ ++cline; continue; }
#line 795 "src/parse/lex.cc"
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy133;
	goto yy129;
yy136:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy139;
	goto yy129;
yy137:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy141;
	goto yy129;
yy138:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy143;
	goto yy129;
yy139:
	++YYCURSOR;
#line 207 "../src/parse/lex.re"
	{
			if (opts->target == opt_t::CODE) {
				out.wdelay_tags(opts->topIndent,
					new ConfTags(fmt, sep));
			}
			tok = pos = cur;
			return;
		}
#line 823 "src/parse/lex.cc"
yy141:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy144;
yy142:
	YYCURSOR = YYMARKER;
	goto yy129;
yy143:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy145;
	goto yy142;
yy144:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy146;
	goto yy142;
yy145:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy147;
	goto yy142;
yy146:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy148;
	goto yy142;
yy147:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy149;
	goto yy142;
yy148:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy150;
	goto yy142;
yy149:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy152;
	goto yy142;
yy150:
	++YYCURSOR;
#line 202 "../src/parse/lex.re"
	{ fmt = lex_conf_string(); continue; }
#line 862 "src/parse/lex.cc"
yy152:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy142;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy142;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy142;
	++YYCURSOR;
#line 203 "../src/parse/lex.re"
	{ sep = lex_conf_string(); continue; }
#line 873 "src/parse/lex.cc"
}
#line 215 "../src/parse/lex.re"
}
}

int Scanner::scan()
{
	uint32_t depth;

scan:
	tchar = cur - pos;
	tline = cline;
	tok = cur;
	switch (lexer_state)
	{
		case LEX_NORMAL:    goto start;
		case LEX_FLEX_NAME: goto flex_name;
	}

start:

#line 895 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy161;
	}
	if (yych <= '9') {
		if (yych <= '&') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy159;
				if (yych <= '\n') goto yy164;
				if (yych >= '\r') goto yy166;
			} else {
				if (yych <= '"') {
					if (yych >= '"') goto yy167;
				} else {
					if (yych == '%') goto yy169;
				}
			}
		} else {
			if (yych <= '+') {
				if (yych <= '\'') goto yy170;
				if (yych <= ')') goto yy172;
				if (yych <= '*') goto yy174;
				goto yy176;
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy172;
				} else {
					if (yych <= '.') goto yy178;
					if (yych <= '/') goto yy180;
					goto yy181;
				}
			}
		}
	} else {
		if (yych <= '\\') {
			if (yych <= '>') {
				if (yych <= ':') goto yy183;
				if (yych == '<') goto yy184;
				goto yy172;
			} else {
				if (yych <= '@') {
					if (yych <= '?') goto yy176;
					goto yy185;
				} else {
					if (yych <= 'Z') goto yy181;
					if (yych <= '[') goto yy186;
					goto yy172;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych == '_') goto yy181;
				if (yych >= 'a') goto yy181;
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy188;
					goto yy181;
				} else {
					if (yych <= '{') goto yy189;
					if (yych <= '|') goto yy172;
				}
			}
		}
	}
yy159:
	++YYCURSOR;
yy160:
#line 397 "../src/parse/lex.re"
	{
					fatalf("unexpected character: '%c'", *tok);
					goto scan;
				}
#line 1006 "src/parse/lex.cc"
yy161:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy161;
	}
#line 381 "../src/parse/lex.re"
	{
					goto scan;
				}
#line 1018 "src/parse/lex.cc"
yy164:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy191;
	} else {
		if (yych <= ' ') goto yy191;
		if (yych == '#') goto yy194;
	}
yy165:
#line 390 "../src/parse/lex.re"
	{
					if (cur == eof) return 0;
					pos = cur;
					cline++;
					goto scan;
				}
#line 1036 "src/parse/lex.cc"
yy166:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy164;
	goto yy160;
yy167:
	++YYCURSOR;
#line 264 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"',  opts->bCaseInsensitive ||  opts->bCaseInverted); return TOKEN_REGEXP; }
#line 1045 "src/parse/lex.cc"
yy169:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy196;
	goto yy160;
yy170:
	++YYCURSOR;
#line 263 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\'', opts->bCaseInsensitive || !opts->bCaseInverted); return TOKEN_REGEXP; }
#line 1054 "src/parse/lex.cc"
yy172:
	++YYCURSOR;
yy173:
#line 284 "../src/parse/lex.re"
	{
					return *tok;
				}
#line 1062 "src/parse/lex.cc"
yy174:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy196;
#line 288 "../src/parse/lex.re"
	{
					yylval.op = *tok;
					return TOKEN_STAR;
				}
#line 1071 "src/parse/lex.cc"
yy176:
	++YYCURSOR;
#line 292 "../src/parse/lex.re"
	{
					yylval.op = *tok;
					return TOKEN_CLOSE;
				}
#line 1079 "src/parse/lex.cc"
yy178:
	++YYCURSOR;
#line 376 "../src/parse/lex.re"
	{
					yylval.regexp = mkDot();
					return TOKEN_REGEXP;
				}
#line 1087 "src/parse/lex.cc"
yy180:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy198;
	if (yych == '/') goto yy200;
	goto yy173;
yy181:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy182:
	if (yybm[0+yych] & 32) {
		goto yy181;
	}
	if (yych <= ' ') {
		if (yych == '\t') {
			YYCTXMARKER = YYCURSOR;
			goto yy204;
		}
		if (yych <= 0x1F) goto yy202;
		YYCTXMARKER = YYCURSOR;
		goto yy204;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy202;
			YYCTXMARKER = YYCURSOR;
			goto yy206;
		} else {
			if (yych <= '<') goto yy202;
			if (yych <= '>') {
				YYCTXMARKER = YYCURSOR;
				goto yy206;
			}
			goto yy202;
		}
	}
yy183:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy208;
	goto yy160;
yy184:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '!') goto yy210;
	if (yych == '>') goto yy212;
	goto yy173;
yy185:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy160;
		if (yych <= '9') goto yy213;
		if (yych <= '@') goto yy160;
		goto yy213;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy160;
			goto yy213;
		} else {
			if (yych <= '`') goto yy160;
			if (yych <= 'z') goto yy213;
			goto yy160;
		}
	}
yy186:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy216;
#line 265 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1155 "src/parse/lex.cc"
yy188:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy218;
	goto yy182;
yy189:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy221;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy219;
		if (yych >= 'A') goto yy223;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy223;
		} else {
			if (yych <= '`') goto yy190;
			if (yych <= 'z') goto yy223;
		}
	}
yy190:
#line 234 "../src/parse/lex.re"
	{
					depth = 1;
					goto code;
				}
#line 1183 "src/parse/lex.cc"
yy191:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy191;
	} else {
		if (yych <= ' ') goto yy191;
		if (yych == '#') goto yy194;
	}
yy193:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy165;
		} else {
			goto yy173;
		}
	} else {
		if (yyaccept == 2) {
			goto yy190;
		} else {
			goto yy220;
		}
	}
yy194:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy194;
		goto yy193;
	} else {
		if (yych <= ' ') goto yy194;
		if (yych == 'l') goto yy225;
		goto yy193;
	}
yy196:
	++YYCURSOR;
#line 258 "../src/parse/lex.re"
	{
					tok = cur;
					return 0;
				}
#line 1228 "src/parse/lex.cc"
yy198:
	++YYCURSOR;
#line 252 "../src/parse/lex.re"
	{
					depth = 1;
					goto comment;
				}
#line 1236 "src/parse/lex.cc"
yy200:
	++YYCURSOR;
#line 249 "../src/parse/lex.re"
	{
				goto nextLine;
			}
#line 1243 "src/parse/lex.cc"
yy202:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 360 "../src/parse/lex.re"
	{
					if (!opts->FFlag) {
						yylval.str = new std::string (tok, tok_len());
						return TOKEN_ID;
					} else {
						const RegExp *r = NULL;
						const bool casing = opts->bCaseInsensitive || opts->bCaseInverted;
						for (char *s = tok; s < cur; ++s) {
							const uint32_t c = static_cast<uint8_t>(*s);
							r = doCat(r, casing ? ichr(c) : schr(c));
						}
						yylval.regexp = r ? r : RegExp::make_nil();
						return TOKEN_REGEXP;
					}
				}
#line 1263 "src/parse/lex.cc"
yy204:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy204;
		if (yych <= 0x1F) goto yy226;
		goto yy204;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy226;
		} else {
			if (yych <= '<') goto yy226;
			if (yych >= '?') goto yy226;
		}
	}
yy206:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 355 "../src/parse/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					return TOKEN_ID;
				}
#line 1288 "src/parse/lex.cc"
yy208:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy228;
#line 243 "../src/parse/lex.re"
	{
					tok += 2; /* skip ":=" */
					depth = 0;
					goto code;
				}
#line 1298 "src/parse/lex.cc"
yy210:
	++YYCURSOR;
#line 271 "../src/parse/lex.re"
	{
					return TOKEN_SETUP;
				}
#line 1305 "src/parse/lex.cc"
yy212:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '9') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy193;
			YYCTXMARKER = YYCURSOR;
			goto yy230;
		} else {
			if (yych == ' ') {
				YYCTXMARKER = YYCURSOR;
				goto yy230;
			}
			goto yy193;
		}
	} else {
		if (yych <= '=') {
			if (yych <= ':') {
				YYCTXMARKER = YYCURSOR;
				goto yy232;
			}
			if (yych <= '<') goto yy193;
			YYCTXMARKER = YYCURSOR;
			goto yy233;
		} else {
			if (yych == '{') {
				YYCTXMARKER = YYCURSOR;
				goto yy234;
			}
			goto yy193;
		}
	}
yy213:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy215;
		if (yych <= '9') goto yy213;
		if (yych >= 'A') goto yy213;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy213;
		} else {
			if (yych <= '`') goto yy215;
			if (yych <= 'z') goto yy213;
		}
	}
yy215:
#line 275 "../src/parse/lex.re"
	{
		if (!opts->tags) {
			fatal("tags are only allowed with '-T, --tags' option");
		}
		const std::string *name = new std::string(tok + 1, tok_len() - 1);
		yylval.regexp = RegExp::make_tag(name);
		return TOKEN_REGEXP;
	}
#line 1363 "src/parse/lex.cc"
yy216:
	++YYCURSOR;
#line 266 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1368 "src/parse/lex.cc"
yy218:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy236;
	goto yy182;
yy219:
	++YYCURSOR;
yy220:
#line 328 "../src/parse/lex.re"
	{
					fatal("illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
				}
#line 1380 "src/parse/lex.cc"
yy221:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy221;
	}
	if (yych <= '^') {
		if (yych <= ',') {
			if (yych <= '+') goto yy193;
			goto yy237;
		} else {
			if (yych <= '@') goto yy193;
			if (yych >= '[') goto yy193;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy193;
		} else {
			if (yych == '}') goto yy238;
			goto yy193;
		}
	}
yy223:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy193;
			goto yy223;
		} else {
			if (yych <= '@') goto yy193;
			if (yych <= 'Z') goto yy223;
			goto yy193;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy193;
			goto yy223;
		} else {
			if (yych == '}') goto yy240;
			goto yy193;
		}
	}
yy225:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy242;
	goto yy193;
yy226:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 342 "../src/parse/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					if (opts->FFlag)
					{
						lexer_state = LEX_FLEX_NAME;
						return TOKEN_FID;
					}
					else
					{
						return TOKEN_ID;
					}
				}
#line 1446 "src/parse/lex.cc"
yy228:
	++YYCURSOR;
	YYCURSOR -= 2;
#line 239 "../src/parse/lex.re"
	{
					return *tok;
				}
#line 1454 "src/parse/lex.cc"
yy230:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '9') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy193;
			goto yy230;
		} else {
			if (yych == ' ') goto yy230;
			goto yy193;
		}
	} else {
		if (yych <= '=') {
			if (yych <= ':') goto yy232;
			if (yych <= '<') goto yy193;
			goto yy233;
		} else {
			if (yych == '{') goto yy234;
			goto yy193;
		}
	}
yy232:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy234;
	goto yy193;
yy233:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '>') goto yy193;
yy234:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 268 "../src/parse/lex.re"
	{
					return TOKEN_NOCOND;
				}
#line 1491 "src/parse/lex.cc"
yy236:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy243;
	goto yy182;
yy237:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy220;
	if (yych <= '9') goto yy244;
	if (yych == '}') goto yy246;
	goto yy220;
yy238:
	++YYCURSOR;
#line 297 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.extop.min))
					{
						fatal ("repetition count overflow");
					}
					yylval.extop.max = yylval.extop.min;
					return TOKEN_CLOSESIZE;
				}
#line 1514 "src/parse/lex.cc"
yy240:
	++YYCURSOR;
#line 332 "../src/parse/lex.re"
	{
					if (!opts->FFlag) {
						fatal("curly braces for names only allowed with -F switch");
					}
					yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
					return TOKEN_ID;
				}
#line 1525 "src/parse/lex.cc"
yy242:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy248;
	goto yy193;
yy243:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy249;
	goto yy182;
yy244:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy193;
	if (yych <= '9') goto yy244;
	if (yych == '}') goto yy251;
	goto yy193;
yy246:
	++YYCURSOR;
#line 319 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					yylval.extop.max = std::numeric_limits<uint32_t>::max();
					return TOKEN_CLOSESIZE;
				}
#line 1553 "src/parse/lex.cc"
yy248:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy253;
	goto yy193;
yy249:
	++YYCURSOR;
#line 340 "../src/parse/lex.re"
	{ lex_conf (); return TOKEN_CONF; }
#line 1562 "src/parse/lex.cc"
yy251:
	++YYCURSOR;
#line 306 "../src/parse/lex.re"
	{
					const char * p = strchr (tok, ',');
					if (!s_to_u32_unsafe (tok + 1, p, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.extop.max))
					{
						fatal ("repetition upper bound overflow");
					}
					return TOKEN_CLOSESIZE;
				}
#line 1578 "src/parse/lex.cc"
yy253:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy255;
	if (yych <= '9') goto yy193;
	goto yy255;
yy254:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy255:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy254;
		goto yy193;
	} else {
		if (yych <= ' ') goto yy254;
		if (yych <= '0') goto yy193;
		if (yych >= ':') goto yy193;
		YYCTXMARKER = YYCURSOR;
	}
yy256:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy193;
		} else {
			if (yych <= '\n') goto yy260;
			if (yych <= '\f') goto yy193;
			goto yy262;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy193;
		} else {
			if (yych <= '/') goto yy193;
			if (yych <= '9') goto yy256;
			goto yy193;
		}
	}
yy258:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy258;
		goto yy193;
	} else {
		if (yych <= ' ') goto yy258;
		if (yych == '"') goto yy263;
		goto yy193;
	}
yy260:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 385 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto scan;
				}
#line 1639 "src/parse/lex.cc"
yy262:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy260;
	goto yy193;
yy263:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy263;
	}
	if (yych <= '\n') goto yy193;
	if (yych >= '#') goto yy266;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy260;
	if (yych == '\r') goto yy262;
	goto yy193;
yy266:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy193;
	goto yy263;
}
#line 401 "../src/parse/lex.re"


flex_name:

#line 1669 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy271;
	if (yych == '\r') goto yy273;
	++YYCURSOR;
yy270:
#line 412 "../src/parse/lex.re"
	{
		YYCURSOR = tok;
		goto start;
	}
#line 1683 "src/parse/lex.cc"
yy271:
	++YYCURSOR;
#line 406 "../src/parse/lex.re"
	{
		YYCURSOR = tok;
		lexer_state = LEX_NORMAL;
		return TOKEN_FID_END;
	}
#line 1692 "src/parse/lex.cc"
yy273:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy271;
	goto yy270;
}
#line 416 "../src/parse/lex.re"


code:

#line 1703 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96, 112,   0,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		112,  96,  64,  96,  96,  96,  96,  32, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,   0,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy276;
			if (yych <= '\t') goto yy278;
			goto yy280;
		} else {
			if (yych == '"') goto yy282;
			goto yy278;
		}
	} else {
		if (yych <= '{') {
			if (yych <= '\'') goto yy283;
			if (yych <= 'z') goto yy278;
			goto yy284;
		} else {
			if (yych == '}') goto yy286;
			goto yy278;
		}
	}
yy276:
	++YYCURSOR;
#line 479 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						if (depth)
						{
							fatal("missing '}'");
						}
						return 0;
					}
					goto code;
				}
#line 1776 "src/parse/lex.cc"
yy278:
	++YYCURSOR;
yy279:
#line 493 "../src/parse/lex.re"
	{
					goto code;
				}
#line 1784 "src/parse/lex.cc"
yy280:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy288;
		} else {
			if (yych <= '\n') goto yy290;
			if (yych >= '\r') goto yy290;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy288;
		} else {
			if (yych == '#') goto yy291;
		}
	}
yy281:
#line 460 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						tok += strspn(tok, " \t\r\n");
						while (cur > tok && strchr(" \t\r\n", cur[-1]))
						{
							--cur;
						}
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return TOKEN_CODE;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1823 "src/parse/lex.cc"
yy282:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy279;
	goto yy295;
yy283:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy279;
	goto yy300;
yy284:
	++YYCURSOR;
#line 432 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else
					{
						++depth;
					}
					goto code;
				}
#line 1848 "src/parse/lex.cc"
yy286:
	++YYCURSOR;
#line 420 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else if (--depth == 0)
					{
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return TOKEN_CODE;
					}
					goto code;
				}
#line 1864 "src/parse/lex.cc"
yy288:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy302;
	} else {
		if (yych <= ' ') goto yy302;
		if (yych == '#') goto yy291;
	}
yy289:
	YYCURSOR -= 1;
#line 447 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						goto code;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1890 "src/parse/lex.cc"
yy290:
	++YYCURSOR;
	goto yy289;
yy291:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy291;
	}
	if (yych == 'l') goto yy304;
yy293:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy281;
		} else {
			goto yy279;
		}
	} else {
		goto yy289;
	}
yy294:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy295:
	if (yybm[0+yych] & 32) {
		goto yy294;
	}
	if (yych <= '\n') goto yy293;
	if (yych >= '#') goto yy298;
yy296:
	++YYCURSOR;
#line 490 "../src/parse/lex.re"
	{
					goto code;
				}
#line 1929 "src/parse/lex.cc"
yy298:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy293;
	goto yy294;
yy299:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy300:
	if (yybm[0+yych] & 64) {
		goto yy299;
	}
	if (yych <= '\n') goto yy293;
	if (yych <= '\'') goto yy296;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy293;
	goto yy299;
yy302:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy302;
		goto yy293;
	} else {
		if (yych <= ' ') goto yy302;
		if (yych == '#') goto yy291;
		goto yy293;
	}
yy304:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy293;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy293;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy293;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy309;
	if (yych <= '9') goto yy293;
	goto yy309;
yy308:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy309:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy308;
		goto yy293;
	} else {
		if (yych <= ' ') goto yy308;
		if (yych <= '0') goto yy293;
		if (yych >= ':') goto yy293;
		YYCTXMARKER = YYCURSOR;
	}
yy310:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy310;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy293;
		if (yych <= '\t') goto yy312;
		if (yych <= '\n') goto yy314;
		goto yy293;
	} else {
		if (yych <= '\r') goto yy316;
		if (yych != ' ') goto yy293;
	}
yy312:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy312;
		goto yy293;
	} else {
		if (yych <= ' ') goto yy312;
		if (yych == '"') goto yy317;
		goto yy293;
	}
yy314:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 443 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto code;
				}
#line 2024 "src/parse/lex.cc"
yy316:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy314;
	goto yy293;
yy317:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy293;
		goto yy317;
	} else {
		if (yych <= '"') goto yy319;
		if (yych == '\\') goto yy320;
		goto yy317;
	}
yy319:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy314;
	if (yych == '\r') goto yy316;
	goto yy293;
yy320:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy293;
	goto yy317;
}
#line 496 "../src/parse/lex.re"


comment:

#line 2058 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ')') {
		if (yych == '\n') goto yy325;
	} else {
		if (yych <= '*') goto yy327;
		if (yych == '/') goto yy328;
	}
	++YYCURSOR;
yy324:
#line 528 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					goto comment;
				}
#line 2113 "src/parse/lex.cc"
yy325:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy329;
	}
	if (yych == '#') goto yy332;
yy326:
#line 519 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					tok = pos = cur;
					cline++;
					goto comment;
				}
#line 2131 "src/parse/lex.cc"
yy327:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy334;
	goto yy324;
yy328:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy336;
	goto yy324;
yy329:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy329;
	}
	if (yych == '#') goto yy332;
yy331:
	YYCURSOR = YYMARKER;
	goto yy326;
yy332:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy332;
		goto yy331;
	} else {
		if (yych <= ' ') goto yy332;
		if (yych == 'l') goto yy338;
		goto yy331;
	}
yy334:
	++YYCURSOR;
#line 500 "../src/parse/lex.re"
	{
					if (--depth == 0)
					{
						goto scan;
					}
					else
					{
						goto comment;
					}
				}
#line 2176 "src/parse/lex.cc"
yy336:
	++YYCURSOR;
#line 510 "../src/parse/lex.re"
	{
					++depth;
					fatal("ambiguous /* found");
					goto comment;
				}
#line 2185 "src/parse/lex.cc"
yy338:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy331;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy331;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy331;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy343;
	if (yych <= '9') goto yy331;
	goto yy343;
yy342:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy343:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy342;
		goto yy331;
	} else {
		if (yych <= ' ') goto yy342;
		if (yych <= '0') goto yy331;
		if (yych >= ':') goto yy331;
		YYCTXMARKER = YYCURSOR;
	}
yy344:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy344;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy331;
		if (yych <= '\t') goto yy346;
		if (yych <= '\n') goto yy348;
		goto yy331;
	} else {
		if (yych <= '\r') goto yy350;
		if (yych != ' ') goto yy331;
	}
yy346:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy346;
		goto yy331;
	} else {
		if (yych <= ' ') goto yy346;
		if (yych == '"') goto yy351;
		goto yy331;
	}
yy348:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 515 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto comment;
				}
#line 2247 "src/parse/lex.cc"
yy350:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy348;
	goto yy331;
yy351:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy351;
	}
	if (yych <= '\n') goto yy331;
	if (yych >= '#') goto yy354;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy348;
	if (yych == '\r') goto yy350;
	goto yy331;
yy354:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy331;
	goto yy351;
}
#line 535 "../src/parse/lex.re"


nextLine:

#line 2277 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy359;
	++YYCURSOR;
#line 546 "../src/parse/lex.re"
	{  if(cur == eof) {
                  return 0;
               }
               goto nextLine;
            }
#line 2290 "src/parse/lex.cc"
yy359:
	++YYCURSOR;
#line 539 "../src/parse/lex.re"
	{ if(cur == eof) {
                  return 0;
               }
               tok = pos = cur;
               cline++;
               goto scan;
            }
#line 2301 "src/parse/lex.cc"
}
#line 551 "../src/parse/lex.re"

}

static void escape (std::string & dest, const std::string & src)
{
	dest = src;
	size_t l = dest.length();
	for (size_t p = 0; p < l; ++p)
	{
		if (dest[p] == '\\')
		{
			dest.insert(++p, "\\");
			++l;
		}
	}
}

const RegExp *Scanner::lex_cls(bool neg)
{
	Range *r = NULL, *s;
	uint32_t u, l;
fst:
	
#line 2327 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy364;
#line 575 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 2335 "src/parse/lex.cc"
yy364:
	++YYCURSOR;
#line 574 "../src/parse/lex.re"
	{ goto end; }
#line 2340 "src/parse/lex.cc"
}
#line 576 "../src/parse/lex.re"

snd:
	
#line 2346 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy369;
yy368:
#line 579 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 2355 "src/parse/lex.cc"
yy369:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy371;
	YYCURSOR = YYMARKER;
	goto yy368;
yy371:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 580 "../src/parse/lex.re"
	{
			u = lex_cls_chr();
			if (l > u) {
				warn.swapped_range(get_line(), l, u);
				std::swap(l, u);
			}
			goto add;
		}
#line 2373 "src/parse/lex.cc"
}
#line 588 "../src/parse/lex.re"

add:
	if (!(s = opts->encoding.encodeRange(l, u))) {
		fatalf ("Bad code point range: '0x%X - 0x%X'", l, u);
	}
	r = Range::add(r, s);
	goto fst;
end:
	if (neg) {
		r = Range::sub(opts->encoding.fullRange(), r);
	}
	return cls(r);
}

uint32_t Scanner::lex_cls_chr()
{
	tok = cur;
	
#line 2394 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy377;
	if (yych == '\\') goto yy379;
	++YYCURSOR;
#line 611 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(tok[0]); }
#line 2405 "src/parse/lex.cc"
yy377:
	++YYCURSOR;
#line 606 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error"); }
#line 2410 "src/parse/lex.cc"
yy379:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '7') {
			if (yych <= ',') {
				if (yych != '\n') goto yy381;
			} else {
				if (yych <= '-') goto yy383;
				if (yych <= '/') goto yy381;
				if (yych <= '3') goto yy385;
				goto yy387;
			}
		} else {
			if (yych <= 'X') {
				if (yych == 'U') goto yy388;
				if (yych <= 'W') goto yy381;
				goto yy390;
			} else {
				if (yych <= '[') goto yy381;
				if (yych <= '\\') goto yy391;
				if (yych <= ']') goto yy393;
				goto yy381;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy395;
				if (yych <= 'b') goto yy397;
				goto yy381;
			} else {
				if (yych <= 'f') goto yy399;
				if (yych == 'n') goto yy401;
				goto yy381;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy403;
				if (yych <= 's') goto yy381;
				if (yych <= 't') goto yy405;
				goto yy390;
			} else {
				if (yych <= 'v') goto yy407;
				if (yych == 'x') goto yy409;
				goto yy381;
			}
		}
	}
#line 609 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in escape sequence"); }
#line 2461 "src/parse/lex.cc"
yy381:
	++YYCURSOR;
#line 624 "../src/parse/lex.re"
	{
			warn.useless_escape(tline, tok - pos, tok[1]);
			return static_cast<uint8_t>(tok[1]);
		}
#line 2469 "src/parse/lex.cc"
yy383:
	++YYCURSOR;
#line 622 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 2474 "src/parse/lex.cc"
yy385:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy386;
	if (yych <= '7') goto yy410;
yy386:
#line 608 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in octal escape sequence"); }
#line 2483 "src/parse/lex.cc"
yy387:
	++YYCURSOR;
	goto yy386;
yy388:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy389;
		if (yych <= '9') goto yy412;
	} else {
		if (yych <= 'F') goto yy412;
		if (yych <= '`') goto yy389;
		if (yych <= 'f') goto yy412;
	}
yy389:
#line 607 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2501 "src/parse/lex.cc"
yy390:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy389;
		if (yych <= '9') goto yy413;
		goto yy389;
	} else {
		if (yych <= 'F') goto yy413;
		if (yych <= '`') goto yy389;
		if (yych <= 'f') goto yy413;
		goto yy389;
	}
yy391:
	++YYCURSOR;
#line 621 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2519 "src/parse/lex.cc"
yy393:
	++YYCURSOR;
#line 623 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 2524 "src/parse/lex.cc"
yy395:
	++YYCURSOR;
#line 614 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2529 "src/parse/lex.cc"
yy397:
	++YYCURSOR;
#line 615 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2534 "src/parse/lex.cc"
yy399:
	++YYCURSOR;
#line 616 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2539 "src/parse/lex.cc"
yy401:
	++YYCURSOR;
#line 617 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2544 "src/parse/lex.cc"
yy403:
	++YYCURSOR;
#line 618 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2549 "src/parse/lex.cc"
yy405:
	++YYCURSOR;
#line 619 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2554 "src/parse/lex.cc"
yy407:
	++YYCURSOR;
#line 620 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2559 "src/parse/lex.cc"
yy409:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy389;
		if (yych <= '9') goto yy414;
		goto yy389;
	} else {
		if (yych <= 'F') goto yy414;
		if (yych <= '`') goto yy389;
		if (yych <= 'f') goto yy414;
		goto yy389;
	}
yy410:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy411;
	if (yych <= '7') goto yy415;
yy411:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy386;
	} else {
		goto yy389;
	}
yy412:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy411;
		if (yych <= '9') goto yy417;
		goto yy411;
	} else {
		if (yych <= 'F') goto yy417;
		if (yych <= '`') goto yy411;
		if (yych <= 'f') goto yy417;
		goto yy411;
	}
yy413:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy411;
		if (yych <= '9') goto yy418;
		goto yy411;
	} else {
		if (yych <= 'F') goto yy418;
		if (yych <= '`') goto yy411;
		if (yych <= 'f') goto yy418;
		goto yy411;
	}
yy414:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy411;
		if (yych <= '9') goto yy419;
		goto yy411;
	} else {
		if (yych <= 'F') goto yy419;
		if (yych <= '`') goto yy411;
		if (yych <= 'f') goto yy419;
		goto yy411;
	}
yy415:
	++YYCURSOR;
#line 613 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2624 "src/parse/lex.cc"
yy417:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy411;
		if (yych <= '9') goto yy421;
		goto yy411;
	} else {
		if (yych <= 'F') goto yy421;
		if (yych <= '`') goto yy411;
		if (yych <= 'f') goto yy421;
		goto yy411;
	}
yy418:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy411;
		if (yych <= '9') goto yy414;
		goto yy411;
	} else {
		if (yych <= 'F') goto yy414;
		if (yych <= '`') goto yy411;
		if (yych <= 'f') goto yy414;
		goto yy411;
	}
yy419:
	++YYCURSOR;
#line 612 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2653 "src/parse/lex.cc"
yy421:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy411;
		if (yych >= ':') goto yy411;
	} else {
		if (yych <= 'F') goto yy422;
		if (yych <= '`') goto yy411;
		if (yych >= 'g') goto yy411;
	}
yy422:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy411;
		if (yych <= '9') goto yy413;
		goto yy411;
	} else {
		if (yych <= 'F') goto yy413;
		if (yych <= '`') goto yy411;
		if (yych <= 'f') goto yy413;
		goto yy411;
	}
}
#line 628 "../src/parse/lex.re"

}

uint32_t Scanner::lex_str_chr(char quote, bool &end)
{
	end = false;
	tok = cur;
	
#line 2686 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy427;
	if (yych == '\\') goto yy429;
	++YYCURSOR;
#line 641 "../src/parse/lex.re"
	{
			end = tok[0] == quote;
			return static_cast<uint8_t>(tok[0]);
		}
#line 2700 "src/parse/lex.cc"
yy427:
	++YYCURSOR;
#line 636 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error"); }
#line 2705 "src/parse/lex.cc"
yy429:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 'a') {
		if (yych <= 'T') {
			if (yych <= '/') {
				if (yych != '\n') goto yy431;
			} else {
				if (yych <= '3') goto yy433;
				if (yych <= '7') goto yy435;
				goto yy431;
			}
		} else {
			if (yych <= 'X') {
				if (yych <= 'U') goto yy436;
				if (yych <= 'W') goto yy431;
				goto yy438;
			} else {
				if (yych == '\\') goto yy439;
				if (yych <= '`') goto yy431;
				goto yy441;
			}
		}
	} else {
		if (yych <= 'r') {
			if (yych <= 'f') {
				if (yych <= 'b') goto yy443;
				if (yych <= 'e') goto yy431;
				goto yy445;
			} else {
				if (yych == 'n') goto yy447;
				if (yych <= 'q') goto yy431;
				goto yy449;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 's') goto yy431;
				if (yych <= 't') goto yy451;
				goto yy438;
			} else {
				if (yych <= 'v') goto yy453;
				if (yych == 'x') goto yy455;
				goto yy431;
			}
		}
	}
#line 639 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in escape sequence"); }
#line 2753 "src/parse/lex.cc"
yy431:
	++YYCURSOR;
#line 655 "../src/parse/lex.re"
	{
			if (tok[1] != quote) {
				warn.useless_escape(tline, tok - pos, tok[1]);
			}
			return static_cast<uint8_t>(tok[1]);
		}
#line 2763 "src/parse/lex.cc"
yy433:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy434;
	if (yych <= '7') goto yy456;
yy434:
#line 638 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in octal escape sequence"); }
#line 2772 "src/parse/lex.cc"
yy435:
	++YYCURSOR;
	goto yy434;
yy436:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy437;
		if (yych <= '9') goto yy458;
	} else {
		if (yych <= 'F') goto yy458;
		if (yych <= '`') goto yy437;
		if (yych <= 'f') goto yy458;
	}
yy437:
#line 637 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2790 "src/parse/lex.cc"
yy438:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy437;
		if (yych <= '9') goto yy459;
		goto yy437;
	} else {
		if (yych <= 'F') goto yy459;
		if (yych <= '`') goto yy437;
		if (yych <= 'f') goto yy459;
		goto yy437;
	}
yy439:
	++YYCURSOR;
#line 654 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2808 "src/parse/lex.cc"
yy441:
	++YYCURSOR;
#line 647 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2813 "src/parse/lex.cc"
yy443:
	++YYCURSOR;
#line 648 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2818 "src/parse/lex.cc"
yy445:
	++YYCURSOR;
#line 649 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2823 "src/parse/lex.cc"
yy447:
	++YYCURSOR;
#line 650 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2828 "src/parse/lex.cc"
yy449:
	++YYCURSOR;
#line 651 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2833 "src/parse/lex.cc"
yy451:
	++YYCURSOR;
#line 652 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2838 "src/parse/lex.cc"
yy453:
	++YYCURSOR;
#line 653 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2843 "src/parse/lex.cc"
yy455:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy437;
		if (yych <= '9') goto yy460;
		goto yy437;
	} else {
		if (yych <= 'F') goto yy460;
		if (yych <= '`') goto yy437;
		if (yych <= 'f') goto yy460;
		goto yy437;
	}
yy456:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy457;
	if (yych <= '7') goto yy461;
yy457:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy434;
	} else {
		goto yy437;
	}
yy458:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy457;
		if (yych <= '9') goto yy463;
		goto yy457;
	} else {
		if (yych <= 'F') goto yy463;
		if (yych <= '`') goto yy457;
		if (yych <= 'f') goto yy463;
		goto yy457;
	}
yy459:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy457;
		if (yych <= '9') goto yy464;
		goto yy457;
	} else {
		if (yych <= 'F') goto yy464;
		if (yych <= '`') goto yy457;
		if (yych <= 'f') goto yy464;
		goto yy457;
	}
yy460:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy457;
		if (yych <= '9') goto yy465;
		goto yy457;
	} else {
		if (yych <= 'F') goto yy465;
		if (yych <= '`') goto yy457;
		if (yych <= 'f') goto yy465;
		goto yy457;
	}
yy461:
	++YYCURSOR;
#line 646 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2908 "src/parse/lex.cc"
yy463:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy457;
		if (yych <= '9') goto yy467;
		goto yy457;
	} else {
		if (yych <= 'F') goto yy467;
		if (yych <= '`') goto yy457;
		if (yych <= 'f') goto yy467;
		goto yy457;
	}
yy464:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy457;
		if (yych <= '9') goto yy460;
		goto yy457;
	} else {
		if (yych <= 'F') goto yy460;
		if (yych <= '`') goto yy457;
		if (yych <= 'f') goto yy460;
		goto yy457;
	}
yy465:
	++YYCURSOR;
#line 645 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2937 "src/parse/lex.cc"
yy467:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy457;
		if (yych >= ':') goto yy457;
	} else {
		if (yych <= 'F') goto yy468;
		if (yych <= '`') goto yy457;
		if (yych >= 'g') goto yy457;
	}
yy468:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy457;
		if (yych <= '9') goto yy459;
		goto yy457;
	} else {
		if (yych <= 'F') goto yy459;
		if (yych <= '`') goto yy457;
		if (yych <= 'f') goto yy459;
		goto yy457;
	}
}
#line 661 "../src/parse/lex.re"

}

const RegExp *Scanner::lex_str(char quote, bool casing)
{
	const RegExp *r = NULL;
	for (bool end;;) {
		const uint32_t c = lex_str_chr(quote, end);
		if (end) {
			return r ? r : RegExp::make_nil();
		}
		r = doCat(r, casing ? ichr(c) : schr(c));
	}
}

void Scanner::set_sourceline ()
{
sourceline:
	tok = cur;

#line 2982 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy473;
	} else {
		if (yych <= '"') goto yy475;
		if (yych <= '0') goto yy471;
		if (yych <= '9') goto yy476;
	}
yy471:
	++YYCURSOR;
yy472:
#line 704 "../src/parse/lex.re"
	{
  					goto sourceline;
  				}
#line 3035 "src/parse/lex.cc"
yy473:
	++YYCURSOR;
#line 692 "../src/parse/lex.re"
	{
  					if (cur == eof)
  					{
						--cur; 
					}
			  		else
			  		{
			  			pos = cur; 
			  		}
			  		tok = cur;
			  		return; 
				}
#line 3051 "src/parse/lex.cc"
yy475:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy472;
	goto yy480;
yy476:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy476;
	}
#line 681 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok, cur, cline))
					{
						fatal ("line number overflow");
					}
					goto sourceline; 
				}
#line 3071 "src/parse/lex.cc"
yy479:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy480:
	if (yybm[0+yych] & 128) {
		goto yy479;
	}
	if (yych <= '\n') goto yy481;
	if (yych <= '"') goto yy482;
	goto yy484;
yy481:
	YYCURSOR = YYMARKER;
	goto yy472;
yy482:
	++YYCURSOR;
#line 688 "../src/parse/lex.re"
	{
					escape (in.file_name, std::string (tok + 1, tok_len () - 2)); // -2 to omit quotes
			  		goto sourceline; 
				}
#line 3093 "src/parse/lex.cc"
yy484:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy481;
	goto yy479;
}
#line 707 "../src/parse/lex.re"

}

} // end namespace re2c
