/* Generated by re2c 0.9.4 on Sun Oct 31 23:17:13 2004 */
#line 1 "scanner.re"
/* $Id$ */
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include "scanner.h"
#include "parser.h"
#include "y.tab.h"

extern YYSTYPE yylval;

#ifndef MAX
#define MAX(a,b) (((a)>(b))?(a):(b))
#endif

#define	BSIZE	8192

#define	YYCTYPE		char
#define	YYCURSOR	cursor
#define	YYLIMIT		lim
#define	YYMARKER	ptr
#define	YYFILL(n)	{cursor = fill(cursor);}

#define	RETURN(i)	{cur = cursor; return i;}

namespace re2c
{

Scanner::Scanner(std::istream& i) : in(i),
	bot(NULL), tok(NULL), ptr(NULL), cur(NULL), pos(NULL), lim(NULL),
	top(NULL), eof(NULL), tchar(0), tline(0), cline(1) {
    ;
}

char *Scanner::fill(char *cursor){
    if(!eof){
	uint cnt = tok - bot;
	if(cnt){
	    memcpy(bot, tok, lim - tok);
	    tok = bot;
	    ptr -= cnt;
	    cursor -= cnt;
	    pos -= cnt;
	    lim -= cnt;
	}
	if((top - lim) < BSIZE){
	    char *buf = new char[(lim - bot) + BSIZE];
	    memcpy(buf, tok, lim - tok);
	    tok = buf;
	    ptr = &buf[ptr - bot];
	    cursor = &buf[cursor - bot];
	    pos = &buf[pos - bot];
	    lim = &buf[lim - bot];
	    top = &lim[BSIZE];
	    delete [] bot;
	    bot = buf;
	}
	if((cnt = in.rdbuf()->sgetn((char*) lim, BSIZE)) != BSIZE){
	    eof = &lim[cnt]; *eof++ = '\0';
	}
	lim += cnt;
    }
    return cursor;
}

#line 75 "scanner.re"


int Scanner::echo(std::ostream &out){
    char *cursor = cur;

    // Catch EOF
    if (eof && cursor == eof)
	{
    	return 0;
	}

    tok = cursor;
echo:

#line 7 "scanner.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept;
	goto yy0;
yy1:	++YYCURSOR;
yy0:
	if((YYLIMIT - YYCURSOR) < 7) YYFILL(7);
	yych = *YYCURSOR;
	if(yych <= 0x0A){
		if(yych <= 0x00)	goto yy6;
		if(yych <= 0x09)	goto yy8;
		goto yy4;
	} else {
		if(yych != '/')	goto yy8;
		goto yy2;
	}
yy2:	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	if(yych == '*')	goto yy9;
	goto yy3;
yy3:
#line 97 "scanner.re"
{ goto echo; }
#line 31 "scanner.cc"
yy4:	++YYCURSOR;
	goto yy5;
yy5:
#line 92 "scanner.re"
{ out.write((const char*)(tok), (const char*)(cursor) - (const char*)(tok));
				  tok = pos = cursor; cline++;
				  goto echo; }
#line 39 "scanner.cc"
yy6:	++YYCURSOR;
	goto yy7;
yy7:
#line 95 "scanner.re"
{ out.write((const char*)(tok), (const char*)(cursor) - (const char*)(tok) - 1); // -1 so we don't write out the \0
				  if(cursor == eof) { RETURN(0); } }
#line 46 "scanner.cc"
yy8:	yych = *++YYCURSOR;
	goto yy3;
yy9:	yych = *++YYCURSOR;
	if(yych == '!')	goto yy11;
	goto yy10;
yy10:	YYCURSOR = YYMARKER;
	switch(yyaccept){
	case 0:	goto yy3;
	}
yy11:	yych = *++YYCURSOR;
	if(yych != 'r')	goto yy10;
	goto yy12;
yy12:	yych = *++YYCURSOR;
	if(yych != 'e')	goto yy10;
	goto yy13;
yy13:	yych = *++YYCURSOR;
	if(yych != '2')	goto yy10;
	goto yy14;
yy14:	yych = *++YYCURSOR;
	if(yych != 'c')	goto yy10;
	goto yy15;
yy15:	++YYCURSOR;
	goto yy16;
yy16:
#line 89 "scanner.re"
{ out.write((const char*)(tok), (const char*)(&cursor[-7]) - (const char*)(tok));
				  tok = cursor;
				  RETURN(1); }
#line 75 "scanner.cc"
}
#line 98 "scanner.re"

}


int Scanner::scan(){
    char *cursor = cur;
    uint depth;

scan:
    tchar = cursor - pos;
    tline = cline;
    tok = cursor;

#line 79 "scanner.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept;
	goto yy17;
yy18:	++YYCURSOR;
yy17:
	if((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if(yych <= '/'){
		if(yych <= '"'){
			if(yych <= 0x0A){
				if(yych <= 0x08)	goto yy39;
				if(yych <= 0x09)	goto yy35;
				goto yy37;
			} else {
				if(yych == ' ')	goto yy35;
				if(yych <= '!')	goto yy39;
				goto yy25;
			}
		} else {
			if(yych <= ')'){
				if(yych <= '&')	goto yy39;
				if(yych <= '\'')	goto yy27;
				goto yy31;
			} else {
				if(yych <= '*')	goto yy23;
				if(yych <= '+')	goto yy32;
				if(yych <= '.')	goto yy39;
				goto yy21;
			}
		}
	} else {
		if(yych <= '@'){
			if(yych <= '<'){
				if(yych == ';')	goto yy31;
				goto yy39;
			} else {
				if(yych <= '=')	goto yy31;
				if(yych == '?')	goto yy32;
				goto yy39;
			}
		} else {
			if(yych <= '`'){
				if(yych <= 'Z')	goto yy33;
				if(yych <= '[')	goto yy29;
				if(yych <= '\\')	goto yy31;
				goto yy39;
			} else {
				if(yych <= 'z')	goto yy33;
				if(yych <= '{')	goto yy19;
				if(yych <= '|')	goto yy31;
				goto yy39;
			}
		}
	}
yy19:	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	if(yych <= '/')	goto yy20;
	if(yych <= '9')	goto yy65;
	goto yy20;
yy20:
#line 111 "scanner.re"
{ depth = 1;
				  goto code;
				}
#line 145 "scanner.cc"
yy21:	++YYCURSOR;
	if((yych = *YYCURSOR) == '*')	goto yy63;
	goto yy22;
yy22:
#line 137 "scanner.re"
{ RETURN(*tok); }
#line 152 "scanner.cc"
yy23:	++YYCURSOR;
	if((yych = *YYCURSOR) == '/')	goto yy61;
	goto yy24;
yy24:
#line 139 "scanner.re"
{ yylval.op = *tok;
				  RETURN(CLOSE); }
#line 160 "scanner.cc"
yy25:	yyaccept = 1;
	yych = *(YYMARKER = ++YYCURSOR);
	if(yych != 0x0A)	goto yy57;
	goto yy26;
yy26:
#line 128 "scanner.re"
{ fatal("unterminated string constant (missing \")"); }
#line 168 "scanner.cc"
yy27:	yyaccept = 2;
	yych = *(YYMARKER = ++YYCURSOR);
	if(yych != 0x0A)	goto yy52;
	goto yy28;
yy28:
#line 129 "scanner.re"
{ fatal("unterminated string constant (missing ')"); }
#line 176 "scanner.cc"
yy29:	yyaccept = 3;
	yych = *(YYMARKER = ++YYCURSOR);
	if(yych != 0x0A)	goto yy46;
	goto yy30;
yy30:
#line 135 "scanner.re"
{ fatal("unterminated range (missing ])"); }
#line 184 "scanner.cc"
yy31:	yych = *++YYCURSOR;
	goto yy22;
yy32:	yych = *++YYCURSOR;
	goto yy24;
yy33:	++YYCURSOR;
	yych = *YYCURSOR;
	goto yy44;
yy34:
#line 154 "scanner.re"
{ cur = cursor;
				  yylval.symbol = Symbol::find(token());
				  return ID; }
#line 196 "scanner.cc"
yy35:	++YYCURSOR;
	yych = *YYCURSOR;
	goto yy42;
yy36:
#line 158 "scanner.re"
{ goto scan; }
#line 202 "scanner.cc"
yy37:	++YYCURSOR;
	goto yy38;
yy38:
#line 160 "scanner.re"
{ if(cursor == eof) RETURN(0);
				  pos = cursor; cline++;
				  goto scan;
	    			}
#line 211 "scanner.cc"
yy39:	++YYCURSOR;
	goto yy40;
yy40:
#line 165 "scanner.re"
{ std::cerr << "unexpected character: " << *tok << std::endl;
				  goto scan;
				}
#line 219 "scanner.cc"
yy41:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	goto yy42;
yy42:	if(yych == 0x09)	goto yy41;
	if(yych == ' ')	goto yy41;
	goto yy36;
yy43:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	goto yy44;
yy44:	if(yych <= '@'){
		if(yych <= '/')	goto yy34;
		if(yych <= '9')	goto yy43;
		goto yy34;
	} else {
		if(yych <= 'Z')	goto yy43;
		if(yych <= '`')	goto yy34;
		if(yych <= 'z')	goto yy43;
		goto yy34;
	}
yy45:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	goto yy46;
yy46:	if(yych <= '['){
		if(yych != 0x0A)	goto yy45;
		goto yy47;
	} else {
		if(yych <= '\\')	goto yy48;
		if(yych <= ']')	goto yy49;
		goto yy45;
	}
yy47:	YYCURSOR = YYMARKER;
	switch(yyaccept){
	case 0:	goto yy20;
	case 1:	goto yy26;
	case 2:	goto yy28;
	case 3:	goto yy30;
	}
yy48:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if(yych == 0x0A)	goto yy47;
	goto yy45;
yy49:	++YYCURSOR;
	goto yy50;
yy50:
#line 131 "scanner.re"
{ cur = cursor;
				  yylval.regexp = ranToRE(token());
				  return RANGE; }
#line 276 "scanner.cc"
yy51:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	goto yy52;
yy52:	if(yych <= '&'){
		if(yych == 0x0A)	goto yy47;
		goto yy51;
	} else {
		if(yych <= '\'')	goto yy54;
		if(yych != '\\')	goto yy51;
		goto yy53;
	}
yy53:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if(yych == 0x0A)	goto yy47;
	goto yy51;
yy54:	++YYCURSOR;
	goto yy55;
yy55:
#line 124 "scanner.re"
{ cur = cursor;
				  yylval.regexp = strToCaseInsensitiveRE(token());
				  return STRING; }
#line 303 "scanner.cc"
yy56:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	goto yy57;
yy57:	if(yych <= '!'){
		if(yych == 0x0A)	goto yy47;
		goto yy56;
	} else {
		if(yych <= '"')	goto yy59;
		if(yych != '\\')	goto yy56;
		goto yy58;
	}
yy58:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if(yych == 0x0A)	goto yy47;
	goto yy56;
yy59:	++YYCURSOR;
	goto yy60;
yy60:
#line 120 "scanner.re"
{ cur = cursor;
				  yylval.regexp = strToRE(token());
				  return STRING; }
#line 330 "scanner.cc"
yy61:	++YYCURSOR;
	goto yy62;
yy62:
#line 117 "scanner.re"
{ tok = cursor;
				  RETURN(0); }
#line 337 "scanner.cc"
yy63:	++YYCURSOR;
	goto yy64;
yy64:
#line 114 "scanner.re"
{ depth = 1;
				  goto comment; }
#line 344 "scanner.cc"
yy65:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	goto yy66;
yy66:	if(yych <= '/'){
		if(yych == ',')	goto yy69;
		goto yy47;
	} else {
		if(yych <= '9')	goto yy65;
		if(yych != '}')	goto yy47;
		goto yy67;
	}
yy67:	++YYCURSOR;
	goto yy68;
yy68:
#line 142 "scanner.re"
{ yylval.extop.minsize = atoi((char *)tok+1);
				  yylval.extop.maxsize = atoi((char *)tok+1);
				  RETURN(CLOSESIZE); }
#line 365 "scanner.cc"
yy69:	yych = *++YYCURSOR;
	if(yych != '}')	goto yy73;
	goto yy70;
yy70:	++YYCURSOR;
	goto yy71;
yy71:
#line 150 "scanner.re"
{ yylval.extop.minsize = atoi((char *)tok+1);
				  yylval.extop.maxsize = -1;
				  RETURN(CLOSESIZE); }
#line 376 "scanner.cc"
yy72:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	goto yy73;
yy73:	if(yych <= '/')	goto yy47;
	if(yych <= '9')	goto yy72;
	if(yych != '}')	goto yy47;
	goto yy74;
yy74:	++YYCURSOR;
	goto yy75;
yy75:
#line 146 "scanner.re"
{ yylval.extop.minsize = atoi((char *)tok+1);
				  yylval.extop.maxsize = MAX(yylval.extop.minsize,atoi(strchr((char *)tok, ',')+1));
				  RETURN(CLOSESIZE); }
#line 393 "scanner.cc"
}
#line 168 "scanner.re"


code:

#line 397 "scanner.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept;
	goto yy76;
yy77:	++YYCURSOR;
yy76:
	if((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if(yych <= '&'){
		if(yych <= 0x0A){
			if(yych <= 0x09)	goto yy84;
			goto yy82;
		} else {
			if(yych == '"')	goto yy86;
			goto yy84;
		}
	} else {
		if(yych <= '{'){
			if(yych <= '\'')	goto yy87;
			if(yych <= 'z')	goto yy84;
			goto yy80;
		} else {
			if(yych != '}')	goto yy84;
			goto yy78;
		}
	}
yy78:	++YYCURSOR;
	goto yy79;
yy79:
#line 172 "scanner.re"
{ if(--depth == 0){
					cur = cursor;
					yylval.token = new Token(token(), tline);
					return CODE;
				  }
				  goto code; }
#line 434 "scanner.cc"
yy80:	++YYCURSOR;
	goto yy81;
yy81:
#line 178 "scanner.re"
{ ++depth;
				  goto code; }
#line 441 "scanner.cc"
yy82:	++YYCURSOR;
	goto yy83;
yy83:
#line 180 "scanner.re"
{ if(cursor == eof) fatal("missing '}'");
				  pos = cursor; cline++;
				  goto code;
				}
#line 450 "scanner.cc"
yy84:	++YYCURSOR;
	goto yy85;
yy85:
#line 184 "scanner.re"
{ goto code; }
#line 456 "scanner.cc"
yy86:	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	if(yych == 0x0A)	goto yy85;
	goto yy93;
yy87:	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	if(yych == 0x0A)	goto yy85;
	goto yy89;
yy88:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	goto yy89;
yy89:	if(yych <= '&'){
		if(yych != 0x0A)	goto yy88;
		goto yy90;
	} else {
		if(yych <= '\'')	goto yy84;
		if(yych == '\\')	goto yy91;
		goto yy88;
	}
yy90:	YYCURSOR = YYMARKER;
	switch(yyaccept){
	case 0:	goto yy85;
	}
yy91:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if(yych == 0x0A)	goto yy90;
	goto yy88;
yy92:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	goto yy93;
yy93:	if(yych <= '!'){
		if(yych == 0x0A)	goto yy90;
		goto yy92;
	} else {
		if(yych <= '"')	goto yy84;
		if(yych != '\\')	goto yy92;
		goto yy94;
	}
yy94:	++YYCURSOR;
	if(YYLIMIT == YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if(yych == 0x0A)	goto yy90;
	goto yy92;
}
#line 185 "scanner.re"


comment:

#line 510 "scanner.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept;
	goto yy95;
yy96:	++YYCURSOR;
yy95:
	if((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if(yych <= ')'){
		if(yych == 0x0A)	goto yy100;
		goto yy102;
	} else {
		if(yych <= '*')	goto yy97;
		if(yych == '/')	goto yy99;
		goto yy102;
	}
yy97:	++YYCURSOR;
	if((yych = *YYCURSOR) == '/')	goto yy105;
	goto yy98;
yy98:
#line 199 "scanner.re"
{ goto comment; }
#line 533 "scanner.cc"
yy99:	yych = *++YYCURSOR;
	if(yych == '*')	goto yy103;
	goto yy98;
yy100:	++YYCURSOR;
	goto yy101;
yy101:
#line 195 "scanner.re"
{ if(cursor == eof) RETURN(0);
				  tok = pos = cursor; cline++;
				  goto comment;
				}
#line 545 "scanner.cc"
yy102:	yych = *++YYCURSOR;
	goto yy98;
yy103:	++YYCURSOR;
	goto yy104;
yy104:
#line 193 "scanner.re"
{ ++depth;
				  goto comment; }
#line 554 "scanner.cc"
yy105:	++YYCURSOR;
	goto yy106;
yy106:
#line 189 "scanner.re"
{ if(--depth == 0)
					goto scan;
				    else
					goto comment; }
#line 563 "scanner.cc"
}
#line 200 "scanner.re"

}

void Scanner::fatal(char *msg){
    std::cerr << "line " << tline << ", column " << (tchar + 1) << ": "
	<< msg << std::endl;
    exit(1);
}

} // end namespace re2c

