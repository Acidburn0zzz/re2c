%{

#include "src/util/c99_stdint.h"
#include <assert.h>
#include <stddef.h>
#include <stdlib.h>
#include <limits>
#include <list>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>

#include "src/conf/msg.h"
#include "src/codegen/output.h"
#include "src/ir/compile.h"
#include "src/ir/adfa/adfa.h"
#include "src/ir/regexp/encoding/enc.h"
#include "src/ir/regexp/encoding/range_suffix.h"
#include "src/ir/regexp/regexp.h"
#include "src/ir/skeleton/skeleton.h"
#include "src/parse/extop.h"
#include "src/parse/parser.h"
#include "src/parse/scanner.h"
#include "src/util/free_list.h"
#include "src/util/range.h"

#define YYMALLOC malloc
#define YYFREE free

using namespace re2c;

extern "C" {

int yylex(Scanner &in);
void yyerror(Scanner &in, const char*);

} // extern "C"

static std::vector<std::string> condnames;
static re2c::SpecMap  specMap;
static SetupMap            ruleSetupMap;
static symbol_table_t symbol_table;

/* Bison version 1.875 emits a definition that is not working
 * with several g++ version. Hence we disable it here.
 */
#if defined(__GNUC__)
#define __attribute__(x)
#endif

static void check(const Spec &spec, const std::string &cond)
{
	Spec::const_iterator b = spec.begin(), e = spec.end(), i, j;

	// no multiple default rules per condition
	i = std::find_if(b, e, RegExpRule::is_def);
	j = std::find_if(i + 1, e, RegExpRule::is_def);
	if (j != e) {
		const uint32_t
			l1 = (*i)->code->fline,
			l2 = (*j)->code->fline;
		error("line %u: code to default rule %sis already defined at line %u",
			l2, incond(cond).c_str(), l1);
		exit(1);
	}

	// no multiple startup code definitions
	if (cond == "0" && e - b > 1) {
		fprintf(stderr, "re2c: error: multiple definitions of startup code (lines ");
		for (i = b;;) {
			fprintf(stderr, "%u", (*i)->code->fline);
			if (++i == e) break;
			fprintf(stderr, ", ");
		}
		fprintf(stderr, ")\n");
		exit(1);
	}
}

static void delay_default(Spec &spec)
{
	// default rule(s) should go last
	std::stable_partition(spec.begin(), spec.end(), RegExpRule::isnt_def);
}

void context_check(Scanner &in, CondList *clist)
{
	if (clist && clist->size() == 1 && clist->begin()->empty()) {
		if (in.opts->cFlag) {
			in.fatal("condition or '<*>' required when using -c switch");
		}
	} else if (!in.opts->cFlag) {
		delete clist;
		in.fatal("conditions are only allowed when using -c switch");
	}
}

void context_rule(Scanner &in, CondList *clist, RegExpRule *rule, const std::string *newcond)
{
	context_check(in, clist);
	if (newcond) rule->code->cond = *newcond;
	for(CondList::const_iterator i = clist->begin(); i != clist->end(); ++i) {
		const std::string &cond = *i;
		if (cond != "" && cond != "*" && specMap.find(cond) == specMap.end()) {
			condnames.push_back(cond);
		}
		specMap[cond].push_back(rule);
	}
	delete clist;
	delete newcond;
}

void setup_rule(Scanner &in, CondList *clist, const Code * code)
{
	assert(clist);
	assert(code);
	context_check(in, clist);
	for(CondList::const_iterator it = clist->begin(); it != clist->end(); ++it)
	{
		if (ruleSetupMap.find(*it) != ruleSetupMap.end())
		{
			in.fatalf_at(code->fline, "code to setup rule '%s' is already defined", it->c_str());
		}
		ruleSetupMap[*it] = std::make_pair(code->fline, code->text);
	}
	delete clist;
}

static std::string find_setup_rule(const SetupMap &map, const std::string &key)
{
	SetupMap::const_iterator e = map.end(), i;

	i = map.find(key);
	if (i != e) return i->second.second;

	i = map.find("*");
	if (i != e) return i->second.second;

	return "";
}

%}

%start	spec

%lex-param   {Scanner &in}
%parse-param {Scanner &in}

%union {
	const re2c::RegExp * regexp;
	re2c::Code * code;
	char op;
	re2c::ExtOp extop;
	std::string * str;
	re2c::CondList * clist;
	re2c::RegExpRule *rule;
};

%token TOKEN_CLOSE
%token TOKEN_CLOSESIZE
%token TOKEN_CODE
%token TOKEN_CONF
%token TOKEN_ID
%token TOKEN_FID
%token TOKEN_FID_END
%token TOKEN_REGEXP
%token TOKEN_STAR

%type <op>      TOKEN_CLOSE TOKEN_STAR close
%type <extop>   TOKEN_CLOSESIZE
%type <code>    TOKEN_CODE
%type <regexp>  TOKEN_REGEXP rule expr diff term factor primary
%type <str>     TOKEN_ID TOKEN_FID name cname
%type <clist>   clist
%type <rule>    trailexpr

%%

spec
	: /* empty */
	| spec TOKEN_CONF
	| spec def
	| spec rule
	;

def
	: name expr enddef {
		if (!symbol_table.insert(std::make_pair(*$1, $2)).second) {
			in.fatal("sym already defined");
		}
		delete $1;
	}
	/* errors */
	| name expr '/' {
		in.fatal("trailing contexts are not allowed in named definitions");
	};

name
	: TOKEN_ID '=' {
		$$ = $1;
	}
	| TOKEN_FID {
		$$ = $1;
	};

enddef: ';' | TOKEN_FID_END;

rule
	: trailexpr TOKEN_CODE {
		CondList *cl = new CondList;
		cl->insert("");
		$1->code = $2;
		context_rule(in, cl, $1, NULL);
	}

	| '<' clist '>' trailexpr TOKEN_CODE {
		$4->code = $5;
		context_rule(in, $2, $4, NULL);
	}

	| '<' clist '>' trailexpr '=' '>' TOKEN_ID TOKEN_CODE {
		$4->code = $8;
		context_rule(in, $2, $4, $7);
	}

	| '<' clist '>' trailexpr ':' '=' '>' TOKEN_ID {
		$4->code = new Code(in.get_fname(), in.get_cline());
		context_rule(in, $2, $4, $8);
	}

	| '<' '>' TOKEN_CODE {
		CondList *cl = new CondList;
		cl->insert("0");
		RegExpRule *r = new RegExpRule(RegExp::make_nil(), false);
		r->code = $3;
		context_rule(in, cl, r, NULL);
	}

	| '<' '>' '=' '>' TOKEN_ID TOKEN_CODE {
		CondList *cl = new CondList;
		cl->insert("0");
		RegExpRule *r = new RegExpRule(RegExp::make_nil(), false);
		r->code = $6;
		context_rule(in, cl, r, $5);
	}

	| '<' '>' ':' '=' '>' TOKEN_ID {
		CondList *cl = new CondList;
		cl->insert("0");
		RegExpRule *r = new RegExpRule(RegExp::make_nil(), false);
		r->code = new Code(in.get_fname(), in.get_cline());
		context_rule(in, cl, r, $6);
	}

	| '<' '!' clist '>' TOKEN_CODE {
		setup_rule(in, $3, $5);
	};

clist
	: cname {
		$$ = new CondList;
		$$->insert(*$1);
		delete $1;
	}

	| clist ',' cname {
		$1->insert(*$3);
		delete $3;
		$$ = $1;
	};

cname
	: TOKEN_ID
	| TOKEN_STAR { $$ = new std::string("*"); }
	;

trailexpr
	: expr {
		$$ = new RegExpRule($1, false);
	}

	| expr '/' expr {
		$$ = new RegExpRule(RegExp::make_cat($1,
			RegExp::make_cat(RegExp::make_tag(NULL), $3)), false);
	}

	| TOKEN_STAR { /* default rule */
		$$ = new RegExpRule(in.mkDefault(), true);
	};

expr:
		diff
		{
			$$ = $1;
		}
	|	expr '|' diff
		{
			$$ = mkAlt($1, $3);
		}
;

diff:
		term
		{
			$$ = $1;
		}
	|	diff '\\' term
		{
			$$ = in.mkDiff($1, $3);
		}
;

term:
		factor
		{
			$$ = $1;
		}
	|	term factor
		{
			$$ = RegExp::make_cat($1, $2);
		}
;

factor:
		primary
		{
			$$ = $1;
		}
	|	primary close
		{
			// see note [Kleene star is expressed in terms of plus]
			switch($2)
			{
			case '*':
				$$ = RegExp::make_alt(RegExp::make_nil(),
					RegExp::make_iter($1));
				break;
			case '+':
				$$ = RegExp::make_iter($1);
				break;
			case '?':
				$$ = mkAlt($1, RegExp::make_nil());
				break;
			}
		}
	|	primary TOKEN_CLOSESIZE
		{
			if ($2.max == std::numeric_limits<uint32_t>::max())
			{
				$$ = repeat_from ($1, $2.min);
			}
			else if ($2.min == $2.max)
			{
				$$ = repeat ($1, $2.min);
			}
			else
			{
				$$ = repeat_from_to ($1, $2.min, $2.max);
			}
			$$ = $$ ? $$ : RegExp::make_nil();
		}
;

close:
		TOKEN_CLOSE
		{
			$$ = $1;
		}
	|	TOKEN_STAR
		{
			$$ = $1;
		}
	|	close TOKEN_CLOSE
		{
			$$ = ($1 == $2) ? $1 : '*';
		}
	|	close TOKEN_STAR
		{
			$$ = ($1 == $2) ? $1 : '*';
		}
;

primary:
		TOKEN_ID
		{
			symbol_table_t::iterator i = symbol_table.find (* $1);
			delete $1;
			if (i == symbol_table.end ())
			{
				in.fatal("can't find symbol");
			}
			$$ = i->second;
		}
	|	TOKEN_REGEXP
		{
			$$ = $1;
		}
	|	'(' expr ')'
		{
			$$ = $2;
		}
;

%%

extern "C" {

void yyerror(Scanner &in, const char* s)
{
	in.fatal(s);
}

int yylex(Scanner &in)
{
	return in.scan();
}

} // extern "C"

namespace re2c
{

void parse(Scanner &in, Output & o)
{
	dfa_map_t dfa_map;
	ScannerState rules_state, curr_state;
	Opt &opts = in.opts;

	o.source.wversion_time ()
		.wline_info (in.get_cline (), in.get_fname ().c_str ());
	if (opts->target == opt_t::SKELETON)
	{
		emit_prolog (o.source);
	}

	Enc encodingOld = opts->encoding;
	for (Scanner::ParseMode mode; (mode = in.echo()) != Scanner::Stop;) {
		o.source.new_block ();
		bool bPrologBrace = false;

		in.save_state(curr_state);
		if (opts->rFlag && mode == Scanner::Rules && dfa_map.size())
		{
			in.fatal("cannot have a second 'rules:re2c' block");
		}
		if (mode == Scanner::Reuse)
		{
			if (dfa_map.empty())
			{
				in.fatal("got 'use:re2c' without 'rules:re2c'");
			}
		}
		else if (mode == Scanner::Rules)
		{
			in.save_state(rules_state);
		}
		else
		{
			dfa_map.clear();
		}
		specMap.clear();
		yyparse(in);
		if (opts->rFlag && mode == Scanner::Reuse) {
			if (!specMap.empty() || opts->encoding != encodingOld) {
				// Re-parse rules
				mode = Scanner::Parse;
				in.restore_state(rules_state);
				in.reuse();
				dfa_map.clear();
				parse_cleanup();
				specMap.clear();
				yyparse(in);

				// Now append potential new rules
				in.restore_state(curr_state);
				mode = Scanner::Parse;
				yyparse(in);
			}
			encodingOld = opts->encoding;
		}

		o.source.block().line = in.get_cline();
		o.source.block().types = condnames;

		// compile regular expressions to automata
		if (mode != Scanner::Reuse) {
			SpecMap::iterator it;
			for (it = specMap.begin(); it != specMap.end(); ++it) {
				check(it->second, it->first);
			}

			// merge <*> rules to all conditions except "0" with lowest priority
			Spec star;
			if ((it = specMap.find("*")) != specMap.end()) {
				star = it->second;
				specMap.erase(it);
			}
			for (it = specMap.begin(); it != specMap.end(); ++it) {
				if (it->first == "0") continue;
				for (size_t j = 0; j < star.size(); ++j) {
					it->second.push_back(star[j]);
				}
			}

			for (it = specMap.begin(); it != specMap.end(); ++it) {
				delay_default(it->second);
				dfa_map[it->first] = compile(it->second, o, it->first, opts->encoding.nCodeUnits ());
			}
		}

		// generate code
		if (mode != Scanner::Rules) {
			uint32_t ind = opts->topIndent;
			size_t nCount = dfa_map.size();
			for (dfa_map_t::const_iterator i = dfa_map.begin(); i != dfa_map.end(); ++i) {
				o.source.block().setup_rule = find_setup_rule(ruleSetupMap, i->first);
				i->second->emit(o, ind, !--nCount, bPrologBrace);
			}
		}

		o.source.wline_info (in.get_cline (), in.get_fname ().c_str ());
		/* restore original char handling mode*/
		opts.reset_encoding (encodingOld);
	}

	SetupMap::const_iterator itRuleSetup;
	for (itRuleSetup = ruleSetupMap.begin(); itRuleSetup != ruleSetupMap.end(); ++itRuleSetup) {
		if (itRuleSetup->first != "*" && specMap.find(itRuleSetup->first) == specMap.end()) {
			in.fatalf_at(itRuleSetup->second.first, "setup for non existing rule '%s' found", itRuleSetup->first.c_str());
		}
	}
	if (specMap.size() < ruleSetupMap.size()) {
		uint32_t line = in.get_cline();
		itRuleSetup = ruleSetupMap.find("*");
		if (itRuleSetup != ruleSetupMap.end()) {
			line = itRuleSetup->second.first;
		}
		in.fatalf_at(line, "setup for all rules with '*' not possible when all rules are setup explicitly");
	}

	if (opts->target == opt_t::SKELETON)
	{
		emit_epilog (o.source, o.skeletons);
	}

	parse_cleanup();
}

void parse_cleanup()
{
	RegExp::flist.clear();
	Range::vFreeList.clear();
	RangeSuffix::freeList.clear();
	symbol_table.clear ();
	condnames.clear ();
	specMap.clear();
}

} // end namespace re2c
