/* Generated by re2c 0.14.3 on Wed Aug 19 18:44:26 2015 */
#line 1 "../src/parse/scanner_lex.re"
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <sstream>

#include "src/ir/dfa/dfa.h"
#include "src/globals.h"
#include "src/parse/extop.h"
#include "src/parse/parser.h"
#include "src/parse/scanner.h"
#include "src/parse/unescape.h"
#include "y.tab.h"
#include "src/util/s_to_n32_unsafe.h"

extern YYSTYPE yylval;

#define	YYCTYPE		unsigned char
#define	YYCURSOR	cur
#define	YYLIMIT		lim
#define	YYMARKER	ptr
#define	YYCTXMARKER ctx
#define	YYFILL(n)	{ fill (n); }

namespace re2c
{

// source code is in ASCII: pointers have type 'char *'
// but re2c makes an implicit assumption that YYCTYPE is unsigned
// when it generates comparisons
#line 32 "../src/parse/scanner_lex.re"


#line 56 "../src/parse/scanner_lex.re"


Scanner::ParseMode Scanner::echo()
{
	bool ignore_eoc = false;
	int  ignore_cnt = 0;

	if (eof && cur == eof) // Catch EOF
	{
		return Stop;
	}

	tok = cur;
echo:

#line 52 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};

	if ((YYLIMIT - YYCURSOR) < 16) YYFILL(16);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '%') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '$') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '*') {
			if (yych <= ')') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 199 "../src/parse/scanner_lex.re"
	{
					if (!(ignore_eoc || DFlag || flag_skeleton))
					{
						out.write(tok, tok_len () - 1);
						// -1 so we don't write out the \0
					}
					if(cur == eof)
					{
						return Stop;
					}
				}
#line 123 "src/parse/scanner_lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 210 "../src/parse/scanner_lex.re"
	{
					goto echo;
				}
#line 131 "src/parse/scanner_lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy89;
	}
	if (yych == '#') goto yy91;
yy7:
#line 186 "../src/parse/scanner_lex.re"
	{
					if (ignore_eoc)
					{
						ignore_cnt++;
					}
					else if (!(DFlag || flag_skeleton))
					{
						out.write(tok, tok_len ());
					}
					tok = pos = cur;
					cline++;
					goto echo;
				}
#line 154 "src/parse/scanner_lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy32;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy84;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych != '*') goto yy5;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy13;
yy12:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy7;
		} else {
			goto yy5;
		}
	} else {
		goto yy85;
	}
yy13:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy16;
	case 'i':	goto yy15;
	case 'm':	goto yy17;
	case 'r':	goto yy19;
	case 't':	goto yy14;
	case 'u':	goto yy18;
	default:	goto yy12;
	}
yy14:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy74;
	goto yy12;
yy15:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy63;
	goto yy12;
yy16:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy50;
	goto yy12;
yy17:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy42;
	goto yy12;
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy34;
	goto yy12;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy20;
	if (yych == 'u') goto yy21;
	goto yy12;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy31;
	goto yy12;
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'l') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 's') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 87 "../src/parse/scanner_lex.re"
	{
					if (rFlag)
					{
						mapCodeName.clear();
					}
					else
					{
						fatal("found 'rules:re2c' block without -r flag");
					}
					tok = cur;
					return Rules;
				}
#line 251 "src/parse/scanner_lex.cc"
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
yy32:
	++YYCURSOR;
#line 72 "../src/parse/scanner_lex.re"
	{
					if (rFlag)
					{
						fatal("found standard 're2c' block while using -r flag");
					}
					if (!(DFlag || flag_skeleton))
					{
						const size_t lexeme_len = cur[-1] == '{'
							? sizeof ("%{") - 1
							: sizeof ("/*!re2c") - 1;
						out.write(tok, tok_len () - lexeme_len);
					}
					tok = cur;
					return Parse;
				}
#line 273 "src/parse/scanner_lex.cc"
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 99 "../src/parse/scanner_lex.re"
	{
					if (!rFlag)
					{
						fatal("found 'use:re2c' block without -r flag");
					}
					reuse();
					if (!(DFlag || flag_skeleton))
					{
						const size_t lexeme_len = sizeof ("/*!use:re2c") - 1;
						out.write(tok, tok_len () - lexeme_len);
					}
					tok = cur;
					return Reuse;
				}
#line 303 "src/parse/scanner_lex.cc"
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'x') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 113 "../src/parse/scanner_lex.re"
	{
					if (!DFlag)
					{
						out.insert_yymaxfill ();
					}
					tok = pos = cur;
					ignore_eoc = true;
					goto echo;
				}
#line 328 "src/parse/scanner_lex.cc"
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 's') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'a') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 122 "../src/parse/scanner_lex.re"
	{
					tok = pos = cur;
					out.insert_state_goto (topIndent);
					ignore_eoc = true;
					goto echo;
				}
#line 360 "src/parse/scanner_lex.cc"
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 128 "../src/parse/scanner_lex.re"
	{
					tok = pos = cur;
					ignore_eoc = true;
					goto echo;
				}
#line 387 "src/parse/scanner_lex.cc"
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'p') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 's') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 133 "../src/parse/scanner_lex.re"
	{
					tok = pos = cur;
					ignore_eoc = true;
					if (!DFlag)
					{
						out.insert_line_info ();
						out << "\n";
						out.insert_types ();
						out << "\n";
						out.write_line_info (cline, get_fname ().c_str ());
					}
					goto echo;
				}
#line 420 "src/parse/scanner_lex.cc"
yy84:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy87;
	if (yych == '\r') goto yy86;
yy85:
#line 164 "../src/parse/scanner_lex.re"
	{
					if (ignore_eoc)
					{
						if (ignore_cnt)
						{
							out << "\n";
							out.write_line_info (cline, get_fname ().c_str ());
						}
						ignore_eoc = false;
						ignore_cnt = 0;
					}
					else if (!(DFlag || flag_skeleton))
					{
						out.write(tok, tok_len ());
					}
					tok = pos = cur;
					goto echo;
				}
#line 446 "src/parse/scanner_lex.cc"
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '\n') goto yy12;
yy87:
	++YYCURSOR;
#line 146 "../src/parse/scanner_lex.re"
	{
					cline++;
					if (ignore_eoc)
					{
						if (ignore_cnt)
						{
							out.write_line_info (cline, get_fname ().c_str ());
						}
						ignore_eoc = false;
						ignore_cnt = 0;
					}
					else if (!(DFlag || flag_skeleton))
					{
						out.write(tok, tok_len ());
					}
					tok = pos = cur;
					goto echo;
				}
#line 471 "src/parse/scanner_lex.cc"
yy89:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy89;
	}
	if (yych != '#') goto yy12;
yy91:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy91;
		goto yy12;
	} else {
		if (yych <= ' ') goto yy91;
		if (yych != 'l') goto yy12;
	}
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy98;
	if (yych <= '9') goto yy12;
	goto yy98;
yy97:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy98:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy97;
		goto yy12;
	} else {
		if (yych <= ' ') goto yy97;
		if (yych <= '0') goto yy12;
		if (yych >= ':') goto yy12;
	}
yy99:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy99;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy12;
		if (yych <= '\t') goto yy101;
		if (yych <= '\n') goto yy103;
		goto yy12;
	} else {
		if (yych <= '\r') goto yy105;
		if (yych != ' ') goto yy12;
	}
yy101:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy101;
		goto yy12;
	} else {
		if (yych <= ' ') goto yy101;
		if (yych == '"') goto yy106;
		goto yy12;
	}
yy103:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 182 "../src/parse/scanner_lex.re"
	{
					set_sourceline ();
					goto echo;
				}
#line 551 "src/parse/scanner_lex.cc"
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy103;
	goto yy12;
yy106:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy106;
	}
	if (yych <= '\n') goto yy12;
	if (yych <= '"') goto yy109;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy12;
	goto yy106;
yy109:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '\n') goto yy103;
	if (yych == '\r') goto yy105;
	goto yy12;
}
#line 213 "../src/parse/scanner_lex.re"

}

int Scanner::scan()
{
	uint32_t depth;

	char quote;
	bool negated_class = false;
	std::vector<uint32_t> cpoints;
scan:
	tchar = cur - pos;
	tline = cline;
	tok = cur;
	switch (lexer_state)
	{
		case LEX_NORMAL:       goto start;
		case LEX_CONFIG:       goto config;
		case LEX_CONFIG_VALUE: goto value;
		case LEX_FLEX_NAME:    goto flex_name;
	}

start:

#line 601 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 192,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		176, 176, 176, 176, 176, 176, 176, 176, 
		176, 176, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 6) YYFILL(6);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '.') {
		if (yych <= '"') {
			if (yych <= '\f') {
				if (yych <= 0x08) goto yy112;
				if (yych <= '\t') goto yy114;
				if (yych <= '\n') goto yy116;
			} else {
				if (yych <= 0x1F) {
					if (yych <= '\r') goto yy118;
				} else {
					if (yych <= ' ') goto yy114;
					if (yych >= '"') goto yy119;
				}
			}
		} else {
			if (yych <= ')') {
				if (yych <= '%') {
					if (yych >= '%') goto yy121;
				} else {
					if (yych <= '&') goto yy112;
					if (yych <= '\'') goto yy119;
					goto yy122;
				}
			} else {
				if (yych <= '+') {
					if (yych <= '*') goto yy124;
					goto yy126;
				} else {
					if (yych <= ',') goto yy122;
					if (yych >= '.') goto yy128;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '<') {
				if (yych <= '9') {
					if (yych <= '/') goto yy130;
					goto yy131;
				} else {
					if (yych <= ':') goto yy132;
					if (yych <= ';') goto yy122;
					goto yy133;
				}
			} else {
				if (yych <= '?') {
					if (yych <= '>') goto yy122;
					goto yy126;
				} else {
					if (yych <= '@') goto yy112;
					if (yych <= 'Z') goto yy131;
					goto yy134;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy122;
				} else {
					if (yych != '`') goto yy131;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy136;
					goto yy131;
				} else {
					if (yych <= '{') goto yy137;
					if (yych <= '|') goto yy122;
				}
			}
		}
	}
yy112:
	++YYCURSOR;
yy113:
#line 392 "../src/parse/scanner_lex.re"
	{
					fatalf("unexpected character: '%c'", *tok);
					goto scan;
				}
#line 721 "src/parse/scanner_lex.cc"
yy114:
	++YYCURSOR;
	yych = (YYCTYPE)*YYCURSOR;
	goto yy224;
yy115:
#line 376 "../src/parse/scanner_lex.re"
	{
					goto scan;
				}
#line 731 "src/parse/scanner_lex.cc"
yy116:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy202;
	} else {
		if (yych <= ' ') goto yy202;
		if (yych == '#') goto yy204;
	}
yy117:
#line 385 "../src/parse/scanner_lex.re"
	{
					if (cur == eof) return 0;
					pos = cur;
					cline++;
					goto scan;
				}
#line 749 "src/parse/scanner_lex.cc"
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy201;
	goto yy113;
yy119:
	++YYCURSOR;
#line 266 "../src/parse/scanner_lex.re"
	{ quote = tok[0];                    goto cpoints; }
#line 758 "src/parse/scanner_lex.cc"
yy121:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy199;
	goto yy113;
yy122:
	++YYCURSOR;
yy123:
#line 276 "../src/parse/scanner_lex.re"
	{
					return *tok;
				}
#line 770 "src/parse/scanner_lex.cc"
yy124:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '/') goto yy199;
#line 280 "../src/parse/scanner_lex.re"
	{
					yylval.op = *tok;
					return STAR;
				}
#line 779 "src/parse/scanner_lex.cc"
yy126:
	++YYCURSOR;
#line 284 "../src/parse/scanner_lex.re"
	{
					yylval.op = *tok;
					return CLOSE;
				}
#line 787 "src/parse/scanner_lex.cc"
yy128:
	++YYCURSOR;
#line 371 "../src/parse/scanner_lex.re"
	{
					yylval.regexp = mkDot();
					return RANGE;
				}
#line 795 "src/parse/scanner_lex.cc"
yy130:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy195;
	if (yych == '/') goto yy197;
	goto yy123;
yy131:
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy163;
yy132:
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy191;
	goto yy113;
yy133:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '!') goto yy182;
	if (yych == '>') goto yy184;
	goto yy123;
yy134:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '^') goto yy180;
#line 267 "../src/parse/scanner_lex.re"
	{ quote = ']';                       goto cpoints; }
#line 821 "src/parse/scanner_lex.cc"
yy136:
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy164;
	goto yy163;
yy137:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 16) {
		goto yy139;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy144;
		if (yych >= 'A') goto yy142;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy142;
		} else {
			if (yych <= '`') goto yy138;
			if (yych <= 'z') goto yy142;
		}
	}
yy138:
#line 237 "../src/parse/scanner_lex.re"
	{
					depth = 1;
					goto code;
				}
#line 850 "src/parse/scanner_lex.cc"
yy139:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy139;
	}
	if (yych <= '^') {
		if (yych <= ',') {
			if (yych >= ',') goto yy150;
		} else {
			if (yych <= '@') goto yy141;
			if (yych <= 'Z') goto yy142;
		}
	} else {
		if (yych <= 'z') {
			if (yych != '`') goto yy142;
		} else {
			if (yych == '}') goto yy148;
		}
	}
yy141:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 2) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy117;
			} else {
				goto yy123;
			}
		} else {
			goto yy138;
		}
	} else {
		if (yyaccept == 3) {
			goto yy145;
		} else {
			goto yy170;
		}
	}
yy142:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy142;
	}
	if (yych == '}') goto yy146;
	goto yy141;
yy144:
	++YYCURSOR;
yy145:
#line 320 "../src/parse/scanner_lex.re"
	{
					fatal("illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
				}
#line 907 "src/parse/scanner_lex.cc"
yy146:
	++YYCURSOR;
#line 324 "../src/parse/scanner_lex.re"
	{
					if (!FFlag) {
						fatal("curly braces for names only allowed with -F switch");
					}
					yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
					return ID;
				}
#line 918 "src/parse/scanner_lex.cc"
yy148:
	++YYCURSOR;
#line 289 "../src/parse/scanner_lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.extop.min))
					{
						fatal ("repetition count overflow");
					}
					yylval.extop.max = yylval.extop.min;
					return CLOSESIZE;
				}
#line 930 "src/parse/scanner_lex.cc"
yy150:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy145;
	if (yych <= '9') goto yy153;
	if (yych != '}') goto yy145;
	++YYCURSOR;
#line 311 "../src/parse/scanner_lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					yylval.extop.max = UINT32_MAX;
					return CLOSESIZE;
				}
#line 947 "src/parse/scanner_lex.cc"
yy153:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy141;
	if (yych <= '9') goto yy153;
	if (yych != '}') goto yy141;
	++YYCURSOR;
#line 298 "../src/parse/scanner_lex.re"
	{
					const char * p = strchr (tok, ',');
					if (!s_to_u32_unsafe (tok + 1, p, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.extop.max))
					{
						fatal ("repetition upper bound overflow");
					}
					return CLOSESIZE;
				}
#line 969 "src/parse/scanner_lex.cc"
yy157:
	++YYCURSOR;
yy158:
	YYCURSOR = YYCTXMARKER;
#line 357 "../src/parse/scanner_lex.re"
	{
					if (!FFlag) {
						yylval.str = new std::string (tok, tok_len ());
						return ID;
					} else {
						for (char * p = tok; p < cur; ++p)
						{
							cpoints.push_back (static_cast<uint32_t> (*p));
						}
						yylval.regexp = cpoint_string (cpoints, bCaseInsensitive || bCaseInverted);
						return STRING;
					}
				}
#line 988 "src/parse/scanner_lex.cc"
yy159:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy178;
yy160:
	++YYCURSOR;
yy161:
	YYCURSOR = YYCTXMARKER;
#line 352 "../src/parse/scanner_lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					return ID;
				}
#line 1001 "src/parse/scanner_lex.cc"
yy162:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
yy163:
	if (yych <= '9') {
		if (yych <= ' ') {
			if (yych == '\t') goto yy159;
			if (yych <= 0x1F) goto yy157;
			goto yy159;
		} else {
			if (yych == ',') goto yy160;
			if (yych <= '/') goto yy157;
			goto yy162;
		}
	} else {
		if (yych <= 'Z') {
			if (yych <= '<') goto yy157;
			if (yych <= '>') goto yy160;
			if (yych <= '@') goto yy157;
			goto yy162;
		} else {
			if (yych <= '_') {
				if (yych <= '^') goto yy157;
				goto yy162;
			} else {
				if (yych <= '`') goto yy157;
				if (yych <= 'z') goto yy162;
				goto yy157;
			}
		}
	}
yy164:
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy163;
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy163;
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy163;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy158;
		if (yych <= '9') goto yy168;
		if (yych <= '@') goto yy158;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy158;
		} else {
			if (yych <= '`') goto yy158;
			if (yych >= '{') goto yy158;
		}
	}
yy168:
	yyaccept = 4;
	YYMARKER = ++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '9') {
			if (yych >= '0') goto yy168;
		} else {
			if (yych <= ':') goto yy172;
			if (yych >= '@') goto yy171;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') goto yy168;
			if (yych >= '_') goto yy168;
		} else {
			if (yych <= '`') goto yy170;
			if (yych <= 'z') goto yy168;
		}
	}
yy170:
#line 332 "../src/parse/scanner_lex.re"
	{
					tok += 5; /* skip "re2c:" */
					lexer_state = LEX_CONFIG;
					yylval.str = new std::string (tok, tok_len ());
					return CONFIG;
				}
#line 1087 "src/parse/scanner_lex.cc"
yy171:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy141;
		if (yych <= '9') goto yy173;
		if (yych <= '@') goto yy141;
		goto yy173;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy141;
			goto yy173;
		} else {
			if (yych <= '`') goto yy141;
			if (yych <= 'z') goto yy173;
			goto yy141;
		}
	}
yy172:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy141;
		if (yych <= '9') goto yy168;
		if (yych <= '@') goto yy141;
		goto yy168;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy141;
			goto yy168;
		} else {
			if (yych <= '`') goto yy141;
			if (yych <= 'z') goto yy168;
			goto yy141;
		}
	}
yy173:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy170;
		if (yych <= '9') goto yy173;
		if (yych <= '@') goto yy170;
		goto yy173;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy170;
			goto yy173;
		} else {
			if (yych <= '`') goto yy170;
			if (yych <= 'z') goto yy173;
			goto yy170;
		}
	}
yy175:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 339 "../src/parse/scanner_lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					if (FFlag)
					{
						lexer_state = LEX_FLEX_NAME;
						return FID;
					}
					else
					{
						return ID;
					}
				}
#line 1159 "src/parse/scanner_lex.cc"
yy177:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy178:
	if (yybm[0+yych] & 64) {
		goto yy177;
	}
	if (yych == ',') goto yy179;
	if (yych <= '<') goto yy175;
	if (yych >= '?') goto yy175;
yy179:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy161;
yy180:
	++YYCURSOR;
#line 268 "../src/parse/scanner_lex.re"
	{ quote = ']'; negated_class = true; goto cpoints; }
#line 1178 "src/parse/scanner_lex.cc"
yy182:
	++YYCURSOR;
#line 273 "../src/parse/scanner_lex.re"
	{
					return SETUP;
				}
#line 1185 "src/parse/scanner_lex.cc"
yy184:
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy186;
yy185:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
yy186:
	if (yych <= '9') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy141;
			goto yy185;
		} else {
			if (yych == ' ') goto yy185;
			goto yy141;
		}
	} else {
		if (yych <= '=') {
			if (yych <= ':') goto yy190;
			if (yych <= '<') goto yy141;
			goto yy189;
		} else {
			if (yych != '{') goto yy141;
		}
	}
yy187:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 270 "../src/parse/scanner_lex.re"
	{
					return NOCOND;
				}
#line 1219 "src/parse/scanner_lex.cc"
yy189:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy187;
	goto yy141;
yy190:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy187;
	goto yy141;
yy191:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '>') goto yy193;
#line 246 "../src/parse/scanner_lex.re"
	{
					tok += 2; /* skip ":=" */
					depth = 0;
					goto code;
				}
#line 1237 "src/parse/scanner_lex.cc"
yy193:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 242 "../src/parse/scanner_lex.re"
	{
					return *tok;
				}
#line 1245 "src/parse/scanner_lex.cc"
yy195:
	++YYCURSOR;
#line 255 "../src/parse/scanner_lex.re"
	{
					depth = 1;
					goto comment;
				}
#line 1253 "src/parse/scanner_lex.cc"
yy197:
	++YYCURSOR;
#line 252 "../src/parse/scanner_lex.re"
	{
				goto nextLine;
			}
#line 1260 "src/parse/scanner_lex.cc"
yy199:
	++YYCURSOR;
#line 261 "../src/parse/scanner_lex.re"
	{
					tok = cur;
					return 0;
				}
#line 1268 "src/parse/scanner_lex.cc"
yy201:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych != '\t') goto yy117;
	} else {
		if (yych <= ' ') goto yy202;
		if (yych == '#') goto yy204;
		goto yy117;
	}
yy202:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy202;
		goto yy141;
	} else {
		if (yych <= ' ') goto yy202;
		if (yych != '#') goto yy141;
	}
yy204:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy204;
		goto yy141;
	} else {
		if (yych <= ' ') goto yy204;
		if (yych != 'l') goto yy141;
	}
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy141;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy141;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy141;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy211;
	if (yych <= '9') goto yy141;
	goto yy211;
yy210:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy211:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy210;
		goto yy141;
	} else {
		if (yych <= ' ') goto yy210;
		if (yych <= '0') goto yy141;
		if (yych >= ':') goto yy141;
	}
yy212:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy141;
		} else {
			if (yych <= '\n') goto yy216;
			if (yych <= '\f') goto yy141;
			goto yy218;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy141;
		} else {
			if (yych <= '/') goto yy141;
			if (yych <= '9') goto yy212;
			goto yy141;
		}
	}
yy214:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy214;
		goto yy141;
	} else {
		if (yych <= ' ') goto yy214;
		if (yych == '"') goto yy219;
		goto yy141;
	}
yy216:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 380 "../src/parse/scanner_lex.re"
	{
					set_sourceline ();
					goto scan;
				}
#line 1366 "src/parse/scanner_lex.cc"
yy218:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy216;
	goto yy141;
yy219:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy219;
	}
	if (yych <= '\n') goto yy141;
	if (yych <= '"') goto yy222;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy141;
	goto yy219;
yy222:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy216;
	if (yych == '\r') goto yy218;
	goto yy141;
yy223:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy224:
	if (yych == '\t') goto yy223;
	if (yych == ' ') goto yy223;
	goto yy115;
}
#line 396 "../src/parse/scanner_lex.re"


flex_name:

#line 1404 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy229;
	if (yych == '\r') goto yy231;
	++YYCURSOR;
yy228:
#line 407 "../src/parse/scanner_lex.re"
	{
		YYCURSOR = tok;
		goto start;
	}
#line 1418 "src/parse/scanner_lex.cc"
yy229:
	++YYCURSOR;
yy230:
#line 401 "../src/parse/scanner_lex.re"
	{
		YYCURSOR = tok;
		lexer_state = LEX_NORMAL;
		return FID_END;
	}
#line 1428 "src/parse/scanner_lex.cc"
yy231:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '\n') goto yy228;
	++YYCURSOR;
	yych = (YYCTYPE)*YYCURSOR;
	goto yy230;
}
#line 411 "../src/parse/scanner_lex.re"


cpoints:
	tok = cur;

#line 1442 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych != '\\') goto yy237;
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= 'e') {
		if (yych <= 'W') {
			if (yych <= '7') {
				if (yych <= '/') goto yy239;
				if (yych <= '3') goto yy241;
				goto yy243;
			} else {
				if (yych == 'U') goto yy244;
				goto yy239;
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'X') goto yy246;
				if (yych <= '[') goto yy239;
				goto yy247;
			} else {
				if (yych <= '`') goto yy239;
				if (yych <= 'b') goto yy247;
				goto yy239;
			}
		}
	} else {
		if (yych <= 's') {
			if (yych <= 'n') {
				if (yych <= 'f') goto yy247;
				if (yych <= 'm') goto yy239;
				goto yy247;
			} else {
				if (yych == 'r') goto yy247;
				goto yy239;
			}
		} else {
			if (yych <= 'v') {
				if (yych == 'u') goto yy246;
				goto yy247;
			} else {
				if (yych == 'x') goto yy249;
				goto yy239;
			}
		}
	}
#line 418 "../src/parse/scanner_lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in escape sequence"); }
#line 1493 "src/parse/scanner_lex.cc"
yy237:
	++YYCURSOR;
#line 434 "../src/parse/scanner_lex.re"
	{
		const char c = tok[0];
		if (c == quote)
		{
			switch (quote)
			{
				case ']':
					yylval.regexp = cpoint_class (cpoints, negated_class);
					return RANGE;
				case '\'':
					yylval.regexp = cpoint_string (cpoints, bCaseInsensitive || !bCaseInverted);
					return STRING;
				case '"':
					yylval.regexp = cpoint_string (cpoints, bCaseInsensitive || bCaseInverted);
					return STRING;
			}
		}
		else
		{
			cpoints.push_back (static_cast<uint32_t> (c));
			goto cpoints;
		}
	}
#line 1520 "src/parse/scanner_lex.cc"
yy239:
	++YYCURSOR;
#line 424 "../src/parse/scanner_lex.re"
	{
		const char c = tok[1];
		if (c != quote)
		{
			warn.useless_escape (tline, tok - pos, c);
		}
		cpoints.push_back (static_cast<uint32_t> (c));
		goto cpoints;
	}
#line 1533 "src/parse/scanner_lex.cc"
yy241:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy242;
	if (yych <= '7') goto yy264;
yy242:
#line 417 "../src/parse/scanner_lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in octal escape sequence"); }
#line 1542 "src/parse/scanner_lex.cc"
yy243:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy242;
yy244:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy245;
		if (yych <= '9') goto yy257;
	} else {
		if (yych <= 'F') goto yy257;
		if (yych <= '`') goto yy245;
		if (yych <= 'f') goto yy257;
	}
yy245:
#line 416 "../src/parse/scanner_lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in hexadecimal escape sequence"); }
#line 1560 "src/parse/scanner_lex.cc"
yy246:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy245;
		if (yych <= '9') goto yy254;
		goto yy245;
	} else {
		if (yych <= 'F') goto yy254;
		if (yych <= '`') goto yy245;
		if (yych <= 'f') goto yy254;
		goto yy245;
	}
yy247:
	++YYCURSOR;
#line 422 "../src/parse/scanner_lex.re"
	{ cpoints.push_back (unesc_escapable (tok)); goto cpoints; }
#line 1578 "src/parse/scanner_lex.cc"
yy249:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy245;
		if (yych >= ':') goto yy245;
	} else {
		if (yych <= 'F') goto yy250;
		if (yych <= '`') goto yy245;
		if (yych >= 'g') goto yy245;
	}
yy250:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy251;
		if (yych <= '9') goto yy252;
	} else {
		if (yych <= 'F') goto yy252;
		if (yych <= '`') goto yy251;
		if (yych <= 'f') goto yy252;
	}
yy251:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy242;
	} else {
		goto yy245;
	}
yy252:
	++YYCURSOR;
#line 420 "../src/parse/scanner_lex.re"
	{ cpoints.push_back (unesc_hex (tok, cur));  goto cpoints; }
#line 1611 "src/parse/scanner_lex.cc"
yy254:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy251;
		if (yych >= ':') goto yy251;
	} else {
		if (yych <= 'F') goto yy255;
		if (yych <= '`') goto yy251;
		if (yych >= 'g') goto yy251;
	}
yy255:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy251;
		if (yych >= ':') goto yy251;
	} else {
		if (yych <= 'F') goto yy256;
		if (yych <= '`') goto yy251;
		if (yych >= 'g') goto yy251;
	}
yy256:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy251;
		if (yych <= '9') goto yy252;
		goto yy251;
	} else {
		if (yych <= 'F') goto yy252;
		if (yych <= '`') goto yy251;
		if (yych <= 'f') goto yy252;
		goto yy251;
	}
yy257:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy251;
		if (yych >= ':') goto yy251;
	} else {
		if (yych <= 'F') goto yy258;
		if (yych <= '`') goto yy251;
		if (yych >= 'g') goto yy251;
	}
yy258:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy251;
		if (yych >= ':') goto yy251;
	} else {
		if (yych <= 'F') goto yy259;
		if (yych <= '`') goto yy251;
		if (yych >= 'g') goto yy251;
	}
yy259:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy251;
		if (yych >= ':') goto yy251;
	} else {
		if (yych <= 'F') goto yy260;
		if (yych <= '`') goto yy251;
		if (yych >= 'g') goto yy251;
	}
yy260:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy251;
		if (yych >= ':') goto yy251;
	} else {
		if (yych <= 'F') goto yy261;
		if (yych <= '`') goto yy251;
		if (yych >= 'g') goto yy251;
	}
yy261:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy251;
		if (yych >= ':') goto yy251;
	} else {
		if (yych <= 'F') goto yy262;
		if (yych <= '`') goto yy251;
		if (yych >= 'g') goto yy251;
	}
yy262:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy251;
		if (yych >= ':') goto yy251;
	} else {
		if (yych <= 'F') goto yy263;
		if (yych <= '`') goto yy251;
		if (yych >= 'g') goto yy251;
	}
yy263:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy251;
		if (yych <= '9') goto yy252;
		goto yy251;
	} else {
		if (yych <= 'F') goto yy252;
		if (yych <= '`') goto yy251;
		if (yych <= 'f') goto yy252;
		goto yy251;
	}
yy264:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy251;
	if (yych >= '8') goto yy251;
	++YYCURSOR;
#line 421 "../src/parse/scanner_lex.re"
	{ cpoints.push_back (unesc_oct (tok, cur));  goto cpoints; }
#line 1723 "src/parse/scanner_lex.cc"
}
#line 457 "../src/parse/scanner_lex.re"


code:

#line 1730 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48, 112,   0,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		112,  48,  16,  48,  48,  48,  48,  32, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		176, 176, 176, 176, 176, 176, 176, 176, 
		176, 176,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,   0,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy269;
			if (yych <= '\t') goto yy271;
			goto yy273;
		} else {
			if (yych == '"') goto yy275;
			goto yy271;
		}
	} else {
		if (yych <= '{') {
			if (yych <= '\'') goto yy276;
			if (yych <= 'z') goto yy271;
			goto yy277;
		} else {
			if (yych == '}') goto yy279;
			goto yy271;
		}
	}
yy269:
	++YYCURSOR;
#line 520 "../src/parse/scanner_lex.re"
	{
					if (cur == eof)
					{
						if (depth)
						{
							fatal("missing '}'");
						}
						return 0;
					}
					goto code;
				}
#line 1803 "src/parse/scanner_lex.cc"
yy271:
	++YYCURSOR;
yy272:
#line 534 "../src/parse/scanner_lex.re"
	{
					goto code;
				}
#line 1811 "src/parse/scanner_lex.cc"
yy273:
	YYCTXMARKER = YYCURSOR + 1;
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy290;
		} else {
			if (yych <= '\n') goto yy292;
			if (yych >= '\r') goto yy292;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy290;
		} else {
			if (yych == '#') goto yy293;
		}
	}
yy274:
#line 501 "../src/parse/scanner_lex.re"
	{
					if (depth == 0)
					{
						tok += strspn(tok, " \t\r\n");
						while (cur > tok && strchr(" \t\r\n", cur[-1]))
						{
							--cur;
						}
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return CODE;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1851 "src/parse/scanner_lex.cc"
yy275:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy272;
	goto yy288;
yy276:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy272;
	goto yy282;
yy277:
	++YYCURSOR;
#line 473 "../src/parse/scanner_lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else
					{
						++depth;
					}
					goto code;
				}
#line 1876 "src/parse/scanner_lex.cc"
yy279:
	++YYCURSOR;
#line 461 "../src/parse/scanner_lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else if (--depth == 0)
					{
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return CODE;
					}
					goto code;
				}
#line 1892 "src/parse/scanner_lex.cc"
yy281:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy282:
	if (yybm[0+yych] & 16) {
		goto yy281;
	}
	if (yych <= '\n') goto yy283;
	if (yych <= '\'') goto yy285;
	goto yy284;
yy283:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy274;
		} else {
			goto yy272;
		}
	} else {
		goto yy291;
	}
yy284:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy283;
	goto yy281;
yy285:
	++YYCURSOR;
#line 531 "../src/parse/scanner_lex.re"
	{
					goto code;
				}
#line 1927 "src/parse/scanner_lex.cc"
yy287:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy288:
	if (yybm[0+yych] & 32) {
		goto yy287;
	}
	if (yych <= '\n') goto yy283;
	if (yych <= '"') goto yy285;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy283;
	goto yy287;
yy290:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy312;
	} else {
		if (yych <= ' ') goto yy312;
		if (yych == '#') goto yy293;
	}
yy291:
	YYCURSOR = YYCTXMARKER;
#line 488 "../src/parse/scanner_lex.re"
	{
					if (depth == 0)
					{
						goto code;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1968 "src/parse/scanner_lex.cc"
yy292:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy291;
yy293:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy293;
	}
	if (yych != 'l') goto yy283;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy283;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy283;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy283;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy300;
	if (yych <= '9') goto yy283;
	goto yy300;
yy299:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy300:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy299;
		goto yy283;
	} else {
		if (yych <= ' ') goto yy299;
		if (yych <= '0') goto yy283;
		if (yych >= ':') goto yy283;
	}
yy301:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy301;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy283;
		if (yych <= '\t') goto yy303;
		if (yych <= '\n') goto yy305;
		goto yy283;
	} else {
		if (yych <= '\r') goto yy307;
		if (yych != ' ') goto yy283;
	}
yy303:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy303;
		goto yy283;
	} else {
		if (yych <= ' ') goto yy303;
		if (yych == '"') goto yy308;
		goto yy283;
	}
yy305:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 484 "../src/parse/scanner_lex.re"
	{
					set_sourceline ();
					goto code;
				}
#line 2040 "src/parse/scanner_lex.cc"
yy307:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy305;
	goto yy283;
yy308:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy283;
		goto yy308;
	} else {
		if (yych <= '"') goto yy311;
		if (yych != '\\') goto yy308;
	}
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy283;
	goto yy308;
yy311:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy305;
	if (yych == '\r') goto yy307;
	goto yy283;
yy312:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy312;
		goto yy283;
	} else {
		if (yych <= ' ') goto yy312;
		if (yych == '#') goto yy293;
		goto yy283;
	}
}
#line 537 "../src/parse/scanner_lex.re"


comment:

#line 2084 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ')') {
		if (yych == '\n') goto yy318;
	} else {
		if (yych <= '*') goto yy320;
		if (yych == '/') goto yy321;
	}
	++YYCURSOR;
yy317:
#line 569 "../src/parse/scanner_lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					goto comment;
				}
#line 2139 "src/parse/scanner_lex.cc"
yy318:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy326;
	}
	if (yych == '#') goto yy329;
yy319:
#line 560 "../src/parse/scanner_lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					tok = pos = cur;
					cline++;
					goto comment;
				}
#line 2157 "src/parse/scanner_lex.cc"
yy320:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy324;
	goto yy317;
yy321:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '*') goto yy317;
	++YYCURSOR;
#line 551 "../src/parse/scanner_lex.re"
	{
					++depth;
					fatal("ambiguous /* found");
					goto comment;
				}
#line 2172 "src/parse/scanner_lex.cc"
yy324:
	++YYCURSOR;
#line 541 "../src/parse/scanner_lex.re"
	{
					if (--depth == 0)
					{
						goto scan;
					}
					else
					{
						goto comment;
					}
				}
#line 2186 "src/parse/scanner_lex.cc"
yy326:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy326;
	}
	if (yych == '#') goto yy329;
yy328:
	YYCURSOR = YYMARKER;
	goto yy319;
yy329:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy329;
		goto yy328;
	} else {
		if (yych <= ' ') goto yy329;
		if (yych != 'l') goto yy328;
	}
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy328;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy328;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy328;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy336;
	if (yych <= '9') goto yy328;
	goto yy336;
yy335:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy336:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy335;
		goto yy328;
	} else {
		if (yych <= ' ') goto yy335;
		if (yych <= '0') goto yy328;
		if (yych >= ':') goto yy328;
	}
yy337:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy337;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy328;
		if (yych <= '\t') goto yy339;
		if (yych <= '\n') goto yy341;
		goto yy328;
	} else {
		if (yych <= '\r') goto yy343;
		if (yych != ' ') goto yy328;
	}
yy339:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy339;
		goto yy328;
	} else {
		if (yych <= ' ') goto yy339;
		if (yych == '"') goto yy344;
		goto yy328;
	}
yy341:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 556 "../src/parse/scanner_lex.re"
	{
					set_sourceline ();
					goto comment;
				}
#line 2269 "src/parse/scanner_lex.cc"
yy343:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy341;
	goto yy328;
yy344:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy344;
	}
	if (yych <= '\n') goto yy328;
	if (yych <= '"') goto yy347;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy328;
	goto yy344;
yy347:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '\n') goto yy341;
	if (yych == '\r') goto yy343;
	goto yy328;
}
#line 576 "../src/parse/scanner_lex.re"


nextLine:

#line 2299 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy352;
	++YYCURSOR;
#line 587 "../src/parse/scanner_lex.re"
	{  if(cur == eof) {
                  return 0;
               }
               goto nextLine;
            }
#line 2312 "src/parse/scanner_lex.cc"
yy352:
	++YYCURSOR;
#line 580 "../src/parse/scanner_lex.re"
	{ if(cur == eof) {
                  return 0;
               }
               tok = pos = cur;
               cline++;
               goto scan;
            }
#line 2323 "src/parse/scanner_lex.cc"
}
#line 592 "../src/parse/scanner_lex.re"


config:

#line 2330 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy358;
	} else {
		if (yych <= ' ') goto yy358;
		if (yych == '=') goto yy360;
	}
	++YYCURSOR;
#line 603 "../src/parse/scanner_lex.re"
	{
					fatal("missing '='");
				}
#line 2380 "src/parse/scanner_lex.cc"
yy358:
	++YYCURSOR;
	yych = (YYCTYPE)*YYCURSOR;
	goto yy365;
yy359:
#line 596 "../src/parse/scanner_lex.re"
	{
					goto config;
				}
#line 2390 "src/parse/scanner_lex.cc"
yy360:
	++YYCURSOR;
	yych = (YYCTYPE)*YYCURSOR;
	goto yy363;
yy361:
#line 599 "../src/parse/scanner_lex.re"
	{
					lexer_state = LEX_CONFIG_VALUE;
					return '=';
				}
#line 2401 "src/parse/scanner_lex.cc"
yy362:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy363:
	if (yybm[0+yych] & 128) {
		goto yy362;
	}
	goto yy361;
yy364:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy365:
	if (yych == '\t') goto yy364;
	if (yych == ' ') goto yy364;
	goto yy359;
}
#line 606 "../src/parse/scanner_lex.re"


value:

#line 2425 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 192,   0, 248, 248, 192, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		192, 248, 104, 248, 248, 248, 248, 152, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		252, 252, 252, 252, 252, 252, 252, 252, 
		252, 252, 248, 192, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248,   8, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\r') {
			if (yych <= 0x08) goto yy374;
			if (yych <= '\n') goto yy368;
			if (yych <= '\f') goto yy374;
		} else {
			if (yych <= ' ') {
				if (yych <= 0x1F) goto yy374;
			} else {
				if (yych == '"') goto yy376;
				goto yy374;
			}
		}
	} else {
		if (yych <= '/') {
			if (yych <= '\'') goto yy378;
			if (yych == '-') goto yy371;
			goto yy374;
		} else {
			if (yych <= '9') {
				if (yych <= '0') goto yy369;
				goto yy372;
			} else {
				if (yych != ';') goto yy374;
			}
		}
	}
yy368:
#line 618 "../src/parse/scanner_lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					lexer_state = LEX_NORMAL;
					return VALUE;
				}
#line 2498 "src/parse/scanner_lex.cc"
yy369:
	++YYCURSOR;
	if (yybm[0+(yych = (YYCTYPE)*YYCURSOR)] & 8) {
		goto yy374;
	}
yy370:
#line 610 "../src/parse/scanner_lex.re"
	{
					if (!s_to_i32_unsafe (tok, cur, yylval.number))
					{
						fatal ("configuration value overflow");
					}
					lexer_state = LEX_NORMAL;
					return NUMBER;
				}
#line 2514 "src/parse/scanner_lex.cc"
yy371:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy375;
	if (yych >= ':') goto yy375;
yy372:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 4) {
		goto yy372;
	}
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy374;
		if (yych <= '\n') goto yy370;
		if (yych >= '\r') goto yy370;
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy370;
		} else {
			if (yych == ';') goto yy370;
		}
	}
yy374:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy375:
	if (yybm[0+yych] & 8) {
		goto yy374;
	}
	goto yy368;
yy376:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy376;
	}
	if (yych <= ' ') {
		if (yych == '\n') goto yy368;
		goto yy386;
	} else {
		if (yych <= '"') goto yy374;
		if (yych <= ';') goto yy386;
		goto yy388;
	}
yy378:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy378;
	}
	if (yych <= ' ') {
		if (yych == '\n') goto yy368;
	} else {
		if (yych <= '\'') goto yy374;
		if (yych >= '<') goto yy383;
	}
yy380:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy380;
	}
	if (yych <= '\n') goto yy382;
	if (yych <= '\'') goto yy384;
	goto yy385;
yy382:
	YYCURSOR = YYMARKER;
	goto yy368;
yy383:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy378;
			goto yy380;
		} else {
			if (yych <= '\n') goto yy368;
			if (yych <= '\f') goto yy378;
			goto yy380;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy378;
			goto yy380;
		} else {
			if (yych == ';') goto yy380;
			goto yy378;
		}
	}
yy384:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy368;
yy385:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy382;
	goto yy380;
yy386:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy386;
	}
	if (yych <= '\n') goto yy382;
	if (yych <= '"') goto yy384;
	goto yy389;
yy388:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy376;
			goto yy386;
		} else {
			if (yych <= '\n') goto yy368;
			if (yych <= '\f') goto yy376;
			goto yy386;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy376;
			goto yy386;
		} else {
			if (yych == ';') goto yy386;
			goto yy376;
		}
	}
yy389:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy382;
	goto yy386;
}
#line 623 "../src/parse/scanner_lex.re"

}

static void escape (std::string & dest, const std::string & src)
{
	dest = src;
	size_t l = dest.length();
	for (size_t p = 0; p < l; ++p)
	{
		if (dest[p] == '\\')
		{
			dest.insert(++p, "\\");
			++l;
		}
	}
}

void Scanner::set_sourceline ()
{
sourceline:
	tok = cur;

#line 2680 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy394;
	} else {
		if (yych <= '"') goto yy396;
		if (yych <= '0') goto yy392;
		if (yych <= '9') goto yy397;
	}
yy392:
	++YYCURSOR;
yy393:
#line 668 "../src/parse/scanner_lex.re"
	{
  					goto sourceline;
  				}
#line 2733 "src/parse/scanner_lex.cc"
yy394:
	++YYCURSOR;
#line 656 "../src/parse/scanner_lex.re"
	{
  					if (cur == eof)
  					{
						--cur; 
					}
			  		else
			  		{
			  			pos = cur; 
			  		}
			  		tok = cur;
			  		return; 
				}
#line 2749 "src/parse/scanner_lex.cc"
yy396:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy393;
	goto yy402;
yy397:
	++YYCURSOR;
	yych = (YYCTYPE)*YYCURSOR;
	goto yy400;
yy398:
#line 645 "../src/parse/scanner_lex.re"
	{
					if (!s_to_u32_unsafe (tok, cur, cline))
					{
						fatal ("line number overflow");
					}
					goto sourceline; 
				}
#line 2767 "src/parse/scanner_lex.cc"
yy399:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy400:
	if (yybm[0+yych] & 64) {
		goto yy399;
	}
	goto yy398;
yy401:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy402:
	if (yybm[0+yych] & 128) {
		goto yy401;
	}
	if (yych <= '\n') goto yy403;
	if (yych <= '"') goto yy405;
	goto yy404;
yy403:
	YYCURSOR = YYMARKER;
	goto yy393;
yy404:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy403;
	goto yy401;
yy405:
	++YYCURSOR;
#line 652 "../src/parse/scanner_lex.re"
	{
					escape (in.file_name, std::string (tok + 1, tok_len () - 2)); // -2 to omit quotes
			  		goto sourceline; 
				}
#line 2804 "src/parse/scanner_lex.cc"
}
#line 671 "../src/parse/scanner_lex.re"

}

} // end namespace re2c
