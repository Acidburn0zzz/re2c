/* Generated by re2c 0.16 on Fri Jul 14 21:52:42 2017 */
#line 1 "../src/ast/lex.re"
#include "src/util/c99_stdint.h"
#include <stddef.h>
#include <string.h>
#include <algorithm>
#include <limits>
#include <string>

#include "src/code/output.h"
#include "src/re/encoding/enc.h"
#include "src/ast/input.h"
#include "src/ast/ast.h"
#include "src/ast/scanner.h"
#include "src/ast/parser.h" // needed by "y.tab.h"
#include "src/ast/unescape.h"
#include "src/util/range.h"
#include "src/util/s_to_n32_unsafe.h"
#include "y.tab.h"

extern YYSTYPE yylval;

#define	YYCTYPE		unsigned char
#define	YYCURSOR	cur
#define	YYLIMIT		lim
#define	YYMARKER	mar
#define	YYCTXMARKER ctx
#define	YYFILL(n)	{ fill (n); }

namespace re2c
{

// source code is in ASCII: pointers have type 'char *'
// but re2c makes an implicit assumption that YYCTYPE is unsigned
// when it generates comparisons
#line 36 "../src/ast/lex.re"


#line 57 "../src/ast/lex.re"


Scanner::ParseMode Scanner::echo(OutputFile &out)
{
	if (eof && cur == eof) // Catch EOF
	{
		return Stop;
	}

	tok = cur;
echo:
	ptr = cur;


#line 55 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 16) YYFILL(16);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 127 "../src/ast/lex.re"
	{
		if (cur != eof) goto echo;
		out.wraw(tok, ptr);
		return Stop;
	}
#line 119 "src/ast/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 144 "../src/ast/lex.re"
	{ goto echo; }
#line 125 "src/ast/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 138 "../src/ast/lex.re"
	{
		cline++;
		pos = cur;
		goto echo;
	}
#line 140 "src/ast/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy7;
	} else {
		goto yy5;
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 71 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		return Parse;
	}
#line 188 "src/ast/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'i':	goto yy23;
	case 'm':	goto yy24;
	case 'r':	goto yy25;
	case 't':	goto yy26;
	case 'u':	goto yy27;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy28;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy29;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy30;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy31;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy32;
	if (yych == 'u') goto yy33;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy34;
	if (yych == 'y') goto yy35;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy36;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy37;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy38;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy39;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy40;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy41;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy42;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy43;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy44;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy45;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy47;
	if (yych <= '9') goto yy13;
	goto yy47;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy48;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy49;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy50;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy51;
	goto yy13;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy52;
	if (yych == 's') goto yy53;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy54;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy55;
	goto yy13;
yy46:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy47:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy46;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy46;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			YYCTXMARKER = YYCURSOR;
			goto yy56;
		}
		goto yy13;
	}
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy58;
	goto yy13;
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy59;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy60;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy61;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy62;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy63;
	goto yy13;
yy54:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy64;
	goto yy13;
yy55:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy65;
	goto yy13;
yy56:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy56;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy66;
		if (yych <= '\n') goto yy68;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy70;
		if (yych == ' ') goto yy66;
		goto yy13;
	}
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy71;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy72;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy73;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy74;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy75;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy76;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy77;
	goto yy13;
yy65:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy78;
	goto yy13;
yy66:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy66;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy66;
		if (yych == '"') goto yy79;
		goto yy13;
	}
yy68:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 133 "../src/ast/lex.re"
	{
		set_sourceline();
		goto echo;
	}
#line 430 "src/ast/lex.cc"
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy68;
	goto yy13;
yy71:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy81;
	goto yy13;
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy82;
	goto yy13;
yy73:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy83;
	goto yy13;
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy84;
	goto yy13;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy85;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy86;
	goto yy13;
yy77:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy87;
	goto yy13;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy88;
	goto yy13;
yy79:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy79;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy89;
	goto yy90;
yy81:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy91;
	goto yy13;
yy82:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy92;
	goto yy13;
yy83:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy93;
	goto yy13;
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy95;
	goto yy13;
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy96;
	goto yy13;
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy97;
	goto yy13;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy98;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy99;
	goto yy13;
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy68;
	if (yych == '\r') goto yy70;
	goto yy13;
yy90:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy13;
	goto yy79;
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy101;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy102;
	goto yy13;
yy93:
	++YYCURSOR;
#line 92 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		out.wdelay_yymaxfill();
		lex_end_of_comment(out);
		goto echo;
	}
#line 537 "src/ast/lex.cc"
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy103;
	goto yy13;
yy96:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy104;
	goto yy13;
yy97:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy105;
	goto yy13;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy107;
	goto yy13;
yy99:
	++YYCURSOR;
#line 81 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		return Reuse;
	}
#line 561 "src/ast/lex.cc"
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy108;
	goto yy13;
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy109;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy110;
	goto yy13;
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy112;
	goto yy13;
yy105:
	++YYCURSOR;
#line 115 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		lex_tags(out, false);
		goto echo;
	}
#line 586 "src/ast/lex.cc"
yy107:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy113;
	goto yy13;
yy108:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy115;
	goto yy13;
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy116;
	goto yy13;
yy110:
	++YYCURSOR;
#line 76 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		return Rules;
	}
#line 606 "src/ast/lex.cc"
yy112:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy118;
	goto yy13;
yy113:
	++YYCURSOR;
#line 106 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		out.wdelay_line_info();
		out.wdelay_types();
		out.wline_info(cline, get_fname().c_str());
		lex_end_of_comment(out);
		goto echo;
	}
#line 622 "src/ast/lex.cc"
yy115:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy119;
	goto yy13;
yy116:
	++YYCURSOR;
#line 86 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		lex_end_of_comment(out);
		goto echo;
	}
#line 635 "src/ast/lex.cc"
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy120;
	goto yy13;
yy119:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy121;
	goto yy13;
yy120:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy123;
	goto yy13;
yy121:
	++YYCURSOR;
#line 99 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		out.wdelay_state_goto(0);
		lex_end_of_comment(out);
		goto echo;
	}
#line 657 "src/ast/lex.cc"
yy123:
	++YYCURSOR;
#line 121 "../src/ast/lex.re"
	{
		out.wraw(tok, ptr);
		lex_tags(out, true);
		goto echo;
	}
#line 666 "src/ast/lex.cc"
}
#line 145 "../src/ast/lex.re"

}

void Scanner::lex_end_of_comment(OutputFile &out)
{
	uint32_t ignored = 0;
	for (;;) {
#line 676 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy127;
		if (yych == '\n') goto yy131;
		goto yy129;
	} else {
		if (yych <= '\r') goto yy133;
		if (yych == '*') goto yy134;
		goto yy129;
	}
yy127:
	++YYCURSOR;
#line 152 "../src/ast/lex.re"
	{ fatal("expected end of block"); }
#line 694 "src/ast/lex.cc"
yy129:
	++YYCURSOR;
yy130:
#line 154 "../src/ast/lex.re"
	{ continue; }
#line 700 "src/ast/lex.cc"
yy131:
	++YYCURSOR;
#line 155 "../src/ast/lex.re"
	{ ++ignored; continue; }
#line 705 "src/ast/lex.cc"
yy133:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy131;
	goto yy130;
yy134:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy130;
	++YYCURSOR;
#line 156 "../src/ast/lex.re"
	{
			if (ignored > 0) {
				cline += ignored;
				out.wline_info(cline, get_fname().c_str());
			}
			tok = pos = cur;
			return;
		}
#line 723 "src/ast/lex.cc"
}
#line 164 "../src/ast/lex.re"
}
}

void Scanner::lex_tags(OutputFile &out, bool lists)
{
	std::string fmt, sep;
	for (;;) {
#line 733 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy141;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy144;
		} else {
			if (yych == '\r') goto yy146;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy147;
			if (yych >= 'f') goto yy148;
		} else {
			if (yych == 's') goto yy149;
		}
	}
	++YYCURSOR;
yy140:
#line 171 "../src/ast/lex.re"
	{ fatal("unrecognized configuration"); }
#line 793 "src/ast/lex.cc"
yy141:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy141;
	}
#line 176 "../src/ast/lex.re"
	{ continue; }
#line 803 "src/ast/lex.cc"
yy144:
	++YYCURSOR;
#line 177 "../src/ast/lex.re"
	{ ++cline; continue; }
#line 808 "src/ast/lex.cc"
yy146:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy144;
	goto yy140;
yy147:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy150;
	goto yy140;
yy148:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy152;
	goto yy140;
yy149:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy154;
	goto yy140;
yy150:
	++YYCURSOR;
#line 178 "../src/ast/lex.re"
	{
			out.wdelay_tags(new ConfTags(fmt, sep), lists);
			tok = pos = cur;
			return;
		}
#line 833 "src/ast/lex.cc"
yy152:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy155;
yy153:
	YYCURSOR = YYMARKER;
	goto yy140;
yy154:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy156;
	goto yy153;
yy155:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy157;
	goto yy153;
yy156:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy158;
	goto yy153;
yy157:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy159;
	goto yy153;
yy158:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy160;
	goto yy153;
yy159:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy161;
	goto yy153;
yy160:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy163;
	goto yy153;
yy161:
	++YYCURSOR;
#line 173 "../src/ast/lex.re"
	{ fmt = lex_conf_string(); continue; }
#line 872 "src/ast/lex.cc"
yy163:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy153;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy153;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy153;
	++YYCURSOR;
#line 174 "../src/ast/lex.re"
	{ sep = lex_conf_string(); continue; }
#line 883 "src/ast/lex.cc"
}
#line 183 "../src/ast/lex.re"
}
}

int Scanner::scan(const conopt_t *globopts)
{
	uint32_t depth, code_line;
scan:
	tchar = cur - pos;
	tok = cur;

#line 896 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy172;
	}
	if (yych <= '.') {
		if (yych <= '#') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy170;
				if (yych <= '\n') goto yy175;
				if (yych >= '\r') goto yy177;
			} else {
				if (yych <= 0x1F) goto yy170;
				if (yych <= '!') goto yy178;
				if (yych <= '"') goto yy180;
				goto yy182;
			}
		} else {
			if (yych <= '\'') {
				if (yych == '%') goto yy183;
				if (yych >= '\'') goto yy184;
			} else {
				if (yych <= '*') {
					if (yych <= ')') goto yy178;
					goto yy186;
				} else {
					if (yych <= ',') goto yy178;
					if (yych >= '.') goto yy187;
				}
			}
		}
	} else {
		if (yych <= '\\') {
			if (yych <= '?') {
				if (yych <= '/') goto yy189;
				if (yych <= '9') goto yy190;
				if (yych <= ':') goto yy192;
				goto yy178;
			} else {
				if (yych <= '@') goto yy182;
				if (yych <= 'Z') goto yy190;
				if (yych <= '[') goto yy193;
				goto yy178;
			}
		} else {
			if (yych <= 'q') {
				if (yych == '_') goto yy190;
				if (yych >= 'a') goto yy190;
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy195;
					goto yy190;
				} else {
					if (yych <= '{') goto yy196;
					if (yych <= '|') goto yy178;
				}
			}
		}
	}
yy170:
	++YYCURSOR;
yy171:
#line 343 "../src/ast/lex.re"
	{
					fatalf("unexpected character: '%c'", *tok);
					goto scan;
				}
#line 1001 "src/ast/lex.cc"
yy172:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy172;
	}
#line 322 "../src/ast/lex.re"
	{
					goto scan;
				}
#line 1013 "src/ast/lex.cc"
yy175:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy198;
	} else {
		if (yych <= ' ') goto yy198;
		if (yych == '#') goto yy201;
	}
yy176:
#line 331 "../src/ast/lex.re"
	{
		if (cur == eof) return 0;
		pos = cur;
		cline++;
		if (lexer_state == LEX_FLEX_NAME) {
			lexer_state = LEX_NORMAL;
			return TOKEN_FID_END;
		} else {
			goto scan;
		}
	}
#line 1036 "src/ast/lex.cc"
yy177:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy175;
	goto yy171;
yy178:
	++YYCURSOR;
yy179:
#line 235 "../src/ast/lex.re"
	{ return *tok; }
#line 1046 "src/ast/lex.cc"
yy180:
	++YYCURSOR;
#line 225 "../src/ast/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1051 "src/ast/lex.cc"
yy182:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy171;
		if (yych <= '9') goto yy203;
		if (yych <= '@') goto yy171;
		goto yy203;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy171;
			goto yy203;
		} else {
			if (yych <= '`') goto yy171;
			if (yych <= 'z') goto yy203;
			goto yy171;
		}
	}
yy183:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy206;
	goto yy171;
yy184:
	++YYCURSOR;
#line 224 "../src/ast/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1077 "src/ast/lex.cc"
yy186:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy206;
	goto yy179;
yy187:
	++YYCURSOR;
#line 317 "../src/ast/lex.re"
	{
					yylval.regexp = ast_dot(cline, get_column());
					return TOKEN_REGEXP;
				}
#line 1089 "src/ast/lex.cc"
yy189:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy208;
	if (yych == '/') goto yy210;
	goto yy179;
yy190:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy191:
	if (yybm[0+yych] & 32) {
		goto yy190;
	}
	if (yych <= ' ') {
		if (yych == '\t') {
			YYCTXMARKER = YYCURSOR;
			goto yy214;
		}
		if (yych <= 0x1F) goto yy212;
		YYCTXMARKER = YYCURSOR;
		goto yy214;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy212;
			YYCTXMARKER = YYCURSOR;
			goto yy216;
		} else {
			if (yych <= '<') goto yy212;
			if (yych <= '>') {
				YYCTXMARKER = YYCURSOR;
				goto yy216;
			}
			goto yy212;
		}
	}
yy192:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy218;
	goto yy171;
yy193:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy220;
#line 226 "../src/ast/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1134 "src/ast/lex.cc"
yy195:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy222;
	goto yy191;
yy196:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy225;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy223;
		if (yych >= 'A') goto yy227;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy227;
		} else {
			if (yych <= '`') goto yy197;
			if (yych <= 'z') goto yy227;
		}
	}
yy197:
#line 193 "../src/ast/lex.re"
	{
					depth = 1;
					code_line = cline;
					goto code;
				}
#line 1163 "src/ast/lex.cc"
yy198:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy198;
	} else {
		if (yych <= ' ') goto yy198;
		if (yych == '#') goto yy201;
	}
yy200:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy176;
		} else {
			goto yy197;
		}
	} else {
		goto yy224;
	}
yy201:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy201;
		goto yy200;
	} else {
		if (yych <= ' ') goto yy201;
		if (yych == 'l') goto yy229;
		goto yy200;
	}
yy203:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy205;
		if (yych <= '9') goto yy203;
		if (yych >= 'A') goto yy203;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy203;
		} else {
			if (yych <= '`') goto yy205;
			if (yych <= 'z') goto yy203;
		}
	}
yy205:
#line 229 "../src/ast/lex.re"
	{
		const std::string *name = new std::string(tok + 1, tok_len() - 1);
		yylval.regexp = ast_tag(cline, get_column(), name, tok[0] == '#');
		return TOKEN_REGEXP;
	}
#line 1220 "src/ast/lex.cc"
yy206:
	++YYCURSOR;
#line 219 "../src/ast/lex.re"
	{
					tok = cur;
					return 0;
				}
#line 1228 "src/ast/lex.cc"
yy208:
	++YYCURSOR;
#line 213 "../src/ast/lex.re"
	{
					depth = 1;
					goto comment;
				}
#line 1236 "src/ast/lex.cc"
yy210:
	++YYCURSOR;
#line 210 "../src/ast/lex.re"
	{
				goto nextLine;
			}
#line 1243 "src/ast/lex.cc"
yy212:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 300 "../src/ast/lex.re"
	{
					if (!globopts->FFlag) {
						yylval.str = new std::string (tok, tok_len());
						return TOKEN_ID;
					} else {
						std::vector<ASTChar> *str = new std::vector<ASTChar>;
						for (char *s = tok; s < cur; ++s) {
							const uint32_t
								chr = static_cast<uint8_t>(*s),
								col = static_cast<uint32_t>(s - tok);
							str->push_back(ASTChar(chr, col));
						}
						yylval.regexp = ast_str(cline, get_column(), str, false);
						return TOKEN_REGEXP;
					}
				}
#line 1264 "src/ast/lex.cc"
yy214:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy214;
		if (yych <= 0x1F) goto yy230;
		goto yy214;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy230;
		} else {
			if (yych <= '<') goto yy230;
			if (yych >= '?') goto yy230;
		}
	}
yy216:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 295 "../src/ast/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					return TOKEN_ID;
				}
#line 1289 "src/ast/lex.cc"
yy218:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy232;
#line 203 "../src/ast/lex.re"
	{
					tok += 2; /* skip ":=" */
					depth = 0;
					code_line = cline;
					goto code;
				}
#line 1300 "src/ast/lex.cc"
yy220:
	++YYCURSOR;
#line 227 "../src/ast/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1305 "src/ast/lex.cc"
yy222:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy234;
	goto yy191;
yy223:
	++YYCURSOR;
yy224:
#line 268 "../src/ast/lex.re"
	{
					fatal("illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
				}
#line 1317 "src/ast/lex.cc"
yy225:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy225;
	}
	if (yych <= '^') {
		if (yych <= ',') {
			if (yych <= '+') goto yy200;
			goto yy235;
		} else {
			if (yych <= '@') goto yy200;
			if (yych >= '[') goto yy200;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy200;
		} else {
			if (yych == '}') goto yy236;
			goto yy200;
		}
	}
yy227:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy200;
			goto yy227;
		} else {
			if (yych <= '@') goto yy200;
			if (yych <= 'Z') goto yy227;
			goto yy200;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy200;
			goto yy227;
		} else {
			if (yych == '}') goto yy238;
			goto yy200;
		}
	}
yy229:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy240;
	goto yy200;
yy230:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 282 "../src/ast/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					if (globopts->FFlag)
					{
						lexer_state = LEX_FLEX_NAME;
						return TOKEN_FID;
					}
					else
					{
						return TOKEN_ID;
					}
				}
#line 1383 "src/ast/lex.cc"
yy232:
	++YYCURSOR;
	YYCURSOR -= 2;
#line 199 "../src/ast/lex.re"
	{
					return *tok;
				}
#line 1391 "src/ast/lex.cc"
yy234:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy241;
	goto yy191;
yy235:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy224;
	if (yych <= '9') goto yy242;
	if (yych == '}') goto yy244;
	goto yy224;
yy236:
	++YYCURSOR;
#line 237 "../src/ast/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min))
					{
						fatal ("repetition count overflow");
					}
					yylval.bounds.max = yylval.bounds.min;
					return TOKEN_CLOSESIZE;
				}
#line 1414 "src/ast/lex.cc"
yy238:
	++YYCURSOR;
#line 272 "../src/ast/lex.re"
	{
					if (!globopts->FFlag) {
						fatal("curly braces for names only allowed with -F switch");
					}
					yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
					return TOKEN_ID;
				}
#line 1425 "src/ast/lex.cc"
yy240:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy246;
	goto yy200;
yy241:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy247;
	goto yy191;
yy242:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy200;
	if (yych <= '9') goto yy242;
	if (yych == '}') goto yy249;
	goto yy200;
yy244:
	++YYCURSOR;
#line 259 "../src/ast/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min))
					{
						fatal ("repetition lower bound overflow");
					}
					yylval.bounds.max = std::numeric_limits<uint32_t>::max();
					return TOKEN_CLOSESIZE;
				}
#line 1453 "src/ast/lex.cc"
yy246:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy251;
	goto yy200;
yy247:
	++YYCURSOR;
#line 280 "../src/ast/lex.re"
	{ return TOKEN_CONF; }
#line 1462 "src/ast/lex.cc"
yy249:
	++YYCURSOR;
#line 246 "../src/ast/lex.re"
	{
					const char * p = strchr (tok, ',');
					if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min))
					{
						fatal ("repetition lower bound overflow");
					}
					if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max))
					{
						fatal ("repetition upper bound overflow");
					}
					return TOKEN_CLOSESIZE;
				}
#line 1478 "src/ast/lex.cc"
yy251:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy253;
	if (yych <= '9') goto yy200;
	goto yy253;
yy252:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy253:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy252;
		goto yy200;
	} else {
		if (yych <= ' ') goto yy252;
		if (yych <= '0') goto yy200;
		if (yych >= ':') goto yy200;
		YYCTXMARKER = YYCURSOR;
	}
yy254:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy200;
		} else {
			if (yych <= '\n') goto yy258;
			if (yych <= '\f') goto yy200;
			goto yy260;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy200;
		} else {
			if (yych <= '/') goto yy200;
			if (yych <= '9') goto yy254;
			goto yy200;
		}
	}
yy256:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy256;
		goto yy200;
	} else {
		if (yych <= ' ') goto yy256;
		if (yych == '"') goto yy261;
		goto yy200;
	}
yy258:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 326 "../src/ast/lex.re"
	{
		set_sourceline ();
		return TOKEN_LINE_INFO;
	}
#line 1539 "src/ast/lex.cc"
yy260:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy258;
	goto yy200;
yy261:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy261;
	}
	if (yych <= '\n') goto yy200;
	if (yych >= '#') goto yy264;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy258;
	if (yych == '\r') goto yy260;
	goto yy200;
yy264:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy200;
	goto yy261;
}
#line 347 "../src/ast/lex.re"


code:

#line 1569 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96, 112,   0,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		112,  96,  64,  96,  96,  96,  96,  32, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,   0,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy267;
			if (yych <= '\t') goto yy269;
			goto yy271;
		} else {
			if (yych == '"') goto yy273;
			goto yy269;
		}
	} else {
		if (yych <= '{') {
			if (yych <= '\'') goto yy274;
			if (yych <= 'z') goto yy269;
			goto yy275;
		} else {
			if (yych == '}') goto yy277;
			goto yy269;
		}
	}
yy267:
	++YYCURSOR;
#line 410 "../src/ast/lex.re"
	{
					if (cur == eof)
					{
						if (depth)
						{
							fatal("missing '}'");
						}
						return 0;
					}
					goto code;
				}
#line 1642 "src/ast/lex.cc"
yy269:
	++YYCURSOR;
yy270:
#line 424 "../src/ast/lex.re"
	{
					goto code;
				}
#line 1650 "src/ast/lex.cc"
yy271:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy279;
		} else {
			if (yych <= '\n') goto yy281;
			if (yych >= '\r') goto yy281;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy279;
		} else {
			if (yych == '#') goto yy282;
		}
	}
yy272:
#line 391 "../src/ast/lex.re"
	{
					if (depth == 0)
					{
						tok += strspn(tok, " \t\r\n");
						while (cur > tok && strchr(" \t\r\n", cur[-1]))
						{
							--cur;
						}
						yylval.code = new Code(get_fname (), code_line, tok, tok_len ());
						return TOKEN_CODE;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1689 "src/ast/lex.cc"
yy273:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy270;
	goto yy286;
yy274:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy270;
	goto yy291;
yy275:
	++YYCURSOR;
#line 363 "../src/ast/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else
					{
						++depth;
					}
					goto code;
				}
#line 1714 "src/ast/lex.cc"
yy277:
	++YYCURSOR;
#line 351 "../src/ast/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else if (--depth == 0)
					{
						yylval.code = new Code(get_fname (), code_line, tok, tok_len ());
						return TOKEN_CODE;
					}
					goto code;
				}
#line 1730 "src/ast/lex.cc"
yy279:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy293;
	} else {
		if (yych <= ' ') goto yy293;
		if (yych == '#') goto yy282;
	}
yy280:
	YYCURSOR -= 1;
#line 378 "../src/ast/lex.re"
	{
					if (depth == 0)
					{
						goto code;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1756 "src/ast/lex.cc"
yy281:
	++YYCURSOR;
	goto yy280;
yy282:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy282;
	}
	if (yych == 'l') goto yy295;
yy284:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy272;
		} else {
			goto yy270;
		}
	} else {
		goto yy280;
	}
yy285:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy286:
	if (yybm[0+yych] & 32) {
		goto yy285;
	}
	if (yych <= '\n') goto yy284;
	if (yych >= '#') goto yy289;
yy287:
	++YYCURSOR;
#line 421 "../src/ast/lex.re"
	{
					goto code;
				}
#line 1795 "src/ast/lex.cc"
yy289:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy284;
	goto yy285;
yy290:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy291:
	if (yybm[0+yych] & 64) {
		goto yy290;
	}
	if (yych <= '\n') goto yy284;
	if (yych <= '\'') goto yy287;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy284;
	goto yy290;
yy293:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy293;
		goto yy284;
	} else {
		if (yych <= ' ') goto yy293;
		if (yych == '#') goto yy282;
		goto yy284;
	}
yy295:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy284;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy284;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy284;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy300;
	if (yych <= '9') goto yy284;
	goto yy300;
yy299:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy300:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy299;
		goto yy284;
	} else {
		if (yych <= ' ') goto yy299;
		if (yych <= '0') goto yy284;
		if (yych >= ':') goto yy284;
		YYCTXMARKER = YYCURSOR;
	}
yy301:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy301;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy284;
		if (yych <= '\t') goto yy303;
		if (yych <= '\n') goto yy305;
		goto yy284;
	} else {
		if (yych <= '\r') goto yy307;
		if (yych != ' ') goto yy284;
	}
yy303:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy303;
		goto yy284;
	} else {
		if (yych <= ' ') goto yy303;
		if (yych == '"') goto yy308;
		goto yy284;
	}
yy305:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 374 "../src/ast/lex.re"
	{
					set_sourceline ();
					goto code;
				}
#line 1890 "src/ast/lex.cc"
yy307:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy305;
	goto yy284;
yy308:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy284;
		goto yy308;
	} else {
		if (yych <= '"') goto yy310;
		if (yych == '\\') goto yy311;
		goto yy308;
	}
yy310:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy305;
	if (yych == '\r') goto yy307;
	goto yy284;
yy311:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy284;
	goto yy308;
}
#line 427 "../src/ast/lex.re"


comment:

#line 1924 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ')') {
		if (yych == '\n') goto yy316;
	} else {
		if (yych <= '*') goto yy318;
		if (yych == '/') goto yy319;
	}
	++YYCURSOR;
yy315:
#line 459 "../src/ast/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					goto comment;
				}
#line 1979 "src/ast/lex.cc"
yy316:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy320;
	}
	if (yych == '#') goto yy323;
yy317:
#line 450 "../src/ast/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					tok = pos = cur;
					cline++;
					goto comment;
				}
#line 1997 "src/ast/lex.cc"
yy318:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy325;
	goto yy315;
yy319:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy327;
	goto yy315;
yy320:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy320;
	}
	if (yych == '#') goto yy323;
yy322:
	YYCURSOR = YYMARKER;
	goto yy317;
yy323:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy323;
		goto yy322;
	} else {
		if (yych <= ' ') goto yy323;
		if (yych == 'l') goto yy329;
		goto yy322;
	}
yy325:
	++YYCURSOR;
#line 431 "../src/ast/lex.re"
	{
					if (--depth == 0)
					{
						goto scan;
					}
					else
					{
						goto comment;
					}
				}
#line 2042 "src/ast/lex.cc"
yy327:
	++YYCURSOR;
#line 441 "../src/ast/lex.re"
	{
					++depth;
					fatal("ambiguous /* found");
					goto comment;
				}
#line 2051 "src/ast/lex.cc"
yy329:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy322;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy322;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy322;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy334;
	if (yych <= '9') goto yy322;
	goto yy334;
yy333:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy334:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy333;
		goto yy322;
	} else {
		if (yych <= ' ') goto yy333;
		if (yych <= '0') goto yy322;
		if (yych >= ':') goto yy322;
		YYCTXMARKER = YYCURSOR;
	}
yy335:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy335;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy322;
		if (yych <= '\t') goto yy337;
		if (yych <= '\n') goto yy339;
		goto yy322;
	} else {
		if (yych <= '\r') goto yy341;
		if (yych != ' ') goto yy322;
	}
yy337:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy337;
		goto yy322;
	} else {
		if (yych <= ' ') goto yy337;
		if (yych == '"') goto yy342;
		goto yy322;
	}
yy339:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 446 "../src/ast/lex.re"
	{
					set_sourceline ();
					goto comment;
				}
#line 2113 "src/ast/lex.cc"
yy341:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy339;
	goto yy322;
yy342:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy342;
	}
	if (yych <= '\n') goto yy322;
	if (yych >= '#') goto yy345;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy339;
	if (yych == '\r') goto yy341;
	goto yy322;
yy345:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy322;
	goto yy342;
}
#line 466 "../src/ast/lex.re"


nextLine:

#line 2143 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy350;
	++YYCURSOR;
#line 477 "../src/ast/lex.re"
	{  if(cur == eof) {
                  return 0;
               }
               goto nextLine;
            }
#line 2156 "src/ast/lex.cc"
yy350:
	++YYCURSOR;
#line 470 "../src/ast/lex.re"
	{ if(cur == eof) {
                  return 0;
               }
               tok = pos = cur;
               cline++;
               goto scan;
            }
#line 2167 "src/ast/lex.cc"
}
#line 482 "../src/ast/lex.re"

}

static void escape (std::string & dest, const std::string & src)
{
	dest = src;
	size_t l = dest.length();
	for (size_t p = 0; p < l; ++p)
	{
		if (dest[p] == '\\')
		{
			dest.insert(++p, "\\");
			++l;
		}
	}
}

const AST *Scanner::lex_cls(bool neg)
{
	std::vector<ASTRange> *cls = new std::vector<ASTRange>;
	uint32_t u, l, c, c0 = get_column();
fst:
	tok = cur;
	c = get_column();
	
#line 2195 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy355;
#line 508 "../src/ast/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 2203 "src/ast/lex.cc"
yy355:
	++YYCURSOR;
#line 507 "../src/ast/lex.re"
	{ return ast_cls(cline, c0, cls, neg); }
#line 2208 "src/ast/lex.cc"
}
#line 509 "../src/ast/lex.re"

snd:
	
#line 2214 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy360;
yy359:
#line 512 "../src/ast/lex.re"
	{ u = l; goto add; }
#line 2223 "src/ast/lex.cc"
yy360:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy362;
	YYCURSOR = YYMARKER;
	goto yy359;
yy362:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 513 "../src/ast/lex.re"
	{
			u = lex_cls_chr();
			if (l > u) {
				warn.swapped_range(cline, l, u);
				std::swap(l, u);
			}
			goto add;
		}
#line 2241 "src/ast/lex.cc"
}
#line 521 "../src/ast/lex.re"

add:
	cls->push_back(ASTRange(l, u, c));
	goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
	tok = cur;
	
#line 2254 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy368;
	if (yych == '\\') goto yy370;
	++YYCURSOR;
#line 536 "../src/ast/lex.re"
	{ return static_cast<uint8_t>(tok[0]); }
#line 2265 "src/ast/lex.cc"
yy368:
	++YYCURSOR;
#line 531 "../src/ast/lex.re"
	{ fatal (get_column() - tchar, "syntax error"); }
#line 2270 "src/ast/lex.cc"
yy370:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '7') {
			if (yych <= ',') {
				if (yych != '\n') goto yy372;
			} else {
				if (yych <= '-') goto yy374;
				if (yych <= '/') goto yy372;
				if (yych <= '3') goto yy376;
				goto yy378;
			}
		} else {
			if (yych <= 'X') {
				if (yych == 'U') goto yy379;
				if (yych <= 'W') goto yy372;
				goto yy381;
			} else {
				if (yych <= '[') goto yy372;
				if (yych <= '\\') goto yy382;
				if (yych <= ']') goto yy384;
				goto yy372;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy386;
				if (yych <= 'b') goto yy388;
				goto yy372;
			} else {
				if (yych <= 'f') goto yy390;
				if (yych == 'n') goto yy392;
				goto yy372;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy394;
				if (yych <= 's') goto yy372;
				if (yych <= 't') goto yy396;
				goto yy381;
			} else {
				if (yych <= 'v') goto yy398;
				if (yych == 'x') goto yy400;
				goto yy372;
			}
		}
	}
#line 534 "../src/ast/lex.re"
	{ fatal (get_column() - tchar, "syntax error in escape sequence"); }
#line 2321 "src/ast/lex.cc"
yy372:
	++YYCURSOR;
#line 549 "../src/ast/lex.re"
	{
			warn.useless_escape(cline, get_column(), tok[1]);
			return static_cast<uint8_t>(tok[1]);
		}
#line 2329 "src/ast/lex.cc"
yy374:
	++YYCURSOR;
#line 547 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 2334 "src/ast/lex.cc"
yy376:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy377;
	if (yych <= '7') goto yy401;
yy377:
#line 533 "../src/ast/lex.re"
	{ fatal (get_column() - tchar, "syntax error in octal escape sequence"); }
#line 2343 "src/ast/lex.cc"
yy378:
	++YYCURSOR;
	goto yy377;
yy379:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy380;
		if (yych <= '9') goto yy403;
	} else {
		if (yych <= 'F') goto yy403;
		if (yych <= '`') goto yy380;
		if (yych <= 'f') goto yy403;
	}
yy380:
#line 532 "../src/ast/lex.re"
	{ fatal (get_column() - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2361 "src/ast/lex.cc"
yy381:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy380;
		if (yych <= '9') goto yy404;
		goto yy380;
	} else {
		if (yych <= 'F') goto yy404;
		if (yych <= '`') goto yy380;
		if (yych <= 'f') goto yy404;
		goto yy380;
	}
yy382:
	++YYCURSOR;
#line 546 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2379 "src/ast/lex.cc"
yy384:
	++YYCURSOR;
#line 548 "../src/ast/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 2384 "src/ast/lex.cc"
yy386:
	++YYCURSOR;
#line 539 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2389 "src/ast/lex.cc"
yy388:
	++YYCURSOR;
#line 540 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2394 "src/ast/lex.cc"
yy390:
	++YYCURSOR;
#line 541 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2399 "src/ast/lex.cc"
yy392:
	++YYCURSOR;
#line 542 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2404 "src/ast/lex.cc"
yy394:
	++YYCURSOR;
#line 543 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2409 "src/ast/lex.cc"
yy396:
	++YYCURSOR;
#line 544 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2414 "src/ast/lex.cc"
yy398:
	++YYCURSOR;
#line 545 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2419 "src/ast/lex.cc"
yy400:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy380;
		if (yych <= '9') goto yy405;
		goto yy380;
	} else {
		if (yych <= 'F') goto yy405;
		if (yych <= '`') goto yy380;
		if (yych <= 'f') goto yy405;
		goto yy380;
	}
yy401:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy402;
	if (yych <= '7') goto yy406;
yy402:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy377;
	} else {
		goto yy380;
	}
yy403:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy402;
		if (yych <= '9') goto yy408;
		goto yy402;
	} else {
		if (yych <= 'F') goto yy408;
		if (yych <= '`') goto yy402;
		if (yych <= 'f') goto yy408;
		goto yy402;
	}
yy404:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy402;
		if (yych <= '9') goto yy409;
		goto yy402;
	} else {
		if (yych <= 'F') goto yy409;
		if (yych <= '`') goto yy402;
		if (yych <= 'f') goto yy409;
		goto yy402;
	}
yy405:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy402;
		if (yych <= '9') goto yy410;
		goto yy402;
	} else {
		if (yych <= 'F') goto yy410;
		if (yych <= '`') goto yy402;
		if (yych <= 'f') goto yy410;
		goto yy402;
	}
yy406:
	++YYCURSOR;
#line 538 "../src/ast/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2484 "src/ast/lex.cc"
yy408:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy402;
		if (yych <= '9') goto yy412;
		goto yy402;
	} else {
		if (yych <= 'F') goto yy412;
		if (yych <= '`') goto yy402;
		if (yych <= 'f') goto yy412;
		goto yy402;
	}
yy409:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy402;
		if (yych <= '9') goto yy405;
		goto yy402;
	} else {
		if (yych <= 'F') goto yy405;
		if (yych <= '`') goto yy402;
		if (yych <= 'f') goto yy405;
		goto yy402;
	}
yy410:
	++YYCURSOR;
#line 537 "../src/ast/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2513 "src/ast/lex.cc"
yy412:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy402;
		if (yych >= ':') goto yy402;
	} else {
		if (yych <= 'F') goto yy413;
		if (yych <= '`') goto yy402;
		if (yych >= 'g') goto yy402;
	}
yy413:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy402;
		if (yych <= '9') goto yy404;
		goto yy402;
	} else {
		if (yych <= 'F') goto yy404;
		if (yych <= '`') goto yy402;
		if (yych <= 'f') goto yy404;
		goto yy402;
	}
}
#line 553 "../src/ast/lex.re"

}

uint32_t Scanner::lex_str_chr(char quote, bool &end)
{
	end = false;
	tok = cur;
	
#line 2546 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy418;
	if (yych == '\\') goto yy420;
	++YYCURSOR;
#line 566 "../src/ast/lex.re"
	{
			end = tok[0] == quote;
			return static_cast<uint8_t>(tok[0]);
		}
#line 2560 "src/ast/lex.cc"
yy418:
	++YYCURSOR;
#line 561 "../src/ast/lex.re"
	{ fatal (get_column() - tchar, "syntax error"); }
#line 2565 "src/ast/lex.cc"
yy420:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 'a') {
		if (yych <= 'T') {
			if (yych <= '/') {
				if (yych != '\n') goto yy422;
			} else {
				if (yych <= '3') goto yy424;
				if (yych <= '7') goto yy426;
				goto yy422;
			}
		} else {
			if (yych <= 'X') {
				if (yych <= 'U') goto yy427;
				if (yych <= 'W') goto yy422;
				goto yy429;
			} else {
				if (yych == '\\') goto yy430;
				if (yych <= '`') goto yy422;
				goto yy432;
			}
		}
	} else {
		if (yych <= 'r') {
			if (yych <= 'f') {
				if (yych <= 'b') goto yy434;
				if (yych <= 'e') goto yy422;
				goto yy436;
			} else {
				if (yych == 'n') goto yy438;
				if (yych <= 'q') goto yy422;
				goto yy440;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 's') goto yy422;
				if (yych <= 't') goto yy442;
				goto yy429;
			} else {
				if (yych <= 'v') goto yy444;
				if (yych == 'x') goto yy446;
				goto yy422;
			}
		}
	}
#line 564 "../src/ast/lex.re"
	{ fatal (get_column() - tchar, "syntax error in escape sequence"); }
#line 2613 "src/ast/lex.cc"
yy422:
	++YYCURSOR;
#line 580 "../src/ast/lex.re"
	{
			if (tok[1] != quote) {
				warn.useless_escape(cline, get_column(), tok[1]);
			}
			return static_cast<uint8_t>(tok[1]);
		}
#line 2623 "src/ast/lex.cc"
yy424:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy425;
	if (yych <= '7') goto yy447;
yy425:
#line 563 "../src/ast/lex.re"
	{ fatal (get_column() - tchar, "syntax error in octal escape sequence"); }
#line 2632 "src/ast/lex.cc"
yy426:
	++YYCURSOR;
	goto yy425;
yy427:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy428;
		if (yych <= '9') goto yy449;
	} else {
		if (yych <= 'F') goto yy449;
		if (yych <= '`') goto yy428;
		if (yych <= 'f') goto yy449;
	}
yy428:
#line 562 "../src/ast/lex.re"
	{ fatal (get_column() - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2650 "src/ast/lex.cc"
yy429:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy428;
		if (yych <= '9') goto yy450;
		goto yy428;
	} else {
		if (yych <= 'F') goto yy450;
		if (yych <= '`') goto yy428;
		if (yych <= 'f') goto yy450;
		goto yy428;
	}
yy430:
	++YYCURSOR;
#line 579 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2668 "src/ast/lex.cc"
yy432:
	++YYCURSOR;
#line 572 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2673 "src/ast/lex.cc"
yy434:
	++YYCURSOR;
#line 573 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2678 "src/ast/lex.cc"
yy436:
	++YYCURSOR;
#line 574 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2683 "src/ast/lex.cc"
yy438:
	++YYCURSOR;
#line 575 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2688 "src/ast/lex.cc"
yy440:
	++YYCURSOR;
#line 576 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2693 "src/ast/lex.cc"
yy442:
	++YYCURSOR;
#line 577 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2698 "src/ast/lex.cc"
yy444:
	++YYCURSOR;
#line 578 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2703 "src/ast/lex.cc"
yy446:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy428;
		if (yych <= '9') goto yy451;
		goto yy428;
	} else {
		if (yych <= 'F') goto yy451;
		if (yych <= '`') goto yy428;
		if (yych <= 'f') goto yy451;
		goto yy428;
	}
yy447:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy448;
	if (yych <= '7') goto yy452;
yy448:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy425;
	} else {
		goto yy428;
	}
yy449:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy448;
		if (yych <= '9') goto yy454;
		goto yy448;
	} else {
		if (yych <= 'F') goto yy454;
		if (yych <= '`') goto yy448;
		if (yych <= 'f') goto yy454;
		goto yy448;
	}
yy450:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy448;
		if (yych <= '9') goto yy455;
		goto yy448;
	} else {
		if (yych <= 'F') goto yy455;
		if (yych <= '`') goto yy448;
		if (yych <= 'f') goto yy455;
		goto yy448;
	}
yy451:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy448;
		if (yych <= '9') goto yy456;
		goto yy448;
	} else {
		if (yych <= 'F') goto yy456;
		if (yych <= '`') goto yy448;
		if (yych <= 'f') goto yy456;
		goto yy448;
	}
yy452:
	++YYCURSOR;
#line 571 "../src/ast/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2768 "src/ast/lex.cc"
yy454:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy448;
		if (yych <= '9') goto yy458;
		goto yy448;
	} else {
		if (yych <= 'F') goto yy458;
		if (yych <= '`') goto yy448;
		if (yych <= 'f') goto yy458;
		goto yy448;
	}
yy455:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy448;
		if (yych <= '9') goto yy451;
		goto yy448;
	} else {
		if (yych <= 'F') goto yy451;
		if (yych <= '`') goto yy448;
		if (yych <= 'f') goto yy451;
		goto yy448;
	}
yy456:
	++YYCURSOR;
#line 570 "../src/ast/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2797 "src/ast/lex.cc"
yy458:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy448;
		if (yych >= ':') goto yy448;
	} else {
		if (yych <= 'F') goto yy459;
		if (yych <= '`') goto yy448;
		if (yych >= 'g') goto yy448;
	}
yy459:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy448;
		if (yych <= '9') goto yy450;
		goto yy448;
	} else {
		if (yych <= 'F') goto yy450;
		if (yych <= '`') goto yy448;
		if (yych <= 'f') goto yy450;
		goto yy448;
	}
}
#line 586 "../src/ast/lex.re"

}

const AST *Scanner::lex_str(char quote)
{
	const uint32_t column = get_column();
	std::vector<ASTChar> *str = new std::vector<ASTChar>;
	for (bool end;;) {
		const uint32_t c = lex_str_chr(quote, end);
		if (end) return ast_str(cline, column, str, quote == '\'');
		str->push_back(ASTChar(c, get_column()));
	}
}

void Scanner::set_sourceline ()
{
sourceline:
	tok = cur;

#line 2841 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy464;
	} else {
		if (yych <= '"') goto yy466;
		if (yych <= '0') goto yy462;
		if (yych <= '9') goto yy467;
	}
yy462:
	++YYCURSOR;
yy463:
#line 628 "../src/ast/lex.re"
	{
  					goto sourceline;
  				}
#line 2894 "src/ast/lex.cc"
yy464:
	++YYCURSOR;
#line 616 "../src/ast/lex.re"
	{
  					if (cur == eof)
  					{
						--cur; 
					}
			  		else
			  		{
			  			pos = cur; 
			  		}
			  		tok = cur;
			  		return; 
				}
#line 2910 "src/ast/lex.cc"
yy466:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy463;
	goto yy471;
yy467:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy467;
	}
#line 605 "../src/ast/lex.re"
	{
					if (!s_to_u32_unsafe (tok, cur, cline))
					{
						fatal ("line number overflow");
					}
					goto sourceline; 
				}
#line 2930 "src/ast/lex.cc"
yy470:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy471:
	if (yybm[0+yych] & 128) {
		goto yy470;
	}
	if (yych <= '\n') goto yy472;
	if (yych <= '"') goto yy473;
	goto yy475;
yy472:
	YYCURSOR = YYMARKER;
	goto yy463;
yy473:
	++YYCURSOR;
#line 612 "../src/ast/lex.re"
	{
					escape (in.file_name, std::string (tok + 1, tok_len () - 2)); // -2 to omit quotes
			  		goto sourceline; 
				}
#line 2952 "src/ast/lex.cc"
yy475:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy472;
	goto yy470;
}
#line 631 "../src/ast/lex.re"

}

} // end namespace re2c
