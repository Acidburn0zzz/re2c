/* Generated by re2c 0.14.3 on Mon Oct 12 15:10:45 2015 */
#line 1 "../src/parse/lex.re"
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <sstream>

#include "src/ir/dfa/dfa.h"
#include "src/globals.h"
#include "src/parse/extop.h"
#include "src/parse/parser.h"
#include "src/parse/scanner.h"
#include "src/parse/unescape.h"
#include "y.tab.h"
#include "src/util/s_to_n32_unsafe.h"

extern YYSTYPE yylval;

#define	YYCTYPE		unsigned char
#define	YYCURSOR	cur
#define	YYLIMIT		lim
#define	YYMARKER	ptr
#define	YYCTXMARKER ctx
#define	YYFILL(n)	{ fill (n); }

namespace re2c
{

// source code is in ASCII: pointers have type 'char *'
// but re2c makes an implicit assumption that YYCTYPE is unsigned
// when it generates comparisons
#line 32 "../src/parse/lex.re"


#line 52 "../src/parse/lex.re"


Scanner::ParseMode Scanner::echo()
{
	bool ignore_eoc = false;
	int  ignore_cnt = 0;

	if (eof && cur == eof) // Catch EOF
	{
		return Stop;
	}

	tok = cur;
echo:

#line 52 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};

	if ((YYLIMIT - YYCURSOR) < 16) YYFILL(16);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '%') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '$') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '*') {
			if (yych <= ')') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 195 "../src/parse/lex.re"
	{
					if (!ignore_eoc && opts->target == opt_t::CODE)
					{
						out.write(tok, tok_len () - 1);
						// -1 so we don't write out the \0
					}
					if(cur == eof)
					{
						return Stop;
					}
				}
#line 123 "src/parse/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 206 "../src/parse/lex.re"
	{
					goto echo;
				}
#line 131 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy89;
	}
	if (yych == '#') goto yy91;
yy7:
#line 182 "../src/parse/lex.re"
	{
					if (ignore_eoc)
					{
						ignore_cnt++;
					}
					else if (opts->target == opt_t::CODE)
					{
						out.write(tok, tok_len ());
					}
					tok = pos = cur;
					cline++;
					goto echo;
				}
#line 154 "src/parse/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy32;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy84;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych != '*') goto yy5;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy13;
yy12:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy7;
		} else {
			goto yy5;
		}
	} else {
		goto yy85;
	}
yy13:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy16;
	case 'i':	goto yy15;
	case 'm':	goto yy17;
	case 'r':	goto yy19;
	case 't':	goto yy14;
	case 'u':	goto yy18;
	default:	goto yy12;
	}
yy14:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy74;
	goto yy12;
yy15:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy63;
	goto yy12;
yy16:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy50;
	goto yy12;
yy17:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy42;
	goto yy12;
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy34;
	goto yy12;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy20;
	if (yych == 'u') goto yy21;
	goto yy12;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy31;
	goto yy12;
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'l') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 's') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 83 "../src/parse/lex.re"
	{
					if (opts->rFlag)
					{
						opts.reset_mapCodeName ();
					}
					else
					{
						fatal("found 'rules:re2c' block without -r flag");
					}
					tok = cur;
					return Rules;
				}
#line 251 "src/parse/lex.cc"
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
yy32:
	++YYCURSOR;
#line 68 "../src/parse/lex.re"
	{
					if (opts->rFlag)
					{
						fatal("found standard 're2c' block while using -r flag");
					}
					if (opts->target == opt_t::CODE)
					{
						const size_t lexeme_len = cur[-1] == '{'
							? sizeof ("%{") - 1
							: sizeof ("/*!re2c") - 1;
						out.write(tok, tok_len () - lexeme_len);
					}
					tok = cur;
					return Parse;
				}
#line 273 "src/parse/lex.cc"
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 95 "../src/parse/lex.re"
	{
					if (!opts->rFlag)
					{
						fatal("found 'use:re2c' block without -r flag");
					}
					reuse();
					if (opts->target == opt_t::CODE)
					{
						const size_t lexeme_len = sizeof ("/*!use:re2c") - 1;
						out.write(tok, tok_len () - lexeme_len);
					}
					tok = cur;
					return Reuse;
				}
#line 303 "src/parse/lex.cc"
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'x') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 109 "../src/parse/lex.re"
	{
					if (opts->target != opt_t::DOT)
					{
						out.insert_yymaxfill ();
					}
					tok = pos = cur;
					ignore_eoc = true;
					goto echo;
				}
#line 328 "src/parse/lex.cc"
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 's') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'a') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 118 "../src/parse/lex.re"
	{
					tok = pos = cur;
					out.insert_state_goto (opts->topIndent);
					ignore_eoc = true;
					goto echo;
				}
#line 360 "src/parse/lex.cc"
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 124 "../src/parse/lex.re"
	{
					tok = pos = cur;
					ignore_eoc = true;
					goto echo;
				}
#line 387 "src/parse/lex.cc"
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'p') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 's') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 129 "../src/parse/lex.re"
	{
					tok = pos = cur;
					ignore_eoc = true;
					if (opts->target != opt_t::DOT)
					{
						out.insert_line_info ();
						out << "\n";
						out.insert_types ();
						out << "\n";
						out.write_line_info (cline, get_fname ().c_str ());
					}
					goto echo;
				}
#line 420 "src/parse/lex.cc"
yy84:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy87;
	if (yych == '\r') goto yy86;
yy85:
#line 160 "../src/parse/lex.re"
	{
					if (ignore_eoc)
					{
						if (ignore_cnt)
						{
							out << "\n";
							out.write_line_info (cline, get_fname ().c_str ());
						}
						ignore_eoc = false;
						ignore_cnt = 0;
					}
					else if (opts->target == opt_t::CODE)
					{
						out.write(tok, tok_len ());
					}
					tok = pos = cur;
					goto echo;
				}
#line 446 "src/parse/lex.cc"
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '\n') goto yy12;
yy87:
	++YYCURSOR;
#line 142 "../src/parse/lex.re"
	{
					cline++;
					if (ignore_eoc)
					{
						if (ignore_cnt)
						{
							out.write_line_info (cline, get_fname ().c_str ());
						}
						ignore_eoc = false;
						ignore_cnt = 0;
					}
					else if (opts->target == opt_t::CODE)
					{
						out.write(tok, tok_len ());
					}
					tok = pos = cur;
					goto echo;
				}
#line 471 "src/parse/lex.cc"
yy89:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy89;
	}
	if (yych != '#') goto yy12;
yy91:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy91;
		goto yy12;
	} else {
		if (yych <= ' ') goto yy91;
		if (yych != 'l') goto yy12;
	}
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy98;
	if (yych <= '9') goto yy12;
	goto yy98;
yy97:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy98:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy97;
		goto yy12;
	} else {
		if (yych <= ' ') goto yy97;
		if (yych <= '0') goto yy12;
		if (yych >= ':') goto yy12;
	}
yy99:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy99;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy12;
		if (yych <= '\t') goto yy101;
		if (yych <= '\n') goto yy103;
		goto yy12;
	} else {
		if (yych <= '\r') goto yy105;
		if (yych != ' ') goto yy12;
	}
yy101:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy101;
		goto yy12;
	} else {
		if (yych <= ' ') goto yy101;
		if (yych == '"') goto yy106;
		goto yy12;
	}
yy103:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 178 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto echo;
				}
#line 551 "src/parse/lex.cc"
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy103;
	goto yy12;
yy106:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy106;
	}
	if (yych <= '\n') goto yy12;
	if (yych <= '"') goto yy109;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy12;
	goto yy106;
yy109:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '\n') goto yy103;
	if (yych == '\r') goto yy105;
	goto yy12;
}
#line 209 "../src/parse/lex.re"

}

int Scanner::scan()
{
	uint32_t depth;

scan:
	tchar = cur - pos;
	tline = cline;
	tok = cur;
	switch (lexer_state)
	{
		case LEX_NORMAL:    goto start;
		case LEX_FLEX_NAME: goto flex_name;
	}

start:

#line 596 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 192,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		176, 176, 176, 176, 176, 176, 176, 176, 
		176, 176, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 6) YYFILL(6);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '.') {
		if (yych <= '"') {
			if (yych <= '\f') {
				if (yych <= 0x08) goto yy112;
				if (yych <= '\t') goto yy114;
				if (yych <= '\n') goto yy116;
			} else {
				if (yych <= 0x1F) {
					if (yych <= '\r') goto yy118;
				} else {
					if (yych <= ' ') goto yy114;
					if (yych >= '"') goto yy119;
				}
			}
		} else {
			if (yych <= ')') {
				if (yych <= '%') {
					if (yych >= '%') goto yy121;
				} else {
					if (yych <= '&') goto yy112;
					if (yych <= '\'') goto yy122;
					goto yy124;
				}
			} else {
				if (yych <= '+') {
					if (yych <= '*') goto yy126;
					goto yy128;
				} else {
					if (yych <= ',') goto yy124;
					if (yych >= '.') goto yy130;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '<') {
				if (yych <= '9') {
					if (yych <= '/') goto yy132;
					goto yy133;
				} else {
					if (yych <= ':') goto yy134;
					if (yych <= ';') goto yy124;
					goto yy135;
				}
			} else {
				if (yych <= '?') {
					if (yych <= '>') goto yy124;
					goto yy128;
				} else {
					if (yych <= '@') goto yy112;
					if (yych <= 'Z') goto yy133;
					goto yy136;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy124;
				} else {
					if (yych != '`') goto yy133;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy138;
					goto yy133;
				} else {
					if (yych <= '{') goto yy139;
					if (yych <= '|') goto yy124;
				}
			}
		}
	}
yy112:
	++YYCURSOR;
yy113:
#line 404 "../src/parse/lex.re"
	{
					fatalf("unexpected character: '%c'", *tok);
					goto scan;
				}
#line 716 "src/parse/lex.cc"
yy114:
	++YYCURSOR;
	yych = (YYCTYPE)*YYCURSOR;
	goto yy220;
yy115:
#line 388 "../src/parse/lex.re"
	{
					goto scan;
				}
#line 726 "src/parse/lex.cc"
yy116:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy198;
	} else {
		if (yych <= ' ') goto yy198;
		if (yych == '#') goto yy200;
	}
yy117:
#line 397 "../src/parse/lex.re"
	{
					if (cur == eof) return 0;
					pos = cur;
					cline++;
					goto scan;
				}
#line 744 "src/parse/lex.cc"
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy197;
	goto yy113;
yy119:
	++YYCURSOR;
#line 265 "../src/parse/lex.re"
	{
		std::vector<uint32_t> cpoints;
		lex_cpoints ('"', cpoints);
		yylval.regexp = cpoint_string (cpoints, opts->bCaseInsensitive || opts->bCaseInverted);
		return REGEXP;
	}
#line 758 "src/parse/lex.cc"
yy121:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy195;
	goto yy113;
yy122:
	++YYCURSOR;
#line 258 "../src/parse/lex.re"
	{
		std::vector<uint32_t> cpoints;
		lex_cpoints ('\'', cpoints);
		yylval.regexp = cpoint_string (cpoints, opts->bCaseInsensitive || !opts->bCaseInverted);
		return REGEXP;
	}
#line 772 "src/parse/lex.cc"
yy124:
	++YYCURSOR;
yy125:
#line 292 "../src/parse/lex.re"
	{
					return *tok;
				}
#line 780 "src/parse/lex.cc"
yy126:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '/') goto yy195;
#line 296 "../src/parse/lex.re"
	{
					yylval.op = *tok;
					return STAR;
				}
#line 789 "src/parse/lex.cc"
yy128:
	++YYCURSOR;
#line 300 "../src/parse/lex.re"
	{
					yylval.op = *tok;
					return CLOSE;
				}
#line 797 "src/parse/lex.cc"
yy130:
	++YYCURSOR;
#line 383 "../src/parse/lex.re"
	{
					yylval.regexp = mkDot();
					return REGEXP;
				}
#line 805 "src/parse/lex.cc"
yy132:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy191;
	if (yych == '/') goto yy193;
	goto yy125;
yy133:
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy165;
yy134:
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy187;
	goto yy113;
yy135:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '!') goto yy178;
	if (yych == '>') goto yy180;
	goto yy125;
yy136:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '^') goto yy176;
#line 272 "../src/parse/lex.re"
	{
		std::vector<uint32_t> cpoints;
		lex_cpoints (']', cpoints);
		yylval.regexp = cpoint_class (cpoints, false);
		return REGEXP;
	}
#line 836 "src/parse/lex.cc"
yy138:
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy166;
	goto yy165;
yy139:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 16) {
		goto yy141;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy146;
		if (yych >= 'A') goto yy144;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy144;
		} else {
			if (yych <= '`') goto yy140;
			if (yych <= 'z') goto yy144;
		}
	}
yy140:
#line 228 "../src/parse/lex.re"
	{
					depth = 1;
					goto code;
				}
#line 865 "src/parse/lex.cc"
yy141:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy141;
	}
	if (yych <= '^') {
		if (yych <= ',') {
			if (yych >= ',') goto yy152;
		} else {
			if (yych <= '@') goto yy143;
			if (yych <= 'Z') goto yy144;
		}
	} else {
		if (yych <= 'z') {
			if (yych != '`') goto yy144;
		} else {
			if (yych == '}') goto yy150;
		}
	}
yy143:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy117;
		} else {
			goto yy125;
		}
	} else {
		if (yyaccept == 2) {
			goto yy140;
		} else {
			goto yy147;
		}
	}
yy144:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy144;
	}
	if (yych == '}') goto yy148;
	goto yy143;
yy146:
	++YYCURSOR;
yy147:
#line 336 "../src/parse/lex.re"
	{
					fatal("illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
				}
#line 918 "src/parse/lex.cc"
yy148:
	++YYCURSOR;
#line 340 "../src/parse/lex.re"
	{
					if (!opts->FFlag) {
						fatal("curly braces for names only allowed with -F switch");
					}
					yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
					return ID;
				}
#line 929 "src/parse/lex.cc"
yy150:
	++YYCURSOR;
#line 305 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.extop.min))
					{
						fatal ("repetition count overflow");
					}
					yylval.extop.max = yylval.extop.min;
					return CLOSESIZE;
				}
#line 941 "src/parse/lex.cc"
yy152:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy147;
	if (yych <= '9') goto yy155;
	if (yych != '}') goto yy147;
	++YYCURSOR;
#line 327 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					yylval.extop.max = UINT32_MAX;
					return CLOSESIZE;
				}
#line 958 "src/parse/lex.cc"
yy155:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy143;
	if (yych <= '9') goto yy155;
	if (yych != '}') goto yy143;
	++YYCURSOR;
#line 314 "../src/parse/lex.re"
	{
					const char * p = strchr (tok, ',');
					if (!s_to_u32_unsafe (tok + 1, p, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.extop.max))
					{
						fatal ("repetition upper bound overflow");
					}
					return CLOSESIZE;
				}
#line 980 "src/parse/lex.cc"
yy159:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 368 "../src/parse/lex.re"
	{
					if (!opts->FFlag) {
						yylval.str = new std::string (tok, tok_len ());
						return ID;
					} else {
						std::vector<uint32_t> cpoints;
						for (char * p = tok; p < cur; ++p)
						{
							cpoints.push_back (static_cast<uint8_t> (*p));
						}
						yylval.regexp = cpoint_string (cpoints, opts->bCaseInsensitive || opts->bCaseInverted);
						return REGEXP;
					}
				}
#line 999 "src/parse/lex.cc"
yy161:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy174;
yy162:
	++YYCURSOR;
yy163:
	YYCURSOR = YYCTXMARKER;
#line 363 "../src/parse/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					return ID;
				}
#line 1012 "src/parse/lex.cc"
yy164:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
yy165:
	if (yych <= '9') {
		if (yych <= ' ') {
			if (yych == '\t') goto yy161;
			if (yych <= 0x1F) goto yy159;
			goto yy161;
		} else {
			if (yych == ',') goto yy162;
			if (yych <= '/') goto yy159;
			goto yy164;
		}
	} else {
		if (yych <= 'Z') {
			if (yych <= '<') goto yy159;
			if (yych <= '>') goto yy162;
			if (yych <= '@') goto yy159;
			goto yy164;
		} else {
			if (yych <= '_') {
				if (yych <= '^') goto yy159;
				goto yy164;
			} else {
				if (yych <= '`') goto yy159;
				if (yych <= 'z') goto yy164;
				goto yy159;
			}
		}
	}
yy166:
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy165;
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy165;
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy165;
	++YYCURSOR;
#line 348 "../src/parse/lex.re"
	{ lex_conf (); return CONF; }
#line 1059 "src/parse/lex.cc"
yy171:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 350 "../src/parse/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					if (opts->FFlag)
					{
						lexer_state = LEX_FLEX_NAME;
						return FID;
					}
					else
					{
						return ID;
					}
				}
#line 1076 "src/parse/lex.cc"
yy173:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy174:
	if (yybm[0+yych] & 64) {
		goto yy173;
	}
	if (yych == ',') goto yy175;
	if (yych <= '<') goto yy171;
	if (yych >= '?') goto yy171;
yy175:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy163;
yy176:
	++YYCURSOR;
#line 279 "../src/parse/lex.re"
	{
		std::vector<uint32_t> cpoints;
		lex_cpoints (']', cpoints);
		yylval.regexp = cpoint_class (cpoints, true);
		return REGEXP;
	}
#line 1100 "src/parse/lex.cc"
yy178:
	++YYCURSOR;
#line 289 "../src/parse/lex.re"
	{
					return SETUP;
				}
#line 1107 "src/parse/lex.cc"
yy180:
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy182;
yy181:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
yy182:
	if (yych <= '9') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy143;
			goto yy181;
		} else {
			if (yych == ' ') goto yy181;
			goto yy143;
		}
	} else {
		if (yych <= '=') {
			if (yych <= ':') goto yy186;
			if (yych <= '<') goto yy143;
			goto yy185;
		} else {
			if (yych != '{') goto yy143;
		}
	}
yy183:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 286 "../src/parse/lex.re"
	{
					return NOCOND;
				}
#line 1141 "src/parse/lex.cc"
yy185:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy183;
	goto yy143;
yy186:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy183;
	goto yy143;
yy187:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '>') goto yy189;
#line 237 "../src/parse/lex.re"
	{
					tok += 2; /* skip ":=" */
					depth = 0;
					goto code;
				}
#line 1159 "src/parse/lex.cc"
yy189:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 233 "../src/parse/lex.re"
	{
					return *tok;
				}
#line 1167 "src/parse/lex.cc"
yy191:
	++YYCURSOR;
#line 246 "../src/parse/lex.re"
	{
					depth = 1;
					goto comment;
				}
#line 1175 "src/parse/lex.cc"
yy193:
	++YYCURSOR;
#line 243 "../src/parse/lex.re"
	{
				goto nextLine;
			}
#line 1182 "src/parse/lex.cc"
yy195:
	++YYCURSOR;
#line 252 "../src/parse/lex.re"
	{
					tok = cur;
					return 0;
				}
#line 1190 "src/parse/lex.cc"
yy197:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych != '\t') goto yy117;
	} else {
		if (yych <= ' ') goto yy198;
		if (yych == '#') goto yy200;
		goto yy117;
	}
yy198:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy198;
		goto yy143;
	} else {
		if (yych <= ' ') goto yy198;
		if (yych != '#') goto yy143;
	}
yy200:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy200;
		goto yy143;
	} else {
		if (yych <= ' ') goto yy200;
		if (yych != 'l') goto yy143;
	}
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy143;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy143;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy143;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy207;
	if (yych <= '9') goto yy143;
	goto yy207;
yy206:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy207:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy206;
		goto yy143;
	} else {
		if (yych <= ' ') goto yy206;
		if (yych <= '0') goto yy143;
		if (yych >= ':') goto yy143;
	}
yy208:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy143;
		} else {
			if (yych <= '\n') goto yy212;
			if (yych <= '\f') goto yy143;
			goto yy214;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy143;
		} else {
			if (yych <= '/') goto yy143;
			if (yych <= '9') goto yy208;
			goto yy143;
		}
	}
yy210:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy210;
		goto yy143;
	} else {
		if (yych <= ' ') goto yy210;
		if (yych == '"') goto yy215;
		goto yy143;
	}
yy212:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 392 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto scan;
				}
#line 1288 "src/parse/lex.cc"
yy214:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy212;
	goto yy143;
yy215:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy215;
	}
	if (yych <= '\n') goto yy143;
	if (yych <= '"') goto yy218;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy143;
	goto yy215;
yy218:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy212;
	if (yych == '\r') goto yy214;
	goto yy143;
yy219:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy220:
	if (yych == '\t') goto yy219;
	if (yych == ' ') goto yy219;
	goto yy115;
}
#line 408 "../src/parse/lex.re"


flex_name:

#line 1326 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy225;
	if (yych == '\r') goto yy227;
	++YYCURSOR;
yy224:
#line 419 "../src/parse/lex.re"
	{
		YYCURSOR = tok;
		goto start;
	}
#line 1340 "src/parse/lex.cc"
yy225:
	++YYCURSOR;
yy226:
#line 413 "../src/parse/lex.re"
	{
		YYCURSOR = tok;
		lexer_state = LEX_NORMAL;
		return FID_END;
	}
#line 1350 "src/parse/lex.cc"
yy227:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '\n') goto yy224;
	++YYCURSOR;
	yych = (YYCTYPE)*YYCURSOR;
	goto yy226;
}
#line 423 "../src/parse/lex.re"


code:

#line 1363 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48, 112,   0,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		112,  48,  16,  48,  48,  48,  48,  32, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		176, 176, 176, 176, 176, 176, 176, 176, 
		176, 176,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,   0,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy231;
			if (yych <= '\t') goto yy233;
			goto yy235;
		} else {
			if (yych == '"') goto yy237;
			goto yy233;
		}
	} else {
		if (yych <= '{') {
			if (yych <= '\'') goto yy238;
			if (yych <= 'z') goto yy233;
			goto yy239;
		} else {
			if (yych == '}') goto yy241;
			goto yy233;
		}
	}
yy231:
	++YYCURSOR;
#line 486 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						if (depth)
						{
							fatal("missing '}'");
						}
						return 0;
					}
					goto code;
				}
#line 1436 "src/parse/lex.cc"
yy233:
	++YYCURSOR;
yy234:
#line 500 "../src/parse/lex.re"
	{
					goto code;
				}
#line 1444 "src/parse/lex.cc"
yy235:
	YYCTXMARKER = YYCURSOR + 1;
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy252;
		} else {
			if (yych <= '\n') goto yy254;
			if (yych >= '\r') goto yy254;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy252;
		} else {
			if (yych == '#') goto yy255;
		}
	}
yy236:
#line 467 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						tok += strspn(tok, " \t\r\n");
						while (cur > tok && strchr(" \t\r\n", cur[-1]))
						{
							--cur;
						}
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return CODE;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1484 "src/parse/lex.cc"
yy237:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy234;
	goto yy250;
yy238:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy234;
	goto yy244;
yy239:
	++YYCURSOR;
#line 439 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else
					{
						++depth;
					}
					goto code;
				}
#line 1509 "src/parse/lex.cc"
yy241:
	++YYCURSOR;
#line 427 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else if (--depth == 0)
					{
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return CODE;
					}
					goto code;
				}
#line 1525 "src/parse/lex.cc"
yy243:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy244:
	if (yybm[0+yych] & 16) {
		goto yy243;
	}
	if (yych <= '\n') goto yy245;
	if (yych <= '\'') goto yy247;
	goto yy246;
yy245:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy236;
		} else {
			goto yy234;
		}
	} else {
		goto yy253;
	}
yy246:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy245;
	goto yy243;
yy247:
	++YYCURSOR;
#line 497 "../src/parse/lex.re"
	{
					goto code;
				}
#line 1560 "src/parse/lex.cc"
yy249:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy250:
	if (yybm[0+yych] & 32) {
		goto yy249;
	}
	if (yych <= '\n') goto yy245;
	if (yych <= '"') goto yy247;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy245;
	goto yy249;
yy252:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy274;
	} else {
		if (yych <= ' ') goto yy274;
		if (yych == '#') goto yy255;
	}
yy253:
	YYCURSOR = YYCTXMARKER;
#line 454 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						goto code;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1601 "src/parse/lex.cc"
yy254:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy253;
yy255:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy255;
	}
	if (yych != 'l') goto yy245;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy245;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy245;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy245;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy262;
	if (yych <= '9') goto yy245;
	goto yy262;
yy261:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy262:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy261;
		goto yy245;
	} else {
		if (yych <= ' ') goto yy261;
		if (yych <= '0') goto yy245;
		if (yych >= ':') goto yy245;
	}
yy263:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy263;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy245;
		if (yych <= '\t') goto yy265;
		if (yych <= '\n') goto yy267;
		goto yy245;
	} else {
		if (yych <= '\r') goto yy269;
		if (yych != ' ') goto yy245;
	}
yy265:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy265;
		goto yy245;
	} else {
		if (yych <= ' ') goto yy265;
		if (yych == '"') goto yy270;
		goto yy245;
	}
yy267:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 450 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto code;
				}
#line 1673 "src/parse/lex.cc"
yy269:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy267;
	goto yy245;
yy270:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy245;
		goto yy270;
	} else {
		if (yych <= '"') goto yy273;
		if (yych != '\\') goto yy270;
	}
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy245;
	goto yy270;
yy273:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy267;
	if (yych == '\r') goto yy269;
	goto yy245;
yy274:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy274;
		goto yy245;
	} else {
		if (yych <= ' ') goto yy274;
		if (yych == '#') goto yy255;
		goto yy245;
	}
}
#line 503 "../src/parse/lex.re"


comment:

#line 1717 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ')') {
		if (yych == '\n') goto yy280;
	} else {
		if (yych <= '*') goto yy282;
		if (yych == '/') goto yy283;
	}
	++YYCURSOR;
yy279:
#line 535 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					goto comment;
				}
#line 1772 "src/parse/lex.cc"
yy280:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy288;
	}
	if (yych == '#') goto yy291;
yy281:
#line 526 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					tok = pos = cur;
					cline++;
					goto comment;
				}
#line 1790 "src/parse/lex.cc"
yy282:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy286;
	goto yy279;
yy283:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '*') goto yy279;
	++YYCURSOR;
#line 517 "../src/parse/lex.re"
	{
					++depth;
					fatal("ambiguous /* found");
					goto comment;
				}
#line 1805 "src/parse/lex.cc"
yy286:
	++YYCURSOR;
#line 507 "../src/parse/lex.re"
	{
					if (--depth == 0)
					{
						goto scan;
					}
					else
					{
						goto comment;
					}
				}
#line 1819 "src/parse/lex.cc"
yy288:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy288;
	}
	if (yych == '#') goto yy291;
yy290:
	YYCURSOR = YYMARKER;
	goto yy281;
yy291:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy291;
		goto yy290;
	} else {
		if (yych <= ' ') goto yy291;
		if (yych != 'l') goto yy290;
	}
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy290;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy290;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy290;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy298;
	if (yych <= '9') goto yy290;
	goto yy298;
yy297:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy298:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy297;
		goto yy290;
	} else {
		if (yych <= ' ') goto yy297;
		if (yych <= '0') goto yy290;
		if (yych >= ':') goto yy290;
	}
yy299:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy299;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy290;
		if (yych <= '\t') goto yy301;
		if (yych <= '\n') goto yy303;
		goto yy290;
	} else {
		if (yych <= '\r') goto yy305;
		if (yych != ' ') goto yy290;
	}
yy301:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy301;
		goto yy290;
	} else {
		if (yych <= ' ') goto yy301;
		if (yych == '"') goto yy306;
		goto yy290;
	}
yy303:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 522 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto comment;
				}
#line 1902 "src/parse/lex.cc"
yy305:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy303;
	goto yy290;
yy306:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy306;
	}
	if (yych <= '\n') goto yy290;
	if (yych <= '"') goto yy309;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy290;
	goto yy306;
yy309:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '\n') goto yy303;
	if (yych == '\r') goto yy305;
	goto yy290;
}
#line 542 "../src/parse/lex.re"


nextLine:

#line 1932 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy314;
	++YYCURSOR;
#line 553 "../src/parse/lex.re"
	{  if(cur == eof) {
                  return 0;
               }
               goto nextLine;
            }
#line 1945 "src/parse/lex.cc"
yy314:
	++YYCURSOR;
#line 546 "../src/parse/lex.re"
	{ if(cur == eof) {
                  return 0;
               }
               tok = pos = cur;
               cline++;
               goto scan;
            }
#line 1956 "src/parse/lex.cc"
}
#line 558 "../src/parse/lex.re"

}

static void escape (std::string & dest, const std::string & src)
{
	dest = src;
	size_t l = dest.length();
	for (size_t p = 0; p < l; ++p)
	{
		if (dest[p] == '\\')
		{
			dest.insert(++p, "\\");
			++l;
		}
	}
}

void Scanner::lex_cpoints (char quote, std::vector<uint32_t> & cs)
{
	for (;;)
	{
		tok = cur;
	
#line 1982 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy320;
	if (yych == '\\') goto yy322;
	++YYCURSOR;
#line 600 "../src/parse/lex.re"
	{
			const char c = tok[0];
			if (c == quote)
			{
				return;
			}
			else
			{
				cs.push_back (static_cast<uint8_t> (c));
				continue;
			}
		}
#line 2004 "src/parse/lex.cc"
yy320:
	++YYCURSOR;
#line 581 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error"); }
#line 2009 "src/parse/lex.cc"
yy322:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= 'b') {
		if (yych <= 'T') {
			if (yych <= '/') {
				if (yych != '\n') goto yy324;
			} else {
				if (yych <= '3') goto yy326;
				if (yych <= '7') goto yy328;
				goto yy324;
			}
		} else {
			if (yych <= 'X') {
				if (yych <= 'U') goto yy329;
				if (yych <= 'W') goto yy324;
				goto yy331;
			} else {
				if (yych == '\\') goto yy332;
				if (yych <= '`') goto yy324;
				goto yy332;
			}
		}
	} else {
		if (yych <= 'r') {
			if (yych <= 'm') {
				if (yych == 'f') goto yy332;
				goto yy324;
			} else {
				if (yych <= 'n') goto yy332;
				if (yych <= 'q') goto yy324;
				goto yy332;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 's') goto yy324;
				if (yych <= 't') goto yy332;
				goto yy331;
			} else {
				if (yych <= 'v') goto yy332;
				if (yych == 'x') goto yy334;
				goto yy324;
			}
		}
	}
#line 584 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in escape sequence"); }
#line 2056 "src/parse/lex.cc"
yy324:
	++YYCURSOR;
#line 590 "../src/parse/lex.re"
	{
			const char c = tok[1];
			if (c != quote)
			{
				warn.useless_escape (tline, tok - pos, c);
			}
			cs.push_back (static_cast<uint8_t> (c));
			continue;
		}
#line 2069 "src/parse/lex.cc"
yy326:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy327;
	if (yych <= '7') goto yy349;
yy327:
#line 583 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in octal escape sequence"); }
#line 2078 "src/parse/lex.cc"
yy328:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy327;
yy329:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy330;
		if (yych <= '9') goto yy342;
	} else {
		if (yych <= 'F') goto yy342;
		if (yych <= '`') goto yy330;
		if (yych <= 'f') goto yy342;
	}
yy330:
#line 582 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2096 "src/parse/lex.cc"
yy331:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy330;
		if (yych <= '9') goto yy339;
		goto yy330;
	} else {
		if (yych <= 'F') goto yy339;
		if (yych <= '`') goto yy330;
		if (yych <= 'f') goto yy339;
		goto yy330;
	}
yy332:
	++YYCURSOR;
#line 588 "../src/parse/lex.re"
	{ cs.push_back (unesc_simple (tok));   continue; }
#line 2114 "src/parse/lex.cc"
yy334:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy330;
		if (yych >= ':') goto yy330;
	} else {
		if (yych <= 'F') goto yy335;
		if (yych <= '`') goto yy330;
		if (yych >= 'g') goto yy330;
	}
yy335:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy336;
		if (yych <= '9') goto yy337;
	} else {
		if (yych <= 'F') goto yy337;
		if (yych <= '`') goto yy336;
		if (yych <= 'f') goto yy337;
	}
yy336:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy327;
	} else {
		goto yy330;
	}
yy337:
	++YYCURSOR;
#line 586 "../src/parse/lex.re"
	{ cs.push_back (unesc_hex (tok, cur)); continue; }
#line 2147 "src/parse/lex.cc"
yy339:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy336;
		if (yych >= ':') goto yy336;
	} else {
		if (yych <= 'F') goto yy340;
		if (yych <= '`') goto yy336;
		if (yych >= 'g') goto yy336;
	}
yy340:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy336;
		if (yych >= ':') goto yy336;
	} else {
		if (yych <= 'F') goto yy341;
		if (yych <= '`') goto yy336;
		if (yych >= 'g') goto yy336;
	}
yy341:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy336;
		if (yych <= '9') goto yy337;
		goto yy336;
	} else {
		if (yych <= 'F') goto yy337;
		if (yych <= '`') goto yy336;
		if (yych <= 'f') goto yy337;
		goto yy336;
	}
yy342:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy336;
		if (yych >= ':') goto yy336;
	} else {
		if (yych <= 'F') goto yy343;
		if (yych <= '`') goto yy336;
		if (yych >= 'g') goto yy336;
	}
yy343:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy336;
		if (yych >= ':') goto yy336;
	} else {
		if (yych <= 'F') goto yy344;
		if (yych <= '`') goto yy336;
		if (yych >= 'g') goto yy336;
	}
yy344:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy336;
		if (yych >= ':') goto yy336;
	} else {
		if (yych <= 'F') goto yy345;
		if (yych <= '`') goto yy336;
		if (yych >= 'g') goto yy336;
	}
yy345:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy336;
		if (yych >= ':') goto yy336;
	} else {
		if (yych <= 'F') goto yy346;
		if (yych <= '`') goto yy336;
		if (yych >= 'g') goto yy336;
	}
yy346:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy336;
		if (yych >= ':') goto yy336;
	} else {
		if (yych <= 'F') goto yy347;
		if (yych <= '`') goto yy336;
		if (yych >= 'g') goto yy336;
	}
yy347:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy336;
		if (yych >= ':') goto yy336;
	} else {
		if (yych <= 'F') goto yy348;
		if (yych <= '`') goto yy336;
		if (yych >= 'g') goto yy336;
	}
yy348:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy336;
		if (yych <= '9') goto yy337;
		goto yy336;
	} else {
		if (yych <= 'F') goto yy337;
		if (yych <= '`') goto yy336;
		if (yych <= 'f') goto yy337;
		goto yy336;
	}
yy349:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy336;
	if (yych >= '8') goto yy336;
	++YYCURSOR;
#line 587 "../src/parse/lex.re"
	{ cs.push_back (unesc_oct (tok, cur)); continue; }
#line 2259 "src/parse/lex.cc"
}
#line 612 "../src/parse/lex.re"

	}
}

void Scanner::set_sourceline ()
{
sourceline:
	tok = cur;

#line 2271 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy356;
	} else {
		if (yych <= '"') goto yy358;
		if (yych <= '0') goto yy354;
		if (yych <= '9') goto yy359;
	}
yy354:
	++YYCURSOR;
yy355:
#line 644 "../src/parse/lex.re"
	{
  					goto sourceline;
  				}
#line 2324 "src/parse/lex.cc"
yy356:
	++YYCURSOR;
#line 632 "../src/parse/lex.re"
	{
  					if (cur == eof)
  					{
						--cur; 
					}
			  		else
			  		{
			  			pos = cur; 
			  		}
			  		tok = cur;
			  		return; 
				}
#line 2340 "src/parse/lex.cc"
yy358:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy355;
	goto yy364;
yy359:
	++YYCURSOR;
	yych = (YYCTYPE)*YYCURSOR;
	goto yy362;
yy360:
#line 621 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok, cur, cline))
					{
						fatal ("line number overflow");
					}
					goto sourceline; 
				}
#line 2358 "src/parse/lex.cc"
yy361:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy362:
	if (yybm[0+yych] & 64) {
		goto yy361;
	}
	goto yy360;
yy363:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy364:
	if (yybm[0+yych] & 128) {
		goto yy363;
	}
	if (yych <= '\n') goto yy365;
	if (yych <= '"') goto yy367;
	goto yy366;
yy365:
	YYCURSOR = YYMARKER;
	goto yy355;
yy366:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy365;
	goto yy363;
yy367:
	++YYCURSOR;
#line 628 "../src/parse/lex.re"
	{
					escape (in.file_name, std::string (tok + 1, tok_len () - 2)); // -2 to omit quotes
			  		goto sourceline; 
				}
#line 2395 "src/parse/lex.cc"
}
#line 647 "../src/parse/lex.re"

}

} // end namespace re2c
