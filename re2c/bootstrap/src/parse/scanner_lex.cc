/* Generated by re2c 0.14.3 on Sun Aug 16 20:20:10 2015 */
#line 1 "../src/parse/scanner_lex.re"
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <sstream>

#include "src/ir/dfa/dfa.h"
#include "src/globals.h"
#include "src/parse/extop.h"
#include "src/parse/parser.h"
#include "src/parse/scanner.h"
#include "y.tab.h"
#include "src/util/s_to_n32_unsafe.h"

extern YYSTYPE yylval;

#define	YYCTYPE		unsigned char
#define	YYCURSOR	cur
#define	YYLIMIT		lim
#define	YYMARKER	ptr
#define	YYCTXMARKER ctx
#define	YYFILL(n)	{ fill (n); }

namespace re2c
{

// source code is in ASCII: pointers have type 'char *'
// but re2c makes an implicit assumption that YYCTYPE is unsigned
// when it generates comparisons
#line 31 "../src/parse/scanner_lex.re"


#line 53 "../src/parse/scanner_lex.re"


Scanner::ParseMode Scanner::echo()
{
	bool ignore_eoc = false;
	int  ignore_cnt = 0;

	if (eof && cur == eof) // Catch EOF
	{
		return Stop;
	}

	tok = cur;
echo:

#line 51 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};

	if ((YYLIMIT - YYCURSOR) < 16) YYFILL(16);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '%') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '$') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '*') {
			if (yych <= ')') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 196 "../src/parse/scanner_lex.re"
	{
					if (!(ignore_eoc || DFlag || flag_skeleton))
					{
						out.write(tok, tok_len () - 1);
						// -1 so we don't write out the \0
					}
					if(cur == eof)
					{
						return Stop;
					}
				}
#line 122 "src/parse/scanner_lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 207 "../src/parse/scanner_lex.re"
	{
					goto echo;
				}
#line 130 "src/parse/scanner_lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy89;
	}
	if (yych == '#') goto yy91;
yy7:
#line 183 "../src/parse/scanner_lex.re"
	{
					if (ignore_eoc)
					{
						ignore_cnt++;
					}
					else if (!(DFlag || flag_skeleton))
					{
						out.write(tok, tok_len ());
					}
					tok = pos = cur;
					cline++;
					goto echo;
				}
#line 153 "src/parse/scanner_lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy32;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy84;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych != '*') goto yy5;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy13;
yy12:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy7;
		} else {
			goto yy5;
		}
	} else {
		goto yy85;
	}
yy13:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy16;
	case 'i':	goto yy15;
	case 'm':	goto yy17;
	case 'r':	goto yy19;
	case 't':	goto yy14;
	case 'u':	goto yy18;
	default:	goto yy12;
	}
yy14:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy74;
	goto yy12;
yy15:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy63;
	goto yy12;
yy16:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy50;
	goto yy12;
yy17:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy42;
	goto yy12;
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy34;
	goto yy12;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy20;
	if (yych == 'u') goto yy21;
	goto yy12;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy31;
	goto yy12;
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'l') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 's') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 84 "../src/parse/scanner_lex.re"
	{
					if (rFlag)
					{
						mapCodeName.clear();
					}
					else
					{
						fatal("found 'rules:re2c' block without -r flag");
					}
					tok = cur;
					return Rules;
				}
#line 250 "src/parse/scanner_lex.cc"
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
yy32:
	++YYCURSOR;
#line 69 "../src/parse/scanner_lex.re"
	{
					if (rFlag)
					{
						fatal("found standard 're2c' block while using -r flag");
					}
					if (!(DFlag || flag_skeleton))
					{
						const size_t lexeme_len = cur[-1] == '{'
							? sizeof ("%{") - 1
							: sizeof ("/*!re2c") - 1;
						out.write(tok, tok_len () - lexeme_len);
					}
					tok = cur;
					return Parse;
				}
#line 272 "src/parse/scanner_lex.cc"
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 96 "../src/parse/scanner_lex.re"
	{
					if (!rFlag)
					{
						fatal("found 'use:re2c' block without -r flag");
					}
					reuse();
					if (!(DFlag || flag_skeleton))
					{
						const size_t lexeme_len = sizeof ("/*!use:re2c") - 1;
						out.write(tok, tok_len () - lexeme_len);
					}
					tok = cur;
					return Reuse;
				}
#line 302 "src/parse/scanner_lex.cc"
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'x') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 110 "../src/parse/scanner_lex.re"
	{
					if (!DFlag)
					{
						out.insert_yymaxfill ();
					}
					tok = pos = cur;
					ignore_eoc = true;
					goto echo;
				}
#line 327 "src/parse/scanner_lex.cc"
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 's') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'a') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 119 "../src/parse/scanner_lex.re"
	{
					tok = pos = cur;
					out.insert_state_goto (topIndent);
					ignore_eoc = true;
					goto echo;
				}
#line 359 "src/parse/scanner_lex.cc"
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 125 "../src/parse/scanner_lex.re"
	{
					tok = pos = cur;
					ignore_eoc = true;
					goto echo;
				}
#line 386 "src/parse/scanner_lex.cc"
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'p') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 's') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 130 "../src/parse/scanner_lex.re"
	{
					tok = pos = cur;
					ignore_eoc = true;
					if (!DFlag)
					{
						out.insert_line_info ();
						out << "\n";
						out.insert_types ();
						out << "\n";
						out.write_line_info (cline, get_fname ().c_str ());
					}
					goto echo;
				}
#line 419 "src/parse/scanner_lex.cc"
yy84:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy87;
	if (yych == '\r') goto yy86;
yy85:
#line 161 "../src/parse/scanner_lex.re"
	{
					if (ignore_eoc)
					{
						if (ignore_cnt)
						{
							out << "\n";
							out.write_line_info (cline, get_fname ().c_str ());
						}
						ignore_eoc = false;
						ignore_cnt = 0;
					}
					else if (!(DFlag || flag_skeleton))
					{
						out.write(tok, tok_len ());
					}
					tok = pos = cur;
					goto echo;
				}
#line 445 "src/parse/scanner_lex.cc"
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '\n') goto yy12;
yy87:
	++YYCURSOR;
#line 143 "../src/parse/scanner_lex.re"
	{
					cline++;
					if (ignore_eoc)
					{
						if (ignore_cnt)
						{
							out.write_line_info (cline, get_fname ().c_str ());
						}
						ignore_eoc = false;
						ignore_cnt = 0;
					}
					else if (!(DFlag || flag_skeleton))
					{
						out.write(tok, tok_len ());
					}
					tok = pos = cur;
					goto echo;
				}
#line 470 "src/parse/scanner_lex.cc"
yy89:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy89;
	}
	if (yych != '#') goto yy12;
yy91:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy91;
		goto yy12;
	} else {
		if (yych <= ' ') goto yy91;
		if (yych != 'l') goto yy12;
	}
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy98;
	if (yych <= '9') goto yy12;
	goto yy98;
yy97:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy98:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy97;
		goto yy12;
	} else {
		if (yych <= ' ') goto yy97;
		if (yych <= '0') goto yy12;
		if (yych >= ':') goto yy12;
	}
yy99:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy99;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy12;
		if (yych <= '\t') goto yy101;
		if (yych <= '\n') goto yy103;
		goto yy12;
	} else {
		if (yych <= '\r') goto yy105;
		if (yych != ' ') goto yy12;
	}
yy101:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy101;
		goto yy12;
	} else {
		if (yych <= ' ') goto yy101;
		if (yych == '"') goto yy106;
		goto yy12;
	}
yy103:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 179 "../src/parse/scanner_lex.re"
	{
					set_sourceline ();
					goto echo;
				}
#line 550 "src/parse/scanner_lex.cc"
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy103;
	goto yy12;
yy106:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy106;
	}
	if (yych <= '\n') goto yy12;
	if (yych <= '"') goto yy109;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy12;
	goto yy106;
yy109:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '\n') goto yy103;
	if (yych == '\r') goto yy105;
	goto yy12;
}
#line 210 "../src/parse/scanner_lex.re"

}

int Scanner::scan()
{
	uint32_t depth;

scan:
	tchar = cur - pos;
	tline = cline;
	tok = cur;
	switch (lexer_state)
	{
		case LEX_NORMAL:       goto start;
		case LEX_CONFIG:       goto config;
		case LEX_CONFIG_VALUE: goto value;
		case LEX_FLEX_NAME:    goto flex_name;
	}

start:

#line 597 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 240,   0, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		240, 224,  96, 224, 224, 224, 224, 160, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		236, 236, 236, 236, 236, 236, 236, 236, 
		236, 236, 224, 224, 224, 224, 224, 224, 
		224, 232, 232, 232, 232, 232, 232, 232, 
		232, 232, 232, 232, 232, 232, 232, 232, 
		232, 232, 232, 232, 232, 232, 232, 232, 
		232, 232, 232, 224,   0, 192, 224, 232, 
		224, 232, 232, 232, 232, 232, 232, 232, 
		232, 232, 232, 232, 232, 232, 232, 232, 
		232, 232, 232, 232, 232, 232, 232, 232, 
		232, 232, 232, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
	};
	if ((YYLIMIT - YYCURSOR) < 6) YYFILL(6);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '.') {
		if (yych <= '"') {
			if (yych <= '\f') {
				if (yych <= 0x08) goto yy112;
				if (yych <= '\t') goto yy114;
				if (yych <= '\n') goto yy116;
			} else {
				if (yych <= 0x1F) {
					if (yych <= '\r') goto yy118;
				} else {
					if (yych <= ' ') goto yy114;
					if (yych >= '"') goto yy119;
				}
			}
		} else {
			if (yych <= ')') {
				if (yych <= '%') {
					if (yych >= '%') goto yy121;
				} else {
					if (yych <= '&') goto yy112;
					if (yych <= '\'') goto yy122;
					goto yy124;
				}
			} else {
				if (yych <= '+') {
					if (yych <= '*') goto yy126;
					goto yy128;
				} else {
					if (yych <= ',') goto yy124;
					if (yych >= '.') goto yy130;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '<') {
				if (yych <= '9') {
					if (yych <= '/') goto yy132;
					goto yy133;
				} else {
					if (yych <= ':') goto yy134;
					if (yych <= ';') goto yy124;
					goto yy135;
				}
			} else {
				if (yych <= '?') {
					if (yych <= '>') goto yy124;
					goto yy128;
				} else {
					if (yych <= '@') goto yy112;
					if (yych <= 'Z') goto yy133;
					goto yy136;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy124;
				} else {
					if (yych != '`') goto yy133;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy138;
					goto yy133;
				} else {
					if (yych <= '{') goto yy139;
					if (yych <= '|') goto yy124;
				}
			}
		}
	}
yy112:
	++YYCURSOR;
yy113:
#line 436 "../src/parse/scanner_lex.re"
	{
					fatalf("unexpected character: '%c'", *tok);
					goto scan;
				}
#line 717 "src/parse/scanner_lex.cc"
yy114:
	++YYCURSOR;
	yych = (YYCTYPE)*YYCURSOR;
	goto yy244;
yy115:
#line 420 "../src/parse/scanner_lex.re"
	{
					goto scan;
				}
#line 727 "src/parse/scanner_lex.cc"
yy116:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy222;
	} else {
		if (yych <= ' ') goto yy222;
		if (yych == '#') goto yy224;
	}
yy117:
#line 429 "../src/parse/scanner_lex.re"
	{
					if (cur == eof) return 0;
					pos = cur;
					cline++;
					goto scan;
				}
#line 745 "src/parse/scanner_lex.cc"
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy221;
	goto yy113;
yy119:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych != '\n') goto yy217;
yy120:
#line 286 "../src/parse/scanner_lex.re"
	{
					fatal("unterminated string constant (missing \")");
				}
#line 759 "src/parse/scanner_lex.cc"
yy121:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy209;
	goto yy113;
yy122:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych != '\n') goto yy212;
yy123:
#line 289 "../src/parse/scanner_lex.re"
	{
					fatal("unterminated string constant (missing ')");
				}
#line 773 "src/parse/scanner_lex.cc"
yy124:
	++YYCURSOR;
yy125:
#line 315 "../src/parse/scanner_lex.re"
	{
					return *tok;
				}
#line 781 "src/parse/scanner_lex.cc"
yy126:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '/') goto yy209;
#line 319 "../src/parse/scanner_lex.re"
	{
					yylval.op = *tok;
					return STAR;
				}
#line 790 "src/parse/scanner_lex.cc"
yy128:
	++YYCURSOR;
#line 323 "../src/parse/scanner_lex.re"
	{
					yylval.op = *tok;
					return CLOSE;
				}
#line 798 "src/parse/scanner_lex.cc"
yy130:
	++YYCURSOR;
#line 415 "../src/parse/scanner_lex.re"
	{
					yylval.regexp = mkDot();
					return RANGE;
				}
#line 806 "src/parse/scanner_lex.cc"
yy132:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy205;
	if (yych == '/') goto yy207;
	goto yy125;
yy133:
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy165;
yy134:
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy201;
	goto yy113;
yy135:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '!') goto yy192;
	if (yych == '>') goto yy194;
	goto yy125;
yy136:
	yyaccept = 4;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy137;
	if (yych == '^') goto yy184;
	goto yy183;
yy137:
#line 305 "../src/parse/scanner_lex.re"
	{
					fatal("unterminated range (missing ])");
				}
#line 838 "src/parse/scanner_lex.cc"
yy138:
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy166;
	goto yy165;
yy139:
	yyaccept = 5;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 4) {
		goto yy141;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy146;
		if (yych >= 'A') goto yy144;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy144;
		} else {
			if (yych <= '`') goto yy140;
			if (yych <= 'z') goto yy144;
		}
	}
yy140:
#line 231 "../src/parse/scanner_lex.re"
	{
					depth = 1;
					goto code;
				}
#line 867 "src/parse/scanner_lex.cc"
yy141:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 4) {
		goto yy141;
	}
	if (yych <= '^') {
		if (yych <= ',') {
			if (yych >= ',') goto yy152;
		} else {
			if (yych <= '@') goto yy143;
			if (yych <= 'Z') goto yy144;
		}
	} else {
		if (yych <= 'z') {
			if (yych != '`') goto yy144;
		} else {
			if (yych == '}') goto yy150;
		}
	}
yy143:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy117;
			} else {
				goto yy120;
			}
		} else {
			if (yyaccept == 2) {
				goto yy123;
			} else {
				goto yy125;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy137;
			} else {
				goto yy140;
			}
		} else {
			if (yyaccept == 6) {
				goto yy147;
			} else {
				goto yy172;
			}
		}
	}
yy144:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 8) {
		goto yy144;
	}
	if (yych == '}') goto yy148;
	goto yy143;
yy146:
	++YYCURSOR;
yy147:
#line 359 "../src/parse/scanner_lex.re"
	{
					fatal("illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
				}
#line 936 "src/parse/scanner_lex.cc"
yy148:
	++YYCURSOR;
#line 363 "../src/parse/scanner_lex.re"
	{
					if (!FFlag) {
						fatal("curly braces for names only allowed with -F switch");
					}
					yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
					return ID;
				}
#line 947 "src/parse/scanner_lex.cc"
yy150:
	++YYCURSOR;
#line 328 "../src/parse/scanner_lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.extop.min))
					{
						fatal ("repetition count overflow");
					}
					yylval.extop.max = yylval.extop.min;
					return CLOSESIZE;
				}
#line 959 "src/parse/scanner_lex.cc"
yy152:
	yyaccept = 6;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy147;
	if (yych <= '9') goto yy155;
	if (yych != '}') goto yy147;
	++YYCURSOR;
#line 350 "../src/parse/scanner_lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					yylval.extop.max = UINT32_MAX;
					return CLOSESIZE;
				}
#line 976 "src/parse/scanner_lex.cc"
yy155:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy143;
	if (yych <= '9') goto yy155;
	if (yych != '}') goto yy143;
	++YYCURSOR;
#line 337 "../src/parse/scanner_lex.re"
	{
					const char * p = strchr (tok, ',');
					if (!s_to_u32_unsafe (tok + 1, p, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.extop.max))
					{
						fatal ("repetition upper bound overflow");
					}
					return CLOSESIZE;
				}
#line 998 "src/parse/scanner_lex.cc"
yy159:
	++YYCURSOR;
yy160:
	YYCURSOR = YYCTXMARKER;
#line 396 "../src/parse/scanner_lex.re"
	{
					if (!FFlag) {
						yylval.str = new std::string (tok, tok_len ());
						return ID;
					} else {
						/* Add one char in front and one behind instead of 's or "s */
						SubStr s (tok, tok_len ());
						if (bCaseInsensitive || bCaseInverted)
						{
							yylval.regexp = strToCaseInsensitiveRE (s);
						}
						else
						{
							yylval.regexp = strToRE (s);
						}
						return STRING;
					}
				}
#line 1022 "src/parse/scanner_lex.cc"
yy161:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy180;
yy162:
	++YYCURSOR;
yy163:
	YYCURSOR = YYCTXMARKER;
#line 391 "../src/parse/scanner_lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					return ID;
				}
#line 1035 "src/parse/scanner_lex.cc"
yy164:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
yy165:
	if (yych <= '9') {
		if (yych <= ' ') {
			if (yych == '\t') goto yy161;
			if (yych <= 0x1F) goto yy159;
			goto yy161;
		} else {
			if (yych == ',') goto yy162;
			if (yych <= '/') goto yy159;
			goto yy164;
		}
	} else {
		if (yych <= 'Z') {
			if (yych <= '<') goto yy159;
			if (yych <= '>') goto yy162;
			if (yych <= '@') goto yy159;
			goto yy164;
		} else {
			if (yych <= '_') {
				if (yych <= '^') goto yy159;
				goto yy164;
			} else {
				if (yych <= '`') goto yy159;
				if (yych <= 'z') goto yy164;
				goto yy159;
			}
		}
	}
yy166:
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '2') goto yy165;
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy165;
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ':') goto yy165;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy160;
		if (yych <= '9') goto yy170;
		if (yych <= '@') goto yy160;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy160;
		} else {
			if (yych <= '`') goto yy160;
			if (yych >= '{') goto yy160;
		}
	}
yy170:
	yyaccept = 7;
	YYMARKER = ++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '9') {
			if (yych >= '0') goto yy170;
		} else {
			if (yych <= ':') goto yy174;
			if (yych >= '@') goto yy173;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') goto yy170;
			if (yych >= '_') goto yy170;
		} else {
			if (yych <= '`') goto yy172;
			if (yych <= 'z') goto yy170;
		}
	}
yy172:
#line 371 "../src/parse/scanner_lex.re"
	{
					tok += 5; /* skip "re2c:" */
					lexer_state = LEX_CONFIG;
					yylval.str = new std::string (tok, tok_len ());
					return CONFIG;
				}
#line 1121 "src/parse/scanner_lex.cc"
yy173:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy143;
		if (yych <= '9') goto yy175;
		if (yych <= '@') goto yy143;
		goto yy175;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy143;
			goto yy175;
		} else {
			if (yych <= '`') goto yy143;
			if (yych <= 'z') goto yy175;
			goto yy143;
		}
	}
yy174:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy143;
		if (yych <= '9') goto yy170;
		if (yych <= '@') goto yy143;
		goto yy170;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy143;
			goto yy170;
		} else {
			if (yych <= '`') goto yy143;
			if (yych <= 'z') goto yy170;
			goto yy143;
		}
	}
yy175:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy172;
		if (yych <= '9') goto yy175;
		if (yych <= '@') goto yy172;
		goto yy175;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy172;
			goto yy175;
		} else {
			if (yych <= '`') goto yy172;
			if (yych <= 'z') goto yy175;
			goto yy172;
		}
	}
yy177:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 378 "../src/parse/scanner_lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					if (FFlag)
					{
						lexer_state = LEX_FLEX_NAME;
						return FID;
					}
					else
					{
						return ID;
					}
				}
#line 1193 "src/parse/scanner_lex.cc"
yy179:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy180:
	if (yybm[0+yych] & 16) {
		goto yy179;
	}
	if (yych == ',') goto yy181;
	if (yych <= '<') goto yy177;
	if (yych >= '?') goto yy177;
yy181:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy163;
yy182:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy183:
	if (yybm[0+yych] & 32) {
		goto yy182;
	}
	if (yych <= '\n') goto yy143;
	if (yych <= '\\') goto yy186;
	goto yy187;
yy184:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '[') {
		if (yych == '\n') goto yy143;
		goto yy184;
	} else {
		if (yych <= '\\') goto yy189;
		if (yych <= ']') goto yy190;
		goto yy184;
	}
yy186:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy143;
	goto yy182;
yy187:
	++YYCURSOR;
#line 299 "../src/parse/scanner_lex.re"
	{
					SubStr s (tok, tok_len ());
					yylval.regexp = ranToRE (s);
					return RANGE;
				}
#line 1245 "src/parse/scanner_lex.cc"
yy189:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy143;
	goto yy184;
yy190:
	++YYCURSOR;
#line 293 "../src/parse/scanner_lex.re"
	{
					SubStr s (tok, tok_len ());
					yylval.regexp = invToRE (s);
					return RANGE;
				}
#line 1260 "src/parse/scanner_lex.cc"
yy192:
	++YYCURSOR;
#line 312 "../src/parse/scanner_lex.re"
	{
					return SETUP;
				}
#line 1267 "src/parse/scanner_lex.cc"
yy194:
	YYCTXMARKER = YYCURSOR + 1;
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy196;
yy195:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
yy196:
	if (yych <= '9') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy143;
			goto yy195;
		} else {
			if (yych == ' ') goto yy195;
			goto yy143;
		}
	} else {
		if (yych <= '=') {
			if (yych <= ':') goto yy200;
			if (yych <= '<') goto yy143;
			goto yy199;
		} else {
			if (yych != '{') goto yy143;
		}
	}
yy197:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 309 "../src/parse/scanner_lex.re"
	{
					return NOCOND;
				}
#line 1301 "src/parse/scanner_lex.cc"
yy199:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy197;
	goto yy143;
yy200:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy197;
	goto yy143;
yy201:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '>') goto yy203;
#line 240 "../src/parse/scanner_lex.re"
	{
					tok += 2; /* skip ":=" */
					depth = 0;
					goto code;
				}
#line 1319 "src/parse/scanner_lex.cc"
yy203:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 236 "../src/parse/scanner_lex.re"
	{
					return *tok;
				}
#line 1327 "src/parse/scanner_lex.cc"
yy205:
	++YYCURSOR;
#line 249 "../src/parse/scanner_lex.re"
	{
					depth = 1;
					goto comment;
				}
#line 1335 "src/parse/scanner_lex.cc"
yy207:
	++YYCURSOR;
#line 246 "../src/parse/scanner_lex.re"
	{
				goto nextLine;
			}
#line 1342 "src/parse/scanner_lex.cc"
yy209:
	++YYCURSOR;
#line 255 "../src/parse/scanner_lex.re"
	{
					tok = cur;
					return 0;
				}
#line 1350 "src/parse/scanner_lex.cc"
yy211:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy212:
	if (yybm[0+yych] & 64) {
		goto yy211;
	}
	if (yych <= '\n') goto yy143;
	if (yych <= '\'') goto yy214;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy143;
	goto yy211;
yy214:
	++YYCURSOR;
#line 273 "../src/parse/scanner_lex.re"
	{
					SubStr s (tok + 1, tok_len () - 2); // -2 to omit quotes
					if (bCaseInverted)
					{
						yylval.regexp = strToRE (s);
					}
					else
					{
						yylval.regexp = strToCaseInsensitiveRE (s);
					}
					return STRING;
				}
#line 1381 "src/parse/scanner_lex.cc"
yy216:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy217:
	if (yybm[0+yych] & 128) {
		goto yy216;
	}
	if (yych <= '\n') goto yy143;
	if (yych <= '"') goto yy219;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy143;
	goto yy216;
yy219:
	++YYCURSOR;
#line 260 "../src/parse/scanner_lex.re"
	{
					SubStr s (tok + 1, tok_len () - 2); // -2 to omit quotes
					if (bCaseInsensitive || bCaseInverted)
					{
						yylval.regexp = strToCaseInsensitiveRE (s);
					}
					else
					{
						yylval.regexp = strToRE (s);
					}
					return STRING;
				}
#line 1412 "src/parse/scanner_lex.cc"
yy221:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych != '\t') goto yy117;
	} else {
		if (yych <= ' ') goto yy222;
		if (yych == '#') goto yy224;
		goto yy117;
	}
yy222:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy222;
		goto yy143;
	} else {
		if (yych <= ' ') goto yy222;
		if (yych != '#') goto yy143;
	}
yy224:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy224;
		goto yy143;
	} else {
		if (yych <= ' ') goto yy224;
		if (yych != 'l') goto yy143;
	}
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy143;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy143;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy143;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy231;
	if (yych <= '9') goto yy143;
	goto yy231;
yy230:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy231:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy230;
		goto yy143;
	} else {
		if (yych <= ' ') goto yy230;
		if (yych <= '0') goto yy143;
		if (yych >= ':') goto yy143;
	}
yy232:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy143;
		} else {
			if (yych <= '\n') goto yy236;
			if (yych <= '\f') goto yy143;
			goto yy238;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy143;
		} else {
			if (yych <= '/') goto yy143;
			if (yych <= '9') goto yy232;
			goto yy143;
		}
	}
yy234:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy234;
		goto yy143;
	} else {
		if (yych <= ' ') goto yy234;
		if (yych == '"') goto yy239;
		goto yy143;
	}
yy236:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 424 "../src/parse/scanner_lex.re"
	{
					set_sourceline ();
					goto scan;
				}
#line 1510 "src/parse/scanner_lex.cc"
yy238:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy236;
	goto yy143;
yy239:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy143;
		goto yy239;
	} else {
		if (yych <= '"') goto yy242;
		if (yych != '\\') goto yy239;
	}
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy143;
	goto yy239;
yy242:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy236;
	if (yych == '\r') goto yy238;
	goto yy143;
yy243:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy244:
	if (yych == '\t') goto yy243;
	if (yych == ' ') goto yy243;
	goto yy115;
}
#line 440 "../src/parse/scanner_lex.re"


flex_name:

#line 1550 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy249;
	if (yych == '\r') goto yy251;
	++YYCURSOR;
yy248:
#line 451 "../src/parse/scanner_lex.re"
	{
		YYCURSOR = tok;
		goto start;
	}
#line 1564 "src/parse/scanner_lex.cc"
yy249:
	++YYCURSOR;
yy250:
#line 445 "../src/parse/scanner_lex.re"
	{
		YYCURSOR = tok;
		lexer_state = LEX_NORMAL;
		return FID_END;
	}
#line 1574 "src/parse/scanner_lex.cc"
yy251:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '\n') goto yy248;
	++YYCURSOR;
	yych = (YYCTYPE)*YYCURSOR;
	goto yy250;
}
#line 455 "../src/parse/scanner_lex.re"


code:

#line 1587 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48, 112,   0,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		112,  48,  16,  48,  48,  48,  48,  32, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		176, 176, 176, 176, 176, 176, 176, 176, 
		176, 176,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,   0,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy255;
			if (yych <= '\t') goto yy257;
			goto yy259;
		} else {
			if (yych == '"') goto yy261;
			goto yy257;
		}
	} else {
		if (yych <= '{') {
			if (yych <= '\'') goto yy262;
			if (yych <= 'z') goto yy257;
			goto yy263;
		} else {
			if (yych == '}') goto yy265;
			goto yy257;
		}
	}
yy255:
	++YYCURSOR;
#line 518 "../src/parse/scanner_lex.re"
	{
					if (cur == eof)
					{
						if (depth)
						{
							fatal("missing '}'");
						}
						return 0;
					}
					goto code;
				}
#line 1660 "src/parse/scanner_lex.cc"
yy257:
	++YYCURSOR;
yy258:
#line 532 "../src/parse/scanner_lex.re"
	{
					goto code;
				}
#line 1668 "src/parse/scanner_lex.cc"
yy259:
	YYCTXMARKER = YYCURSOR + 1;
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy276;
		} else {
			if (yych <= '\n') goto yy278;
			if (yych >= '\r') goto yy278;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy276;
		} else {
			if (yych == '#') goto yy279;
		}
	}
yy260:
#line 499 "../src/parse/scanner_lex.re"
	{
					if (depth == 0)
					{
						tok += strspn(tok, " \t\r\n");
						while (cur > tok && strchr(" \t\r\n", cur[-1]))
						{
							--cur;
						}
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return CODE;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1708 "src/parse/scanner_lex.cc"
yy261:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy258;
	goto yy274;
yy262:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy258;
	goto yy268;
yy263:
	++YYCURSOR;
#line 471 "../src/parse/scanner_lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else
					{
						++depth;
					}
					goto code;
				}
#line 1733 "src/parse/scanner_lex.cc"
yy265:
	++YYCURSOR;
#line 459 "../src/parse/scanner_lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else if (--depth == 0)
					{
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return CODE;
					}
					goto code;
				}
#line 1749 "src/parse/scanner_lex.cc"
yy267:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy268:
	if (yybm[0+yych] & 16) {
		goto yy267;
	}
	if (yych <= '\n') goto yy269;
	if (yych <= '\'') goto yy271;
	goto yy270;
yy269:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy260;
		} else {
			goto yy258;
		}
	} else {
		goto yy277;
	}
yy270:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy269;
	goto yy267;
yy271:
	++YYCURSOR;
#line 529 "../src/parse/scanner_lex.re"
	{
					goto code;
				}
#line 1784 "src/parse/scanner_lex.cc"
yy273:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy274:
	if (yybm[0+yych] & 32) {
		goto yy273;
	}
	if (yych <= '\n') goto yy269;
	if (yych <= '"') goto yy271;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy269;
	goto yy273;
yy276:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy298;
	} else {
		if (yych <= ' ') goto yy298;
		if (yych == '#') goto yy279;
	}
yy277:
	YYCURSOR = YYCTXMARKER;
#line 486 "../src/parse/scanner_lex.re"
	{
					if (depth == 0)
					{
						goto code;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1825 "src/parse/scanner_lex.cc"
yy278:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy277;
yy279:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy279;
	}
	if (yych != 'l') goto yy269;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy269;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy269;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy269;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy286;
	if (yych <= '9') goto yy269;
	goto yy286;
yy285:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy286:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy285;
		goto yy269;
	} else {
		if (yych <= ' ') goto yy285;
		if (yych <= '0') goto yy269;
		if (yych >= ':') goto yy269;
	}
yy287:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy287;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy269;
		if (yych <= '\t') goto yy289;
		if (yych <= '\n') goto yy291;
		goto yy269;
	} else {
		if (yych <= '\r') goto yy293;
		if (yych != ' ') goto yy269;
	}
yy289:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy289;
		goto yy269;
	} else {
		if (yych <= ' ') goto yy289;
		if (yych == '"') goto yy294;
		goto yy269;
	}
yy291:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 482 "../src/parse/scanner_lex.re"
	{
					set_sourceline ();
					goto code;
				}
#line 1897 "src/parse/scanner_lex.cc"
yy293:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy291;
	goto yy269;
yy294:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy269;
		goto yy294;
	} else {
		if (yych <= '"') goto yy297;
		if (yych != '\\') goto yy294;
	}
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy269;
	goto yy294;
yy297:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy291;
	if (yych == '\r') goto yy293;
	goto yy269;
yy298:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy298;
		goto yy269;
	} else {
		if (yych <= ' ') goto yy298;
		if (yych == '#') goto yy279;
		goto yy269;
	}
}
#line 535 "../src/parse/scanner_lex.re"


comment:

#line 1941 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ')') {
		if (yych == '\n') goto yy304;
	} else {
		if (yych <= '*') goto yy306;
		if (yych == '/') goto yy307;
	}
	++YYCURSOR;
yy303:
#line 567 "../src/parse/scanner_lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					goto comment;
				}
#line 1996 "src/parse/scanner_lex.cc"
yy304:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy312;
	}
	if (yych == '#') goto yy315;
yy305:
#line 558 "../src/parse/scanner_lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					tok = pos = cur;
					cline++;
					goto comment;
				}
#line 2014 "src/parse/scanner_lex.cc"
yy306:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy310;
	goto yy303;
yy307:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '*') goto yy303;
	++YYCURSOR;
#line 549 "../src/parse/scanner_lex.re"
	{
					++depth;
					fatal("ambiguous /* found");
					goto comment;
				}
#line 2029 "src/parse/scanner_lex.cc"
yy310:
	++YYCURSOR;
#line 539 "../src/parse/scanner_lex.re"
	{
					if (--depth == 0)
					{
						goto scan;
					}
					else
					{
						goto comment;
					}
				}
#line 2043 "src/parse/scanner_lex.cc"
yy312:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy312;
	}
	if (yych == '#') goto yy315;
yy314:
	YYCURSOR = YYMARKER;
	goto yy305;
yy315:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy315;
		goto yy314;
	} else {
		if (yych <= ' ') goto yy315;
		if (yych != 'l') goto yy314;
	}
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy314;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy314;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy314;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy322;
	if (yych <= '9') goto yy314;
	goto yy322;
yy321:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy322:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy321;
		goto yy314;
	} else {
		if (yych <= ' ') goto yy321;
		if (yych <= '0') goto yy314;
		if (yych >= ':') goto yy314;
	}
yy323:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy323;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy314;
		if (yych <= '\t') goto yy325;
		if (yych <= '\n') goto yy327;
		goto yy314;
	} else {
		if (yych <= '\r') goto yy329;
		if (yych != ' ') goto yy314;
	}
yy325:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy325;
		goto yy314;
	} else {
		if (yych <= ' ') goto yy325;
		if (yych == '"') goto yy330;
		goto yy314;
	}
yy327:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 554 "../src/parse/scanner_lex.re"
	{
					set_sourceline ();
					goto comment;
				}
#line 2126 "src/parse/scanner_lex.cc"
yy329:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy327;
	goto yy314;
yy330:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy330;
	}
	if (yych <= '\n') goto yy314;
	if (yych <= '"') goto yy333;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy314;
	goto yy330;
yy333:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '\n') goto yy327;
	if (yych == '\r') goto yy329;
	goto yy314;
}
#line 574 "../src/parse/scanner_lex.re"


nextLine:

#line 2156 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy338;
	++YYCURSOR;
#line 585 "../src/parse/scanner_lex.re"
	{  if(cur == eof) {
                  return 0;
               }
               goto nextLine;
            }
#line 2169 "src/parse/scanner_lex.cc"
yy338:
	++YYCURSOR;
#line 578 "../src/parse/scanner_lex.re"
	{ if(cur == eof) {
                  return 0;
               }
               tok = pos = cur;
               cline++;
               goto scan;
            }
#line 2180 "src/parse/scanner_lex.cc"
}
#line 590 "../src/parse/scanner_lex.re"


config:

#line 2187 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy344;
	} else {
		if (yych <= ' ') goto yy344;
		if (yych == '=') goto yy346;
	}
	++YYCURSOR;
#line 601 "../src/parse/scanner_lex.re"
	{
					fatal("missing '='");
				}
#line 2237 "src/parse/scanner_lex.cc"
yy344:
	++YYCURSOR;
	yych = (YYCTYPE)*YYCURSOR;
	goto yy351;
yy345:
#line 594 "../src/parse/scanner_lex.re"
	{
					goto config;
				}
#line 2247 "src/parse/scanner_lex.cc"
yy346:
	++YYCURSOR;
	yych = (YYCTYPE)*YYCURSOR;
	goto yy349;
yy347:
#line 597 "../src/parse/scanner_lex.re"
	{
					lexer_state = LEX_CONFIG_VALUE;
					return '=';
				}
#line 2258 "src/parse/scanner_lex.cc"
yy348:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy349:
	if (yybm[0+yych] & 128) {
		goto yy348;
	}
	goto yy347;
yy350:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy351:
	if (yych == '\t') goto yy350;
	if (yych == ' ') goto yy350;
	goto yy345;
}
#line 604 "../src/parse/scanner_lex.re"


value:

#line 2282 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 192,   0, 248, 248, 192, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		192, 248, 104, 248, 248, 248, 248, 152, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		252, 252, 252, 252, 252, 252, 252, 252, 
		252, 252, 248, 192, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248,   8, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\r') {
			if (yych <= 0x08) goto yy360;
			if (yych <= '\n') goto yy354;
			if (yych <= '\f') goto yy360;
		} else {
			if (yych <= ' ') {
				if (yych <= 0x1F) goto yy360;
			} else {
				if (yych == '"') goto yy362;
				goto yy360;
			}
		}
	} else {
		if (yych <= '/') {
			if (yych <= '\'') goto yy364;
			if (yych == '-') goto yy357;
			goto yy360;
		} else {
			if (yych <= '9') {
				if (yych <= '0') goto yy355;
				goto yy358;
			} else {
				if (yych != ';') goto yy360;
			}
		}
	}
yy354:
#line 616 "../src/parse/scanner_lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					lexer_state = LEX_NORMAL;
					return VALUE;
				}
#line 2355 "src/parse/scanner_lex.cc"
yy355:
	++YYCURSOR;
	if (yybm[0+(yych = (YYCTYPE)*YYCURSOR)] & 8) {
		goto yy360;
	}
yy356:
#line 608 "../src/parse/scanner_lex.re"
	{
					if (!s_to_i32_unsafe (tok, cur, yylval.number))
					{
						fatal ("configuration value overflow");
					}
					lexer_state = LEX_NORMAL;
					return NUMBER;
				}
#line 2371 "src/parse/scanner_lex.cc"
yy357:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy361;
	if (yych >= ':') goto yy361;
yy358:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 4) {
		goto yy358;
	}
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy360;
		if (yych <= '\n') goto yy356;
		if (yych >= '\r') goto yy356;
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy356;
		} else {
			if (yych == ';') goto yy356;
		}
	}
yy360:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy361:
	if (yybm[0+yych] & 8) {
		goto yy360;
	}
	goto yy354;
yy362:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy362;
	}
	if (yych <= ' ') {
		if (yych == '\n') goto yy354;
		goto yy372;
	} else {
		if (yych <= '"') goto yy360;
		if (yych <= ';') goto yy372;
		goto yy374;
	}
yy364:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy364;
	}
	if (yych <= ' ') {
		if (yych == '\n') goto yy354;
	} else {
		if (yych <= '\'') goto yy360;
		if (yych >= '<') goto yy369;
	}
yy366:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy366;
	}
	if (yych <= '\n') goto yy368;
	if (yych <= '\'') goto yy370;
	goto yy371;
yy368:
	YYCURSOR = YYMARKER;
	goto yy354;
yy369:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy364;
			goto yy366;
		} else {
			if (yych <= '\n') goto yy354;
			if (yych <= '\f') goto yy364;
			goto yy366;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy364;
			goto yy366;
		} else {
			if (yych == ';') goto yy366;
			goto yy364;
		}
	}
yy370:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy354;
yy371:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy368;
	goto yy366;
yy372:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy372;
	}
	if (yych <= '\n') goto yy368;
	if (yych <= '"') goto yy370;
	goto yy375;
yy374:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy362;
			goto yy372;
		} else {
			if (yych <= '\n') goto yy354;
			if (yych <= '\f') goto yy362;
			goto yy372;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy362;
			goto yy372;
		} else {
			if (yych == ';') goto yy372;
			goto yy362;
		}
	}
yy375:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy368;
	goto yy372;
}
#line 621 "../src/parse/scanner_lex.re"

}

static void escape (std::string & dest, const std::string & src)
{
	dest = src;
	size_t l = dest.length();
	for (size_t p = 0; p < l; ++p)
	{
		if (dest[p] == '\\')
		{
			dest.insert(++p, "\\");
			++l;
		}
	}
}

void Scanner::set_sourceline ()
{
sourceline:
	tok = cur;

#line 2537 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy380;
	} else {
		if (yych <= '"') goto yy382;
		if (yych <= '0') goto yy378;
		if (yych <= '9') goto yy383;
	}
yy378:
	++YYCURSOR;
yy379:
#line 666 "../src/parse/scanner_lex.re"
	{
  					goto sourceline;
  				}
#line 2590 "src/parse/scanner_lex.cc"
yy380:
	++YYCURSOR;
#line 654 "../src/parse/scanner_lex.re"
	{
  					if (cur == eof)
  					{
						--cur; 
					}
			  		else
			  		{
			  			pos = cur; 
			  		}
			  		tok = cur;
			  		return; 
				}
#line 2606 "src/parse/scanner_lex.cc"
yy382:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy379;
	goto yy388;
yy383:
	++YYCURSOR;
	yych = (YYCTYPE)*YYCURSOR;
	goto yy386;
yy384:
#line 643 "../src/parse/scanner_lex.re"
	{
					if (!s_to_u32_unsafe (tok, cur, cline))
					{
						fatal ("line number overflow");
					}
					goto sourceline; 
				}
#line 2624 "src/parse/scanner_lex.cc"
yy385:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy386:
	if (yybm[0+yych] & 64) {
		goto yy385;
	}
	goto yy384;
yy387:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy388:
	if (yybm[0+yych] & 128) {
		goto yy387;
	}
	if (yych <= '\n') goto yy389;
	if (yych <= '"') goto yy391;
	goto yy390;
yy389:
	YYCURSOR = YYMARKER;
	goto yy379;
yy390:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy389;
	goto yy387;
yy391:
	++YYCURSOR;
#line 650 "../src/parse/scanner_lex.re"
	{
					escape (in.file_name, std::string (tok + 1, tok_len () - 2)); // -2 to omit quotes
			  		goto sourceline; 
				}
#line 2661 "src/parse/scanner_lex.cc"
}
#line 669 "../src/parse/scanner_lex.re"

}

} // end namespace re2c
