%{

#include "src/util/c99_stdint.h"
#include <assert.h>
#include <stddef.h>
#include <stdlib.h>
#include <limits>
#include <list>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>

#include "src/conf/msg.h"
#include "src/code/output.h"
#include "src/compile.h"
#include "src/adfa/adfa.h"
#include "src/re/encoding/enc.h"
#include "src/re/encoding/range_suffix.h"
#include "src/skeleton/skeleton.h"
#include "src/ast/parser.h"
#include "src/ast/ast.h"
#include "src/ast/scanner.h"
#include "src/util/free_list.h"
#include "src/util/range.h"

#define YYMALLOC malloc
#define YYFREE free

using namespace re2c;

extern "C" {

int yylex(context_t &context);
void yyerror(context_t &context, const char*);

} // extern "C"

/* Bison version 1.875 emits a definition that is not working
 * with several g++ version. Hence we disable it here.
 */
#if defined(__GNUC__)
#define __attribute__(x)
#endif

static void check_mode(Scanner::ParseMode mode, bool rflag, bool rules, Scanner &input)
{
	if (mode == Scanner::Rules) {
		if (!rflag) {
			input.fatal("found 'rules:re2c' block without -r flag");
		} else if (rules) {
			input.fatal("cannot have a second 'rules:re2c' block");
		}
	} else if (mode == Scanner::Reuse) {
		if (!rflag) {
			input.fatal("found 'use:re2c' block without -r flag");
		} else if (!rules) {
			input.fatal("got 'use:re2c' without 'rules:re2c'");
		}
	} else if (rflag) {
		input.fatal("found standard 're2c' block while using -r flag");
	}
}

static void check_specs(const specs_t &specs, bool cflag)
{
	specs_t::const_iterator i,
		b = specs.begin(),
		e = specs.end();

	for (i = b; i != e; ++i) {
		if (i->defs.size() > 1) {
			error("line %u: code to default rule %sis already defined at line %u",
				i->defs[1]->fline, incond(i->name).c_str(), i->defs[0]->fline);
			exit(1);
		}
	}

	if (!cflag) {
		for (i = b; i != e; ++i) {
			if (i->name != "") {
				error("line %u: conditions are only allowed"
					" with '-c', '--conditions' option",
					i->rules[0].code->fline);
				exit(1);
			}
		}
	} else {
		for (i = b; i != e; ++i) {
			if (i->name == "") {
				error("line %u: non-conditional rules are not allowed"
					" with '-c', '--conditions' option",
					i->rules[0].code->fline);
				exit(1);
			}
		}

		for (i = b; i != e; ++i) {
			if (i->setup.size() > 1) {
				error("line %u: code to setup rule '%s' is already defined at line %u",
					i->setup[1]->fline, i->name.c_str(), i->setup[0]->fline);
				exit(1);
			}
		}

		for (i = b; i != e; ++i) {
			if (i->name != "*" && !i->setup.empty() && i->rules.empty()) {
				error("line %u: setup for non existing condition '%s' found",
					i->setup[0]->fline, i->name.c_str());
				exit(1);
			}
		}

		for (i = b; i != e && !i->setup.empty(); ++i);
		if (i == e) {
			for (i = b; i != e; ++i) {
				if (i->name == "*") {
					error("line %u: setup for all conditions '<!*>' is illegal "
						"if setup for each condition is defined explicitly",
						i->setup[0]->fline);
					exit(1);
				}
			}
		}

		for (i = b; i != e; ++i) {
			if (i->name == "0" && i->rules.size() > 1) {
				error("line %u: startup code is already defined at line %u",
					i->rules[1].code->fline, i->rules[0].code->fline);
				exit(1);
			}
		}
	}
}

static void prepare_specs(specs_t &specs)
{
	specs_t::iterator i, b = specs.begin(), e = specs.end();

	// merge <*> rules and <!*> setup to all conditions except "0"
	// star rules must have lower priority than normal rules
	for (i = b; i != e && i->name != "*"; ++i);
	if (i != e) {
		const specs_t::iterator star = i;

		for (i = b; i != e; ++i) {
			if (i == star || i->name == "0") continue;

			i->rules.insert(i->rules.end(), star->rules.begin(), star->rules.end());
			i->defs.insert(i->defs.end(), star->defs.begin(), star->defs.end());
			i->setup.insert(i->setup.end(), star->setup.begin(), star->setup.end());
		}

		specs.erase(star);
		e = specs.end();
	}

	// merge default rule with the lowest priority
	for (i = b; i != e; ++i) {
		if (!i->defs.empty()) {
			const Code *c = i->defs[0];
			const AST *r = ast_default(c->fline, 0);
			i->rules.push_back(ASTRule(r, c));
		}
	}

	// "0" condition must be the first one
	for (i = b; i != e && i->name != "0"; ++i);
	if (i != e && i != b) {
		const spec_t zero = *i;
		specs.erase(i);
		specs.insert(specs.begin(), zero);
	}
}

static spec_t &find(specs_t &specs, const std::string &name)
{
	for (specs_t::iterator i = specs.begin(); i != specs.end(); ++i) {
		if (i->name == name) return *i;
	}
	specs.push_back(spec_t(name));
	return specs.back();
}

%}

%start	spec

%lex-param   {re2c::context_t &context}
%parse-param {re2c::context_t &context}

%union {
	const re2c::AST * regexp;
	re2c::Code * code;
	char op;
	re2c::ASTBounds bounds;
	std::string * str;
	re2c::CondList * clist;
};

%token TOKEN_CLOSESIZE
%token TOKEN_CODE
%token TOKEN_CONF
%token TOKEN_ID
%token TOKEN_FID
%token TOKEN_FID_END
%token TOKEN_LINE_INFO
%token TOKEN_REGEXP

%type <op>      close closes
%type <bounds>  TOKEN_CLOSESIZE
%type <code>    TOKEN_CODE ccode
%type <regexp>  TOKEN_REGEXP trailexpr rule expr diff term factor primary
%type <str>     TOKEN_ID TOKEN_FID name
%type <clist>   conds clist

%%

spec
	: /* empty */
	| spec TOKEN_CONF
	| spec def
	| spec rule
	| spec TOKEN_LINE_INFO
	;

def
	: name expr enddef {
		if (!context.symtab.insert(std::make_pair(*$1, $2)).second) {
			context.input.fatal("sym already defined");
		}
		delete $1;
	}
	/* errors */
	| name expr '/' {
		context.input.fatal("trailing contexts are not allowed in named definitions");
	};

name
	: TOKEN_ID '=' {
		$$ = $1;
	}
	| TOKEN_FID {
		$$ = $1;
	};

enddef: ';' | TOKEN_FID_END;

rule
	: trailexpr TOKEN_CODE {
		find(context.specs, "").rules.push_back(ASTRule($1, $2));
	}

	| '*' TOKEN_CODE {
		find(context.specs, "").defs.push_back($2);
	}

	| '<' clist '>' trailexpr ccode {
		for(CondList::const_iterator i = $2->begin(); i != $2->end(); ++i) {
			find(context.specs, *i).rules.push_back(ASTRule($4, $5));
		}
		delete $2;
	}

	| '<' clist '>' '*' ccode {
		for(CondList::const_iterator i = $2->begin(); i != $2->end(); ++i) {
			find(context.specs, *i).defs.push_back($5);
		}
		delete $2;
	}

	| '<' '!' clist '>' TOKEN_CODE {
		for (CondList::const_iterator i = $3->begin(); i != $3->end(); ++i) {
			find(context.specs, *i).setup.push_back($5);
		}
		delete $3;
	}

	| '<' '>' ccode {
		const AST *r = ast_nil(context.input.get_cline(), 0);
		find(context.specs, "0").rules.push_back(ASTRule(r, $3));
	};

ccode
	: TOKEN_CODE

	| '=' '>' TOKEN_ID TOKEN_CODE {
		$$ = $4;
		$$->cond = *$3;
		delete $3;
	}

	| ':' '=' '>' TOKEN_ID {
		$$ = new Code(context.input.get_fname(), context.input.get_cline());
		$$->cond = *$4;
		delete $4;
	};

clist
	: conds
	| '*' {
		$$ = new CondList;
		$$->insert("*");
	};

conds
	: TOKEN_ID {
		$$ = new CondList;
		$$->insert(*$1);
		delete $1;
	}

	| conds ',' TOKEN_ID {
		$1->insert(*$3);
		delete $3;
		$$ = $1;
	};

trailexpr
	: expr {
		$$ = ast_cap($1);
	} | expr '/' expr {
		$$ = ast_cat(ast_cap($1),
			ast_cat(ast_tag(context.input.get_cline(), 0, NULL), $3));
	};

expr:
		diff
		{
			$$ = $1;
		}
	|	expr '|' diff
		{
			$$ = ast_alt($1, $3);
		}
;

diff:
		term
		{
			$$ = $1;
		}
	|	diff '\\' term
		{
			$$ = ast_diff($1, $3);
		}
;

term:
		factor
		{
			$$ = $1;
		}
	|	term factor
		{
			$$ = ast_cat($1, $2);
		}
;

factor
	: primary
	| primary closes {
		switch($2) {
			case '*': $$ = ast_iter($1, 0, AST::MANY); break;
			case '+': $$ = ast_iter($1, 1, AST::MANY); break;
			case '?': $$ = ast_iter($1, 0, 1); break;
		}
	} | primary TOKEN_CLOSESIZE {
		$$ = ast_iter($1, $2.min, $2.max);
	};

closes
	: close
	| closes close { $$ = ($1 == $2) ? $1 : '*'; }
	;

close
	: '*' { $$ = '*'; }
	| '+' { $$ = '+'; }
	| '?' { $$ = '?'; }
	;

primary
	: TOKEN_REGEXP
	| TOKEN_ID {
		symtab_t::iterator i = context.symtab.find(*$1);
		if (i == context.symtab.end()) {
			context.input.fatal("can't find symbol");
		}
		$$ = i->second;
		if (ast_need_wrap($$)) {
			$$ = ast_ref($$, *$1);
		}
		delete $1;
	} | '(' expr ')' {
		$$ = ast_cap($2);
	};

%%

extern "C" {

void yyerror(context_t &context, const char* s)
{
	context.input.fatal(s);
}

int yylex(context_t &context)
{
	return context.input.scan();
}

} // extern "C"

namespace re2c
{

void parse(Scanner &input, Output &output)
{
	specs_t rspecs;
	symtab_t symtab;
	Opt &opts = input.opts;
	const opt_t *ropts = NULL;
	OutputFile &o = output.source;

	o.new_block(opts);
	o.wversion_time().wline_info(input.get_cline(), input.get_fname().c_str());
	if (opts->target == opt_t::SKELETON) {
		emit_prolog(o);
	}

	for (Scanner::ParseMode mode; (mode = input.echo()) != Scanner::Stop;) {

		check_mode(mode, opts->rFlag, ropts, input);

		// parse next re2c block
		specs_t specs;
		context_t context = {input, specs, symtab};
		if (mode == Scanner::Reuse) {
			specs = rspecs;
			opts.restore(ropts);
			opts.reset_mapCodeName();
			o.label_counter.reset();
			o.fill_index = 0;
			o.state_goto = false;
			o.cond_goto = false;
		}
		yyparse(context);

		// start new output block with accumulated options
		o.new_block(opts);

		if (mode == Scanner::Rules) {
			// save AST and options for future use
			rspecs = specs;
			ropts = o.block().opts;
		} else {
			// validate and normalize AST
			check_specs(specs, opts->cFlag);
			prepare_specs(specs);

			// compile AST to DFA
			o.block().line = input.get_cline();
			dfas_t dfas;
			for (specs_t::const_iterator i = specs.begin(); i != specs.end(); ++i) {
				dfas.push_back(compile(*i, output));
			}

			// compile DFA to code
			bool prolog = false;
			uint32_t ind = opts->topIndent;
			for (dfas_t::const_iterator i = dfas.begin(); i != dfas.end(); ++i) {
				(*i)->emit(output, ind, (i + 1) == dfas.end(), prolog);
			}
		}

		o.wline_info (input.get_cline (), input.get_fname ().c_str ());
	}

	if (opts->target == opt_t::SKELETON) {
		emit_epilog (o, output.skeletons);
	}

	AST::flist.clear();
	Code::flist.clear();
	Range::vFreeList.clear();
	RangeSuffix::freeList.clear();
}

} // end namespace re2c
