/* Generated by re2c 0.14.3 on Sun Jul 26 14:45:34 2015 */
#include <stdio.h>

#include "src/conf/msg.h"
#include "src/conf/opt.h"

namespace re2c
{

parse_opts_t parse_opts (int argc, char ** argv, Opt & opts)
{
	if (argc == 1)
	{
		usage ();
		return EXIT_FAIL;
	}

#define YYCTYPE char
	YYCTYPE * YYCURSOR;
	YYCTYPE * YYMARKER;
	Warn::option_t option;



opt:
	YYCURSOR = *++argv;
	if (YYCURSOR == NULL)
	{
		goto end;
	}

{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};

	yych = *YYCURSOR;
	if (yych <= 0x00) goto yy2;
	if (yych == '-') goto yy5;
	goto yy4;
yy2:
	++YYCURSOR;
yy3:
	{
		error ("bad option: %s", *argv);
		return EXIT_FAIL;
	}
yy4:
	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	goto yy39;
yy5:
	++YYCURSOR;
	if ((yych = *YYCURSOR) <= '-') {
		if (yych <= 0x00) goto yy11;
		if (yych >= '-') goto yy9;
	} else {
		if (yych == 'W') goto yy7;
	}
	{ goto opt_short; }
yy7:
	yyaccept = 1;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= 'e') {
		if (yych <= 0x00) goto yy15;
		if (yych >= 'e') goto yy17;
	} else {
		if (yych == 'n') goto yy19;
	}
yy8:
	{ option = Warn::W;        goto opt_warn; }
yy9:
	++YYCURSOR;
	if ((yych = *YYCURSOR) <= 0x00) goto yy13;
	{ goto opt_long; }
yy11:
	++YYCURSOR;
	{ if (!opts.source ("<stdin>")) return EXIT_FAIL; goto opt; }
yy13:
	++YYCURSOR;
	{
		// all remaining arguments are non-options
		// so they must be input files
		// re2c expects exactly one input file
		if (const char * f = *++argv)
		{
			if (!opts.source (f) || *++argv)
			{
				return EXIT_FAIL;
			}
		}
		goto end;
	}
yy15:
	++YYCURSOR;
	{ warn.set_all (Warn::W);      goto opt; }
yy17:
	yych = *++YYCURSOR;
	if (yych == 'r') goto yy30;
yy18:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy3;
		} else {
			goto yy8;
		}
	} else {
		goto yy22;
	}
yy19:
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy18;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy18;
	yyaccept = 2;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy23;
yy22:
	{ option = Warn::WNO;      goto opt_warn; }
yy23:
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy18;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy18;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy18;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy18;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy18;
	++YYCURSOR;
	{ option = Warn::WNOERROR; goto opt_warn; }
yy30:
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy18;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy18;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy18;
	yych = *++YYCURSOR;
	if (yych <= 0x00) goto yy36;
	if (yych != '-') goto yy18;
	++YYCURSOR;
	{ option = Warn::WERROR;   goto opt_warn; }
yy36:
	++YYCURSOR;
	{ warn.set_all (Warn::WERROR); goto opt; }
yy38:
	++YYCURSOR;
	yych = *YYCURSOR;
yy39:
	if (yybm[0+yych] & 128) {
		goto yy38;
	}
	++YYCURSOR;
	{ if (!opts.source (*argv))     return EXIT_FAIL; goto opt; }
}


opt_warn:

{
	YYCTYPE yych;
	yych = *YYCURSOR;
	if (yych == 'e') goto yy46;
	if (yych == 'n') goto yy47;
	++YYCURSOR;
yy45:
	{
		error ("bad warning: %s", *argv);
		return EXIT_FAIL;
	}
yy46:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 'm') goto yy63;
	goto yy45;
yy47:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych != 'a') goto yy45;
	yych = *++YYCURSOR;
	if (yych == 'k') goto yy50;
yy49:
	YYCURSOR = YYMARKER;
	goto yy45;
yy50:
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 'd') goto yy49;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 'd') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 'f') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 'a') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 'u') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 'l') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy49;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy49;
	++YYCURSOR;
	{ warn.set (Warn::NAKED_DEFAULT,         option); goto opt; }
yy63:
	yych = *++YYCURSOR;
	if (yych != 'p') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 'y') goto yy49;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy49;
	yych = *++YYCURSOR;
	if (yych == 'c') goto yy68;
	if (yych == 'r') goto yy69;
	goto yy49;
yy68:
	yych = *++YYCURSOR;
	if (yych == 'h') goto yy75;
	goto yy49;
yy69:
	yych = *++YYCURSOR;
	if (yych != 'u') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 'l') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy49;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy49;
	++YYCURSOR;
	{ warn.set (Warn::EMPTY_RULE,            option); goto opt; }
yy75:
	yych = *++YYCURSOR;
	if (yych != 'a') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 'a') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy49;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 'l') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 'a') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy49;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy49;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy49;
	++YYCURSOR;
	{ warn.set (Warn::EMPTY_CHARACTER_CLASS, option); goto opt; }
}


opt_short:

{
	YYCTYPE yych;
	yych = *YYCURSOR;
	if (yych <= 'c') {
		if (yych <= 'C') {
			if (yych <= '7') {
				if (yych <= 0x00) goto yy93;
				if (yych == '1') goto yy97;
				goto yy95;
			} else {
				if (yych <= '8') goto yy99;
				if (yych == '?') goto yy101;
				goto yy95;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= 'D') goto yy103;
				if (yych == 'F') goto yy105;
				goto yy95;
			} else {
				if (yych <= 'V') goto yy107;
				if (yych <= 'a') goto yy95;
				if (yych <= 'b') goto yy109;
				goto yy111;
			}
		}
	} else {
		if (yych <= 'o') {
			if (yych <= 'g') {
				if (yych <= 'd') goto yy113;
				if (yych <= 'e') goto yy115;
				if (yych <= 'f') goto yy117;
				goto yy119;
			} else {
				if (yych <= 'h') goto yy101;
				if (yych <= 'i') goto yy121;
				if (yych <= 'n') goto yy95;
				goto yy123;
			}
		} else {
			if (yych <= 't') {
				if (yych <= 'q') goto yy95;
				if (yych <= 'r') goto yy125;
				if (yych <= 's') goto yy127;
				goto yy129;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy131;
					goto yy133;
				} else {
					if (yych <= 'w') goto yy135;
					if (yych <= 'x') goto yy137;
					goto yy95;
				}
			}
		}
	}
yy93:
	++YYCURSOR;
	{ goto opt; }
yy95:
	++YYCURSOR;
	{
		error ("bad short option: %s", *argv);
		return EXIT_FAIL;
	}
yy97:
	++YYCURSOR;
	{ goto opt_short; }
yy99:
	++YYCURSOR;
	{ if (!opts.utf_8 ())      { error_encoding (); return EXIT_FAIL; } goto opt_short; }
yy101:
	++YYCURSOR;
	{ usage ();   return EXIT_OK; }
yy103:
	++YYCURSOR;
	{ opts.emit_dot ();         goto opt_short; }
yy105:
	++YYCURSOR;
	{ opts.flex_syntax ();      goto opt_short; }
yy107:
	++YYCURSOR;
	{ vernum ();  return EXIT_OK; }
yy109:
	++YYCURSOR;
	{ opts.bit_vectors ();      goto opt_short; }
yy111:
	++YYCURSOR;
	{ opts.start_conditions (); goto opt_short; }
yy113:
	++YYCURSOR;
	{ opts.debug_output ();     goto opt_short; }
yy115:
	++YYCURSOR;
	{ if (!opts.ecb ())        { error_encoding (); return EXIT_FAIL; } goto opt_short; }
yy117:
	++YYCURSOR;
	{ opts.storable_state ();   goto opt_short; }
yy119:
	++YYCURSOR;
	{ opts.computed_gotos ();   goto opt_short; }
yy121:
	++YYCURSOR;
	{ opts.no_debug_info ();    goto opt_short; }
yy123:
	++YYCURSOR;
	if ((yych = *YYCURSOR) <= 0x00) goto yy141;
	{ *argv = YYCURSOR;   goto opt_output; }
yy125:
	++YYCURSOR;
	{ opts.reusable ();         goto opt_short; }
yy127:
	++YYCURSOR;
	{ opts.nested_ifs ();       goto opt_short; }
yy129:
	++YYCURSOR;
	if ((yych = *YYCURSOR) <= 0x00) goto yy139;
	{ *argv = YYCURSOR;   goto opt_header; }
yy131:
	++YYCURSOR;
	{ if (!opts.unicode ())    { error_encoding (); return EXIT_FAIL; } goto opt_short; }
yy133:
	++YYCURSOR;
	{ version (); return EXIT_OK; }
yy135:
	++YYCURSOR;
	{ if (!opts.wide_chars ()) { error_encoding (); return EXIT_FAIL; } goto opt_short; }
yy137:
	++YYCURSOR;
	{ if (!opts.utf_16 ())     { error_encoding (); return EXIT_FAIL; } goto opt_short; }
yy139:
	++YYCURSOR;
	{ YYCURSOR = *++argv; goto opt_header; }
yy141:
	++YYCURSOR;
	{ YYCURSOR = *++argv; goto opt_output; }
}


opt_long:

{
	YYCTYPE yych;
	yych = *YYCURSOR;
	switch (yych) {
	case 'b':	goto yy147;
	case 'c':	goto yy148;
	case 'd':	goto yy149;
	case 'e':	goto yy150;
	case 'f':	goto yy151;
	case 'h':	goto yy152;
	case 'i':	goto yy153;
	case 'n':	goto yy154;
	case 'o':	goto yy155;
	case 'r':	goto yy156;
	case 's':	goto yy157;
	case 't':	goto yy158;
	case 'u':	goto yy159;
	case 'v':	goto yy160;
	case 'w':	goto yy161;
	default:	goto yy145;
	}
yy145:
	++YYCURSOR;
yy146:
	{
		error ("bad long option: %s", *argv);
		return EXIT_FAIL;
	}
yy147:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 'i') goto yy443;
	goto yy146;
yy148:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 'a') goto yy403;
	if (yych == 'o') goto yy404;
	goto yy146;
yy149:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy390;
	goto yy146;
yy150:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= 'l') {
		if (yych == 'c') goto yy352;
		goto yy146;
	} else {
		if (yych <= 'm') goto yy350;
		if (yych <= 'n') goto yy351;
		goto yy146;
	}
yy151:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 'l') goto yy338;
	goto yy146;
yy152:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy333;
	goto yy146;
yy153:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 'n') goto yy327;
	goto yy146;
yy154:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy286;
	if (yych == 'o') goto yy285;
	goto yy146;
yy155:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 'u') goto yy278;
	goto yy146;
yy156:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy269;
	goto yy146;
yy157:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= 'j') {
		if (yych == 'i') goto yy217;
		goto yy146;
	} else {
		if (yych <= 'k') goto yy218;
		if (yych == 't') goto yy219;
		goto yy146;
	}
yy158:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 'y') goto yy205;
	goto yy146;
yy159:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 'n') goto yy188;
	if (yych == 't') goto yy187;
	goto yy146;
yy160:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy174;
	goto yy146;
yy161:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych != 'i') goto yy146;
	yych = *++YYCURSOR;
	if (yych == 'd') goto yy164;
yy163:
	YYCURSOR = YYMARKER;
	goto yy146;
yy164:
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'h') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'a') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ if (!opts.wide_chars ()) { error_encoding (); return EXIT_FAIL; } goto opt; }
yy174:
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy163;
	yych = *++YYCURSOR;
	if (yych == 'n') goto yy176;
	if (yych == 's') goto yy177;
	goto yy163;
yy176:
	yych = *++YYCURSOR;
	if (yych == 'u') goto yy183;
	goto yy163;
yy177:
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ version (); return EXIT_OK; }
yy183:
	yych = *++YYCURSOR;
	if (yych != 'm') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ vernum ();  return EXIT_OK; }
yy187:
	yych = *++YYCURSOR;
	if (yych == 'f') goto yy196;
	goto yy163;
yy188:
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'd') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ if (!opts.unicode ())    { error_encoding (); return EXIT_FAIL; } goto opt; }
yy196:
	yych = *++YYCURSOR;
	if (yych != '-') goto yy163;
	yych = *++YYCURSOR;
	if (yych == '1') goto yy198;
	if (yych == '8') goto yy199;
	goto yy163;
yy198:
	yych = *++YYCURSOR;
	if (yych == '6') goto yy202;
	goto yy163;
yy199:
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ if (!opts.utf_8 ())      { error_encoding (); return EXIT_FAIL; } goto opt; }
yy202:
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ if (!opts.utf_16 ())     { error_encoding (); return EXIT_FAIL; } goto opt; }
yy205:
	yych = *++YYCURSOR;
	if (yych != 'p') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'h') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'a') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'd') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ YYCURSOR = *++argv; goto opt_header; }
yy217:
	yych = *++YYCURSOR;
	if (yych == 'n') goto yy258;
	goto yy163;
yy218:
	yych = *++YYCURSOR;
	if (yych == 'e') goto yy250;
	goto yy163;
yy219:
	yych = *++YYCURSOR;
	if (yych == 'a') goto yy220;
	if (yych == 'o') goto yy221;
	goto yy163;
yy220:
	yych = *++YYCURSOR;
	if (yych == 'r') goto yy235;
	goto yy163;
yy221:
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'a') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'b') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'l') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'a') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ opts.storable_state ();     goto opt; }
yy235:
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'd') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ opts.start_conditions ();   goto opt; }
yy250:
	yych = *++YYCURSOR;
	if (yych != 'l') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ opts.skeleton ();           goto opt; }
yy258:
	yych = *++YYCURSOR;
	if (yych != 'g') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'l') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'p') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'a') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ goto opt; }
yy269:
	yych = *++YYCURSOR;
	if (yych != 'u') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'a') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'b') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'l') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ opts.reusable ();           goto opt; }
yy278:
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'p') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'u') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ YYCURSOR = *++argv; goto opt_output; }
yy285:
	yych = *++YYCURSOR;
	if (yych == '-') goto yy297;
	goto yy163;
yy286:
	yych = *++YYCURSOR;
	if (yych != 's') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'd') goto yy163;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'f') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ opts.nested_ifs ();         goto opt; }
yy297:
	yych = *++YYCURSOR;
	if (yych == 'd') goto yy299;
	if (yych != 'g') goto yy163;
	yych = *++YYCURSOR;
	if (yych == 'e') goto yy311;
	goto yy163;
yy299:
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'b') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'u') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'g') goto yy163;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'f') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ opts.no_debug_info ();      goto opt; }
yy311:
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'a') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy163;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'd') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'a') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ opts.no_generation_date (); goto opt; }
yy327:
	yych = *++YYCURSOR;
	if (yych != 'p') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'u') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ goto opt_input; }
yy333:
	yych = *++YYCURSOR;
	if (yych != 'l') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'p') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ usage ();   return EXIT_OK; }
yy338:
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'x') goto yy163;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'y') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'a') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'x') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ opts.flex_syntax ();        goto opt; }
yy350:
	yych = *++YYCURSOR;
	if (yych == 'i') goto yy371;
	if (yych == 'p') goto yy372;
	goto yy163;
yy351:
	yych = *++YYCURSOR;
	if (yych == 'c') goto yy356;
	goto yy163;
yy352:
	yych = *++YYCURSOR;
	if (yych != 'b') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ if (!opts.ecb ())        { error_encoding (); return EXIT_FAIL; } goto opt; }
yy356:
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'd') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'g') goto yy163;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'p') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'l') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'y') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ goto opt_encoding_policy; }
yy371:
	yych = *++YYCURSOR;
	if (yych == 't') goto yy383;
	goto yy163;
yy372:
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'y') goto yy163;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'l') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'a') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ goto opt_empty_class; }
yy383:
	yych = *++YYCURSOR;
	if (yych != '-') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'd') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ opts.emit_dot ();           goto opt; }
yy390:
	yych = *++YYCURSOR;
	if (yych != 'b') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'u') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'g') goto yy163;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'u') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'p') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'u') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ opts.debug_output ();       goto opt; }
yy403:
	yych = *++YYCURSOR;
	if (yych == 's') goto yy419;
	goto yy163;
yy404:
	yych = *++YYCURSOR;
	if (yych != 'm') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'p') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'u') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'd') goto yy163;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'g') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ opts.computed_gotos ();     goto opt; }
yy419:
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy163;
	yych = *++YYCURSOR;
	if (yych == 's') goto yy425;
	if (yych != 'v') goto yy163;
	yych = *++YYCURSOR;
	if (yych == 'e') goto yy436;
	goto yy163;
yy425:
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'v') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ opts.case_insensitive ();   goto opt; }
yy436:
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'd') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ opts.case_inverted ();      goto opt; }
yy443:
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'v') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy163;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy163;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy163;
	++YYCURSOR;
	{ opts.bit_vectors ();        goto opt; }
}


opt_output:

{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	yych = *YYCURSOR;
	if (yych <= 0x00) goto yy457;
	if (yych != '-') goto yy459;
yy457:
	++YYCURSOR;
	{
		error ("bad argument to option -o, --output: %s", *argv);
		return EXIT_FAIL;
	}
yy459:
	yych = *(YYMARKER = ++YYCURSOR);
	goto yy461;
yy460:
	++YYCURSOR;
	yych = *YYCURSOR;
yy461:
	if (yybm[0+yych] & 128) {
		goto yy460;
	}
	++YYCURSOR;
	{ if (!opts.output (*argv)) return EXIT_FAIL; goto opt; }
}


opt_header:

{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	yych = *YYCURSOR;
	if (yych <= 0x00) goto yy466;
	if (yych != '-') goto yy468;
yy466:
	++YYCURSOR;
	{
		error ("bad argument to option -t, --type-header: %s", *argv);
		return EXIT_FAIL;
	}
yy468:
	yych = *(YYMARKER = ++YYCURSOR);
	goto yy470;
yy469:
	++YYCURSOR;
	yych = *YYCURSOR;
yy470:
	if (yybm[0+yych] & 128) {
		goto yy469;
	}
	++YYCURSOR;
	{ if (!opts.type_header (*argv)) return EXIT_FAIL; goto opt; }
}


opt_encoding_policy:
	YYCURSOR = *++argv;

{
	YYCTYPE yych;
	yych = *YYCURSOR;
	if (yych <= 'h') {
		if (yych == 'f') goto yy477;
	} else {
		if (yych <= 'i') goto yy478;
		if (yych == 's') goto yy479;
	}
	++YYCURSOR;
yy476:
	{
		error ("bad argument to option --encoding-policy (expected: ignore | substitute | fail): %s", *argv);
		return EXIT_FAIL;
	}
yy477:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 'a') goto yy499;
	goto yy476;
yy478:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 'g') goto yy492;
	goto yy476;
yy479:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych != 'u') goto yy476;
	yych = *++YYCURSOR;
	if (yych == 'b') goto yy482;
yy481:
	YYCURSOR = YYMARKER;
	goto yy476;
yy482:
	yych = *++YYCURSOR;
	if (yych != 's') goto yy481;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy481;
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy481;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy481;
	yych = *++YYCURSOR;
	if (yych != 'u') goto yy481;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy481;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy481;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy481;
	++YYCURSOR;
	{ opts.encoding_policy (Enc::POLICY_SUBSTITUTE); goto opt; }
yy492:
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy481;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy481;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy481;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy481;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy481;
	++YYCURSOR;
	{ opts.encoding_policy (Enc::POLICY_IGNORE);     goto opt; }
yy499:
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy481;
	yych = *++YYCURSOR;
	if (yych != 'l') goto yy481;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy481;
	++YYCURSOR;
	{ opts.encoding_policy (Enc::POLICY_FAIL);       goto opt; }
}


opt_input:
	YYCURSOR = *++argv;

{
	YYCTYPE yych;
	yych = *YYCURSOR;
	if (yych <= 'b') goto yy506;
	if (yych <= 'c') goto yy508;
	if (yych <= 'd') goto yy509;
yy506:
	++YYCURSOR;
yy507:
	{
		error ("bad argument to option --input (expected: default | custom): %s", *argv);
		return EXIT_FAIL;
	}
yy508:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 'u') goto yy519;
	goto yy507;
yy509:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych != 'e') goto yy507;
	yych = *++YYCURSOR;
	if (yych == 'f') goto yy512;
yy511:
	YYCURSOR = YYMARKER;
	goto yy507;
yy512:
	yych = *++YYCURSOR;
	if (yych != 'a') goto yy511;
	yych = *++YYCURSOR;
	if (yych != 'u') goto yy511;
	yych = *++YYCURSOR;
	if (yych != 'l') goto yy511;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy511;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy511;
	++YYCURSOR;
	{ opts.input (InputAPI::DEFAULT); goto opt; }
yy519:
	yych = *++YYCURSOR;
	if (yych != 's') goto yy511;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy511;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy511;
	yych = *++YYCURSOR;
	if (yych != 'm') goto yy511;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy511;
	++YYCURSOR;
	{ opts.input (InputAPI::CUSTOM);  goto opt; }
}


opt_empty_class:
	YYCURSOR = *++argv;

{
	YYCTYPE yych;
	yych = *YYCURSOR;
	if (yych == 'e') goto yy530;
	if (yych == 'm') goto yy531;
	++YYCURSOR;
yy529:
	{
		error ("bad argument to option --empty-class (expected: match-empty | match-none | error): %s", *argv);
		return EXIT_FAIL;
	}
yy530:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == 'r') goto yy551;
	goto yy529;
yy531:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych != 'a') goto yy529;
	yych = *++YYCURSOR;
	if (yych == 't') goto yy534;
yy533:
	YYCURSOR = YYMARKER;
	goto yy529;
yy534:
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy533;
	yych = *++YYCURSOR;
	if (yych != 'h') goto yy533;
	yych = *++YYCURSOR;
	if (yych != '-') goto yy533;
	yych = *++YYCURSOR;
	if (yych == 'e') goto yy538;
	if (yych == 'n') goto yy539;
	goto yy533;
yy538:
	yych = *++YYCURSOR;
	if (yych == 'm') goto yy545;
	goto yy533;
yy539:
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy533;
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy533;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy533;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy533;
	++YYCURSOR;
	{ opts.empty_class (EMPTY_CLASS_MATCH_NONE);  goto opt; }
yy545:
	yych = *++YYCURSOR;
	if (yych != 'p') goto yy533;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy533;
	yych = *++YYCURSOR;
	if (yych != 'y') goto yy533;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy533;
	++YYCURSOR;
	{ opts.empty_class (EMPTY_CLASS_MATCH_EMPTY); goto opt; }
yy551:
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy533;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy533;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy533;
	yych = *++YYCURSOR;
	if (yych >= 0x01) goto yy533;
	++YYCURSOR;
	{ opts.empty_class (EMPTY_CLASS_ERROR);       goto opt; }
}


end:
	if (!opts.source_file)
	{
		error ("no source file");
		return EXIT_FAIL;
	}
	if (!cFlag && opts.header_file)
	{
		error ("can only output a header file when using -c switch");
		return EXIT_FAIL;
	}
	if (DFlag && (bFlag || dFlag || sFlag || flag_skeleton))
	{
		error ("cannot combine -D with -b, -d, -s or --skeleton switches");
		return EXIT_FAIL;
	}

	return OK;

#undef YYCTYPE
}

} // namespace re2c
