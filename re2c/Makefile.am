# flags
# do *not* add CXXFLAGS here, add them in configure.ac
AM_CXXFLAGS = $(CXXFLAGSDEFAULT)
BISONFLAGS = -y -d --no-lines
RE2CFLAGS = -bi

# binary
bin_PROGRAMS = re2c
RE2C = re2c$(EXEEXT)

# sources
SRC_HDR = \
	src/codegen/bitmap.h \
	src/codegen/code_names.h \
	src/codegen/emit.h \
	src/codegen/go.h \
	src/codegen/indent.h \
	src/codegen/input_api.h \
	src/codegen/label.h \
	src/codegen/output.h \
	src/codegen/print.h \
	src/codegen/scc.h \
	src/codegen/skeleton/path.h \
	src/codegen/skeleton/skeleton.h \
	src/dfa/action.h \
	src/dfa/encoding/enc.h \
	src/dfa/encoding/range_suffix.h \
	src/dfa/encoding/utf16/utf16.h \
	src/dfa/encoding/utf16/utf16_range.h \
	src/dfa/encoding/utf16/utf16_regexp.h \
	src/dfa/encoding/utf8/utf8.h \
	src/dfa/encoding/utf8/utf8_range.h \
	src/dfa/encoding/utf8/utf8_regexp.h \
	src/dfa/dfa.h \
	src/dfa/ins.h \
	src/dfa/re.h \
	src/dfa/rule_rank.h \
	src/dfa/state.h \
	src/globals.h \
	src/mbo_getopt.h \
	src/parse/input.h \
	src/parse/parser.h \
	src/parse/scanner.h \
	src/parse/token.h \
	src/util/allocate.h \
	src/util/c99_stdint.h \
	src/util/counter.h \
	src/util/forbid_copy.h \
	src/util/free_list.h \
	src/util/local_increment.h \
	src/util/range.h \
	src/util/smart_ptr.h \
	src/util/substr.h \
	src/util/uniq_vector.h \
	src/util/wrap_iterator.h
SRC = \
	src/codegen/bitmap.cc \
	src/codegen/code_names.cc \
	src/codegen/emit_action.cc \
	src/codegen/emit_dfa.cc \
	src/codegen/label.cc \
	src/codegen/prepare_dfa.cc \
	src/codegen/go_construct.cc \
	src/codegen/go_destruct.cc \
	src/codegen/go_emit.cc \
	src/codegen/go_used_labels.cc \
	src/codegen/input_api.cc \
	src/codegen/output.cc \
	src/codegen/print.cc \
	src/codegen/scc.cc \
	src/codegen/skeleton/path.cc \
	src/codegen/skeleton/skeleton.cc \
	src/dfa/actions.cc \
	src/dfa/encoding/enc.cc \
	src/dfa/encoding/range_suffix.cc \
	src/dfa/encoding/utf16/utf16.cc \
	src/dfa/encoding/utf16/utf16_range.cc \
	src/dfa/encoding/utf16/utf16_regexp.cc \
	src/dfa/encoding/utf8/utf8.cc \
	src/dfa/encoding/utf8/utf8_range.cc \
	src/dfa/encoding/utf8/utf8_regexp.cc \
	src/dfa/dfa.cc \
	src/dfa/rule_rank.cc \
	src/main.cc \
	src/mbo_getopt.cc \
	src/parse/input.cc \
	src/parse/scanner.cc \
	src/util/range.cc
re2c_SOURCES = \
	$(SRC_HDR) \
	$(SRC)

# autogenerated sources
AUTOGEN_SCANNER = scanner_lex.cc
AUTOGEN_PARSER = parser.cc
AUTOGEN_PARSER_HDR = y.tab.h
AUTOGEN = \
	$(AUTOGEN_PARSER) \
	$(AUTOGEN_PARSER_HDR) \
	$(AUTOGEN_SCANNER)
nodist_re2c_SOURCES = $(AUTOGEN)

# bootstrap sources
BOOTSTRAP_SCANNER = bootstrap/scanner_lex.cc
BOOTSTRAP_PARSER = bootstrap/parser.cc
BOOTSTRAP_PARSER_HDR = bootstrap/y.tab.h
BOOTSTRAP_DOC_MAN = bootstrap/re2c.1
BOOTSTRAP_DOC_HTML = bootstrap/manual.html
BOOTSTRAP = \
	$(BOOTSTRAP_DOC_HTML) \
	$(BOOTSTRAP_DOC_MAN) \
	$(BOOTSTRAP_PARSER) \
	$(BOOTSTRAP_PARSER_HDR) \
	$(BOOTSTRAP_SCANNER)

# custom sources
CUSTOM_SCANNER = src/parse/scanner_lex.re
CUSTOM_PARSER = src/parse/parser.ypp
CUSTOM = \
	$(CUSTOM_SCANNER) \
	$(CUSTOM_PARSER)

# docs
SRC_DOC = doc/re2c.ad
DOC_MAN = doc/re2c.1
DOC_HTML = doc/manual.html
DOC = \
	$(DOC_HTML) \
	$(DOC_MAN)
man_MANS = $(DOC_MAN)

EXTRA_DIST = \
	$(BOOTSTRAP) \
	$(CUSTOM) \
	CHANGELOG \
	NO_WARRANTY \
	README \
	autogen.sh \
	doc/index.html \
	doc/loplas.ps \
	doc/sample.bib \
	examples \
	test

CLEANFILES = \
	$(AUTOGEN) \
	$(DOC)

TESTS = run_tests.sh

# rule has side effects:
# - autogenerated header in build directory
# - bootstrap files in source directory, must manually prepend $(top_srcdir)
$(AUTOGEN_PARSER): $(CUSTOM_PARSER)
	@if test $(BISON) != "no"; \
	then \
		$(BISON) $(BISONFLAGS) --output=$@ --defines=$(AUTOGEN_PARSER_HDR) $< && \
		if cmp -s $@ $(top_srcdir)/$(BOOTSTRAP_PARSER); \
		then \
			cp $@ $(top_srcdir)/$(BOOTSTRAP_PARSER) && \
			cp $(AUTOGEN_PARSER_HDR) $(top_srcdir)/$(BOOTSTRAP_PARSER_HDR); \
		fi; \
	else \
		cp $(top_srcdir)/$(BOOTSTRAP_PARSER) $@ && \
		cp $(top_srcdir)/$(BOOTSTRAP_PARSER_HDR) $(AUTOGEN_PARSER_HDR); \
	fi

# rule has side effects:
# - bootstrap file in source directory, must manually prepend $(top_srcdir)
$(AUTOGEN_SCANNER): $(CUSTOM_SCANNER)
	@if test -x $(RE2C); \
	then \
		$(RE2C) $(RE2CFLAGS) -o $@ $< && \
		cp $@ $(top_srcdir)/$(BOOTSTRAP_SCANNER); \
	else \
		cp $(top_srcdir)/$(BOOTSTRAP_SCANNER) $@; \
	fi

# rebuild lexer (just in case it was bootstrapped) and rebuild re2c
.PHONY: bootstrap
bootstrap: all
	rm $(AUTOGEN_SCANNER)
	make all

.PHONY: tests
tests: all $(TESTS)
	./$(TESTS)
.PHONY: vtests
vtests: all $(TESTS)
	./$(TESTS) --valgrind
.PHONY: wtests
wtests: all $(TESTS)
	./$(TESTS) --wine -j1

.PHONY: docs
if REBUILD_DOCS
docs: $(DOC_MAN) $(DOC_HTML)
# rule has side effects:
# - bootstrap file in source directory, must manually prepend $(top_srcdir)
$(DOC_MAN): $(SRC_DOC)
	a2x -f manpage $<
	cp $@ $(top_srcdir)/$(BOOTSTRAP_DOC_MAN)
# rule has side effects:
# - bootstrap file in source directory, must manually prepend $(top_srcdir)
$(DOC_HTML): $(SRC_DOC)
	asciidoc -o $@ $<
	cp $@ $(top_srcdir)/$(BOOTSTRAP_DOC_HTML)
else
docs: $(DOC_MAN) $(DOC_HTML)
	@echo "Reconfigure to rebuild docs: ./configure --enable-docs"
$(DOC_MAN): $(BOOTSTRAP_DOC_MAN)
	cp $< $@
$(DOC_HTML): $(BOOTSTRAP_DOC_HTML)
	cp $< $@
endif

all-local: docs
