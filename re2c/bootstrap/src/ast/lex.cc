/* Generated by re2c 1.1.1 on Sat Nov 17 22:59:36 2018 */
#line 1 "../src/ast/lex.re"
#include "src/util/c99_stdint.h"
#include <stddef.h>
#include <string.h>
#include <algorithm>
#include <limits>
#include <string>

#include "src/conf/msg.h"
#include "src/code/output.h"
#include "src/re/encoding/enc.h"
#include "src/ast/input.h"
#include "src/ast/ast.h"
#include "src/ast/scanner.h"
#include "src/ast/parser.h" // needed by "y.tab.h"
#include "src/ast/unescape.h"
#include "src/util/range.h"
#include "src/util/s_to_n32_unsafe.h"
#include "src/util/string_utils.h"
#include "y.tab.h"

extern YYSTYPE yylval;

#define    YYCTYPE      unsigned char
#define    YYCURSOR     cur
#define    YYLIMIT      lim
#define    YYMARKER     mar
#define    YYCTXMARKER  ctx
#define    YYFILL(n)    { fill (n); }

namespace re2c
{

#line 56 "../src/ast/lex.re"


Scanner::ParseMode Scanner::echo(OutputFile &out)
{
    if (eof && cur == eof) // Catch EOF
    {
        return Stop;
    }

    tok = cur;
echo:
    ptr = cur;


#line 51 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 17) YYFILL(17);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 140 "../src/ast/lex.re"
	{
        if (cur != eof) goto echo;
        out.wraw(tok, ptr);
        return Stop;
    }
#line 115 "src/ast/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 158 "../src/ast/lex.re"
	{ goto echo; }
#line 121 "src/ast/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 152 "../src/ast/lex.re"
	{
        cline++;
        pos = cur;
        goto echo;
    }
#line 136 "src/ast/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy7;
	} else {
		goto yy5;
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 70 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        return Parse;
    }
#line 184 "src/ast/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'h':	goto yy23;
	case 'i':	goto yy24;
	case 'm':	goto yy25;
	case 'r':	goto yy26;
	case 's':	goto yy27;
	case 't':	goto yy28;
	case 'u':	goto yy29;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy30;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy31;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy32;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy33;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy34;
	if (yych == 't') goto yy35;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy36;
	if (yych == 'u') goto yy37;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy38;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy39;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy40;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy41;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy42;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy43;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy44;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy45;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy46;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy47;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy48;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy49;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy50;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy51;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy53;
	if (yych <= '9') goto yy13;
	goto yy53;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy54;
	goto yy13;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy55;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy56;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy57;
	if (yych == 'n') goto yy58;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy59;
	goto yy13;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy60;
	goto yy13;
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy61;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy62;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy63;
	goto yy13;
yy52:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy53:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy52;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy52;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			YYCTXMARKER = YYCURSOR;
			goto yy64;
		}
		goto yy13;
	}
yy54:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy66;
	goto yy13;
yy55:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy67;
	goto yy13;
yy56:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy68;
	goto yy13;
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy69;
	goto yy13;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy70;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy71;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy72;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy73;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy74;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy75;
	goto yy13;
yy64:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy64;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy76;
		if (yych <= '\n') goto yy78;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy80;
		if (yych == ' ') goto yy76;
		goto yy13;
	}
yy66:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy81;
	goto yy13;
yy67:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy82;
	goto yy13;
yy68:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy83;
	goto yy13;
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy84;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy85;
	goto yy13;
yy71:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy86;
	goto yy13;
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy87;
	goto yy13;
yy73:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy88;
	goto yy13;
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy89;
	goto yy13;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy90;
	goto yy13;
yy76:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy76;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy76;
		if (yych == '"') goto yy91;
		goto yy13;
	}
yy78:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 146 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr + 1);
        set_sourceline();
        goto echo;
    }
#line 469 "src/ast/lex.cc"
yy80:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy78;
	goto yy13;
yy81:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy93;
	goto yy13;
yy82:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy94;
	goto yy13;
yy83:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy95;
	goto yy13;
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy96;
	goto yy13;
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy97;
	goto yy13;
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy98;
	goto yy13;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy99;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy100;
	goto yy13;
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy101;
	goto yy13;
yy90:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy102;
	goto yy13;
yy91:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy91;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy103;
	goto yy104;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy105;
	goto yy13;
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy106;
	goto yy13;
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy107;
	goto yy13;
yy96:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy108;
	goto yy13;
yy97:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy110;
	goto yy13;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy111;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy112;
	goto yy13;
yy100:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy113;
	goto yy13;
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy114;
	goto yy13;
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy115;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy78;
	if (yych == '\r') goto yy80;
	goto yy13;
yy104:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy91;
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy117;
	goto yy13;
yy106:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy118;
	goto yy13;
yy107:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy119;
	goto yy13;
yy108:
	++YYCURSOR;
#line 91 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_yymaxfill();
        lex_end_of_comment(out);
        goto echo;
    }
#line 597 "src/ast/lex.cc"
yy110:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'h') goto yy120;
	goto yy13;
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy121;
	goto yy13;
yy112:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy122;
	goto yy13;
yy113:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy123;
	goto yy13;
yy114:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy124;
	goto yy13;
yy115:
	++YYCURSOR;
#line 80 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        return Reuse;
    }
#line 625 "src/ast/lex.cc"
yy117:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy125;
	goto yy13;
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy126;
	goto yy13;
yy119:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy127;
	goto yy13;
yy120:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy128;
	goto yy13;
yy121:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy129;
	goto yy13;
yy122:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy131;
	goto yy13;
yy123:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy133;
	goto yy13;
yy124:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy135;
	goto yy13;
yy125:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy137;
	goto yy13;
yy126:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy138;
	goto yy13;
yy127:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy139;
	goto yy13;
yy128:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy141;
	goto yy13;
yy129:
	++YYCURSOR;
#line 127 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, true);
        goto echo;
    }
#line 682 "src/ast/lex.cc"
yy131:
	++YYCURSOR;
#line 75 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        return Rules;
    }
#line 690 "src/ast/lex.cc"
yy133:
	++YYCURSOR;
#line 121 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, false);
        goto echo;
    }
#line 699 "src/ast/lex.cc"
yy135:
	++YYCURSOR;
#line 112 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_line_info_output();
        out.wdelay_types();
        out.wdelay_line_info_input(cline, get_fname());
        lex_end_of_comment(out);
        goto echo;
    }
#line 711 "src/ast/lex.cc"
yy137:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy142;
	goto yy13;
yy138:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy143;
	goto yy13;
yy139:
	++YYCURSOR;
#line 85 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        lex_end_of_comment(out);
        goto echo;
    }
#line 728 "src/ast/lex.cc"
yy141:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy144;
	goto yy13;
yy142:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy145;
	goto yy13;
yy143:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy13;
	if (yych <= '1') goto yy147;
	goto yy13;
yy144:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy149;
	goto yy13;
yy145:
	++YYCURSOR;
#line 105 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_state_goto(0);
        lex_end_of_comment(out);
        goto echo;
    }
#line 755 "src/ast/lex.cc"
yy147:
	++YYCURSOR;
#line 133 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(cur[-1] == '1');
        lex_end_of_comment(out);
        goto echo;
    }
#line 765 "src/ast/lex.cc"
yy149:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
#line 98 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_yymaxnmatch();
        lex_end_of_comment(out);
        goto echo;
    }
#line 777 "src/ast/lex.cc"
}
#line 159 "../src/ast/lex.re"

}

void Scanner::lex_end_of_comment(OutputFile &out)
{
    uint32_t ignored = 0;
    for (;;) {
#line 787 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy154;
		if (yych == '\n') goto yy158;
		goto yy156;
	} else {
		if (yych <= '\r') goto yy160;
		if (yych == '*') goto yy161;
		goto yy156;
	}
yy154:
	++YYCURSOR;
#line 166 "../src/ast/lex.re"
	{ fatal_lc(get_cline(), get_column(), "expected end of block"); }
#line 805 "src/ast/lex.cc"
yy156:
	++YYCURSOR;
yy157:
#line 168 "../src/ast/lex.re"
	{ continue; }
#line 811 "src/ast/lex.cc"
yy158:
	++YYCURSOR;
#line 169 "../src/ast/lex.re"
	{ ++ignored; continue; }
#line 816 "src/ast/lex.cc"
yy160:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy158;
	goto yy157;
yy161:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy157;
	++YYCURSOR;
#line 170 "../src/ast/lex.re"
	{
            if (ignored > 0) {
                cline += ignored;
                out.wdelay_line_info_input(cline, get_fname());
            }
            tok = pos = cur;
            return;
        }
#line 834 "src/ast/lex.cc"
}
#line 178 "../src/ast/lex.re"
}
}

void Scanner::lex_tags(OutputFile &out, bool mtags)
{
    std::string fmt, sep;
    for (;;) {
#line 844 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy168;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy171;
		} else {
			if (yych == '\r') goto yy173;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy174;
			if (yych >= 'f') goto yy175;
		} else {
			if (yych == 's') goto yy176;
		}
	}
	++YYCURSOR;
yy167:
#line 185 "../src/ast/lex.re"
	{ fatal_lc(get_cline(), get_column(), "unrecognized configuration"); }
#line 904 "src/ast/lex.cc"
yy168:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy168;
	}
#line 190 "../src/ast/lex.re"
	{ continue; }
#line 914 "src/ast/lex.cc"
yy171:
	++YYCURSOR;
#line 191 "../src/ast/lex.re"
	{ ++cline; continue; }
#line 919 "src/ast/lex.cc"
yy173:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy171;
	goto yy167;
yy174:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy177;
	goto yy167;
yy175:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy179;
	goto yy167;
yy176:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy181;
	goto yy167;
yy177:
	++YYCURSOR;
#line 192 "../src/ast/lex.re"
	{
            out.wdelay_tags(new ConfTags(fmt, sep), mtags);
            tok = pos = cur;
            return;
        }
#line 944 "src/ast/lex.cc"
yy179:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy182;
yy180:
	YYCURSOR = YYMARKER;
	goto yy167;
yy181:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy183;
	goto yy180;
yy182:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy184;
	goto yy180;
yy183:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy185;
	goto yy180;
yy184:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy186;
	goto yy180;
yy185:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy187;
	goto yy180;
yy186:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy188;
	goto yy180;
yy187:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy190;
	goto yy180;
yy188:
	++YYCURSOR;
#line 187 "../src/ast/lex.re"
	{ fmt = lex_conf_string(); continue; }
#line 983 "src/ast/lex.cc"
yy190:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy180;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy180;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy180;
	++YYCURSOR;
#line 188 "../src/ast/lex.re"
	{ sep = lex_conf_string(); continue; }
#line 994 "src/ast/lex.cc"
}
#line 197 "../src/ast/lex.re"
}
}

int Scanner::scan(const conopt_t *globopts)
{
scan:
    tchar = cur - pos;
    tok = cur;

#line 1006 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy199;
	}
	if (yych <= '9') {
		if (yych <= '%') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy197;
				if (yych <= '\n') goto yy202;
				if (yych >= '\r') goto yy204;
			} else {
				if (yych <= '"') {
					if (yych >= '"') goto yy205;
				} else {
					if (yych <= '#') goto yy207;
					if (yych >= '%') goto yy208;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') goto yy197;
				if (yych <= '\'') goto yy209;
				if (yych <= ')') goto yy211;
				goto yy213;
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy211;
				} else {
					if (yych <= '.') goto yy214;
					if (yych <= '/') goto yy216;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy217;
				if (yych <= ';') goto yy211;
				if (yych <= '<') goto yy218;
				goto yy220;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy211;
				} else {
					if (yych <= '@') goto yy207;
					if (yych <= 'Z') goto yy221;
					goto yy224;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy211;
				} else {
					if (yych != '`') goto yy221;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy226;
					goto yy221;
				} else {
					if (yych <= '{') goto yy227;
					if (yych <= '|') goto yy211;
				}
			}
		}
	}
yy197:
	++YYCURSOR;
yy198:
#line 321 "../src/ast/lex.re"
	{
        fatal_lc(get_cline(), get_column(), "unexpected character: '%c'", *tok);
        goto scan;
    }
#line 1120 "src/ast/lex.cc"
yy199:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy199;
	}
#line 302 "../src/ast/lex.re"
	{ goto scan; }
#line 1130 "src/ast/lex.cc"
yy202:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy229;
	} else {
		if (yych <= ' ') goto yy229;
		if (yych == '#') goto yy232;
	}
yy203:
#line 309 "../src/ast/lex.re"
	{
        pos = cur;
        cline++;
        if (lexer_state == LEX_FLEX_NAME) {
            lexer_state = LEX_NORMAL;
            return TOKEN_FID_END;
        }
        else {
            goto scan;
        }
    }
#line 1153 "src/ast/lex.cc"
yy204:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy202;
	goto yy198;
yy205:
	++YYCURSOR;
#line 219 "../src/ast/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1162 "src/ast/lex.cc"
yy207:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy198;
		if (yych <= 'Z') goto yy234;
		goto yy198;
	} else {
		if (yych == '`') goto yy198;
		if (yych <= 'z') goto yy234;
		goto yy198;
	}
yy208:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy237;
	goto yy198;
yy209:
	++YYCURSOR;
#line 218 "../src/ast/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1182 "src/ast/lex.cc"
yy211:
	++YYCURSOR;
yy212:
#line 229 "../src/ast/lex.re"
	{ return *tok; }
#line 1188 "src/ast/lex.cc"
yy213:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy237;
	goto yy212;
yy214:
	++YYCURSOR;
#line 297 "../src/ast/lex.re"
	{
        yylval.regexp = ast_dot(cline, get_column());
        return TOKEN_REGEXP;
    }
#line 1200 "src/ast/lex.cc"
yy216:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy239;
	if (yych == '/') goto yy241;
	goto yy212;
yy217:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy243;
	goto yy198;
yy218:
	++YYCURSOR;
#line 211 "../src/ast/lex.re"
	{ return lex_clist(); }
#line 1214 "src/ast/lex.cc"
yy220:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy245;
	goto yy212;
yy221:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy222:
	if (yybm[0+yych] & 32) {
		goto yy221;
	}
#line 274 "../src/ast/lex.re"
	{
        if (!globopts->FFlag || lex_namedef_context_re2c()) {
            yylval.str = new std::string (tok, tok_len());
            return TOKEN_ID;
        }
        else if (lex_namedef_context_flex()) {
            yylval.str = new std::string (tok, tok_len());
            lexer_state = LEX_FLEX_NAME;
            return TOKEN_FID;
        }
        else {
            std::vector<ASTChar> *str = new std::vector<ASTChar>;
            for (const char *s = tok; s < cur; ++s) {
                const uint32_t
                    chr = static_cast<uint8_t>(*s),
                    col = static_cast<uint32_t>(s - tok);
                str->push_back(ASTChar(chr, col));
            }
            yylval.regexp = ast_str(cline, get_column(), str, false);
            return TOKEN_REGEXP;
        }
    }
#line 1250 "src/ast/lex.cc"
yy224:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy247;
#line 220 "../src/ast/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1256 "src/ast/lex.cc"
yy226:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy249;
	goto yy222;
yy227:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy252;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy250;
		if (yych >= 'A') goto yy254;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy254;
		} else {
			if (yych <= '`') goto yy228;
			if (yych <= 'z') goto yy254;
		}
	}
yy228:
#line 206 "../src/ast/lex.re"
	{ lex_code_in_braces(); return TOKEN_CODE; }
#line 1281 "src/ast/lex.cc"
yy229:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy229;
	} else {
		if (yych <= ' ') goto yy229;
		if (yych == '#') goto yy232;
	}
yy231:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy203;
		} else {
			goto yy228;
		}
	} else {
		goto yy251;
	}
yy232:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy232;
		goto yy231;
	} else {
		if (yych <= ' ') goto yy232;
		if (yych == 'l') goto yy256;
		goto yy231;
	}
yy234:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy236;
		if (yych <= '9') goto yy234;
		if (yych >= 'A') goto yy234;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy234;
		} else {
			if (yych <= '`') goto yy236;
			if (yych <= 'z') goto yy234;
		}
	}
yy236:
#line 223 "../src/ast/lex.re"
	{
        const std::string *name = new std::string(tok + 1, tok_len() - 1);
        yylval.regexp = ast_tag(cline, get_column(), name, tok[0] == '#');
        return TOKEN_REGEXP;
    }
#line 1338 "src/ast/lex.cc"
yy237:
	++YYCURSOR;
#line 216 "../src/ast/lex.re"
	{ tok = cur; return 0; }
#line 1343 "src/ast/lex.cc"
yy239:
	++YYCURSOR;
#line 214 "../src/ast/lex.re"
	{ lex_c_comment(); goto scan; }
#line 1348 "src/ast/lex.cc"
yy241:
	++YYCURSOR;
#line 213 "../src/ast/lex.re"
	{ lex_cpp_comment(); goto scan; }
#line 1353 "src/ast/lex.cc"
yy243:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy257;
#line 207 "../src/ast/lex.re"
	{ lex_code_indented(); return TOKEN_CODE; }
#line 1359 "src/ast/lex.cc"
yy245:
	++YYCURSOR;
#line 209 "../src/ast/lex.re"
	{ lex_cgoto(); return TOKEN_CNEXT; }
#line 1364 "src/ast/lex.cc"
yy247:
	++YYCURSOR;
#line 221 "../src/ast/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1369 "src/ast/lex.cc"
yy249:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy259;
	goto yy222;
yy250:
	++YYCURSOR;
yy251:
#line 258 "../src/ast/lex.re"
	{
        fatal_lc(get_cline(), get_column(),
            "illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
    }
#line 1382 "src/ast/lex.cc"
yy252:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy252;
	}
	if (yych == ',') goto yy260;
	if (yych == '}') goto yy261;
	goto yy231;
yy254:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy231;
			goto yy254;
		} else {
			if (yych <= '@') goto yy231;
			if (yych <= 'Z') goto yy254;
			goto yy231;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy231;
			goto yy254;
		} else {
			if (yych == '}') goto yy263;
			goto yy231;
		}
	}
yy256:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy265;
	goto yy231;
yy257:
	++YYCURSOR;
#line 210 "../src/ast/lex.re"
	{ lex_cgoto(); return TOKEN_CJUMP; }
#line 1423 "src/ast/lex.cc"
yy259:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy266;
	goto yy222;
yy260:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy251;
	if (yych <= '9') goto yy267;
	if (yych == '}') goto yy269;
	goto yy251;
yy261:
	++YYCURSOR;
#line 231 "../src/ast/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            fatal_lc(get_cline(), get_column(), "repetition count overflow");
        }
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_CLOSESIZE;
    }
#line 1445 "src/ast/lex.cc"
yy263:
	++YYCURSOR;
#line 263 "../src/ast/lex.re"
	{
        if (!globopts->FFlag) {
            fatal_lc(get_cline(), get_column(),
                "curly braces for names only allowed with -F switch");
        }
        yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
        return TOKEN_ID;
    }
#line 1457 "src/ast/lex.cc"
yy265:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy271;
	goto yy231;
yy266:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy272;
	goto yy222;
yy267:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy231;
	if (yych <= '9') goto yy267;
	if (yych == '}') goto yy274;
	goto yy231;
yy269:
	++YYCURSOR;
#line 250 "../src/ast/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            fatal_lc(get_cline(), get_column(), "repetition lower bound overflow");
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        return TOKEN_CLOSESIZE;
    }
#line 1484 "src/ast/lex.cc"
yy271:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy276;
	goto yy231;
yy272:
	++YYCURSOR;
#line 272 "../src/ast/lex.re"
	{ return TOKEN_CONF; }
#line 1493 "src/ast/lex.cc"
yy274:
	++YYCURSOR;
#line 239 "../src/ast/lex.re"
	{
        const char * p = strchr (tok, ',');
        if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min)) {
            fatal_lc(get_cline(), get_column(), "repetition lower bound overflow");
        }
        if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max)) {
            fatal_lc(get_cline(), get_column(), "repetition upper bound overflow");
        }
        return TOKEN_CLOSESIZE;
    }
#line 1507 "src/ast/lex.cc"
yy276:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy278;
	if (yych <= '9') goto yy231;
	goto yy278;
yy277:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy278:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy277;
		goto yy231;
	} else {
		if (yych <= ' ') goto yy277;
		if (yych <= '0') goto yy231;
		if (yych >= ':') goto yy231;
		YYCTXMARKER = YYCURSOR;
	}
yy279:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy231;
		} else {
			if (yych <= '\n') goto yy283;
			if (yych <= '\f') goto yy231;
			goto yy285;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy231;
		} else {
			if (yych <= '/') goto yy231;
			if (yych <= '9') goto yy279;
			goto yy231;
		}
	}
yy281:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy281;
		goto yy231;
	} else {
		if (yych <= ' ') goto yy281;
		if (yych == '"') goto yy286;
		goto yy231;
	}
yy283:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 304 "../src/ast/lex.re"
	{
        set_sourceline ();
        return TOKEN_LINE_INFO;
    }
#line 1568 "src/ast/lex.cc"
yy285:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy283;
	goto yy231;
yy286:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy286;
	}
	if (yych <= '\n') goto yy231;
	if (yych >= '#') goto yy289;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy283;
	if (yych == '\r') goto yy285;
	goto yy231;
yy289:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy231;
	if (yych == '\n') goto yy231;
	goto yy286;
}
#line 325 "../src/ast/lex.re"

}

bool Scanner::lex_namedef_context_re2c()
{

#line 1601 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			YYCTXMARKER = YYCURSOR;
			goto yy293;
		}
	} else {
		if (yych <= ' ') {
			YYCTXMARKER = YYCURSOR;
			goto yy293;
		}
		if (yych == '=') {
			YYCTXMARKER = YYCURSOR;
			goto yy296;
		}
	}
yy292:
#line 332 "../src/ast/lex.re"
	{ return false; }
#line 1658 "src/ast/lex.cc"
yy293:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy293;
	}
	if (yych == '=') goto yy296;
yy295:
	YYCURSOR = YYMARKER;
	goto yy292;
yy296:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy295;
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 331 "../src/ast/lex.re"
	{ return true; }
#line 1677 "src/ast/lex.cc"
}
#line 333 "../src/ast/lex.re"

}

bool Scanner::lex_namedef_context_flex()
{

#line 1686 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') {
		YYCTXMARKER = YYCURSOR;
		goto yy302;
	}
	if (yych == ' ') {
		YYCTXMARKER = YYCURSOR;
		goto yy302;
	}
#line 341 "../src/ast/lex.re"
	{ return false; }
#line 1735 "src/ast/lex.cc"
yy302:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy302;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy305;
	} else {
		if (yych <= '=') goto yy305;
		if (yych == '{') goto yy305;
	}
	YYCURSOR = YYCTXMARKER;
#line 340 "../src/ast/lex.re"
	{ return true; }
#line 1752 "src/ast/lex.cc"
yy305:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 339 "../src/ast/lex.re"
	{ return false; }
#line 1758 "src/ast/lex.cc"
}
#line 342 "../src/ast/lex.re"

}

int Scanner::lex_clist()
{
    int kind = TOKEN_CLIST;
    CondList *cl = new CondList;

#line 1769 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy307;
yy308:
	++YYCURSOR;
yy307:
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy308;
	}
	if (yych <= 0x1F) goto yy310;
	if (yych <= '!') goto yy311;
	if (yych == '>') goto yy314;
yy310:
#line 352 "../src/ast/lex.re"
	{ goto cond; }
#line 1821 "src/ast/lex.cc"
yy311:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') goto yy311;
	if (yych == ' ') goto yy311;
#line 350 "../src/ast/lex.re"
	{ kind = TOKEN_CSETUP; goto cond; }
#line 1830 "src/ast/lex.cc"
yy314:
	++YYCURSOR;
#line 351 "../src/ast/lex.re"
	{ kind = TOKEN_CZERO; goto end; }
#line 1835 "src/ast/lex.cc"
}
#line 353 "../src/ast/lex.re"

cond:
    tok = cur;

#line 1842 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych == '*') goto yy320;
		if (yych >= 'A') goto yy322;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy322;
		} else {
			if (yych <= '`') goto yy318;
			if (yych <= 'z') goto yy322;
		}
	}
yy318:
	++YYCURSOR;
#line 359 "../src/ast/lex.re"
	{ goto error; }
#line 1896 "src/ast/lex.cc"
yy320:
	++YYCURSOR;
#line 358 "../src/ast/lex.re"
	{ if (!cl->empty()) goto error; cl->insert("*"); goto next; }
#line 1901 "src/ast/lex.cc"
yy322:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy322;
	}
#line 357 "../src/ast/lex.re"
	{ cl->insert(std::string(tok, tok_len())); goto next; }
#line 1911 "src/ast/lex.cc"
}
#line 360 "../src/ast/lex.re"

next:

#line 1917 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy329;
		if (yych >= ' ') goto yy329;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy330;
		} else {
			if (yych == '>') goto yy333;
		}
	}
	++YYCURSOR;
yy328:
#line 365 "../src/ast/lex.re"
	{ goto error; }
#line 1970 "src/ast/lex.cc"
yy329:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= ' ') {
		if (yych == '\t') goto yy335;
		if (yych <= 0x1F) goto yy328;
		goto yy335;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy328;
		} else {
			if (yych == '>') goto yy333;
			goto yy328;
		}
	}
yy330:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy330;
	}
#line 363 "../src/ast/lex.re"
	{ goto cond; }
#line 1994 "src/ast/lex.cc"
yy333:
	++YYCURSOR;
#line 364 "../src/ast/lex.re"
	{ goto end; }
#line 1999 "src/ast/lex.cc"
yy335:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy335;
		if (yych >= ' ') goto yy335;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy330;
		} else {
			if (yych == '>') goto yy333;
		}
	}
	YYCURSOR = YYMARKER;
	goto yy328;
}
#line 366 "../src/ast/lex.re"

end:
    yylval.clist = cl;
    return kind;
error:
    delete cl;
    fatal_l(get_cline(), "syntax error in condition list");
}

void Scanner::lex_cgoto()
{

#line 2030 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy338;
yy339:
	++YYCURSOR;
yy338:
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy339;
	}
#line 378 "../src/ast/lex.re"
	{ goto name; }
#line 2078 "src/ast/lex.cc"
}
#line 379 "../src/ast/lex.re"

name:
    tok = cur;

#line 2085 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy344;
		if (yych <= 'Z') goto yy346;
	} else {
		if (yych == '`') goto yy344;
		if (yych <= 'z') goto yy346;
	}
yy344:
	++YYCURSOR;
#line 384 "../src/ast/lex.re"
	{ fatal_l(get_cline(), "syntax error in condition goto"); }
#line 2135 "src/ast/lex.cc"
yy346:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy346;
	}
#line 383 "../src/ast/lex.re"
	{ yylval.str = new std::string (tok, tok_len ()); return; }
#line 2145 "src/ast/lex.cc"
}
#line 385 "../src/ast/lex.re"

}

void Scanner::lex_code_indented()
{
    const uint32_t line = cline;
    tok = cur;
code:

#line 2157 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy351;
			if (yych == '\n') goto yy355;
			goto yy353;
		} else {
			if (yych <= '\r') goto yy357;
			if (yych == '"') goto yy358;
			goto yy353;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy358;
			if (yych == '/') goto yy360;
			goto yy353;
		} else {
			if (yych == '|') goto yy353;
			if (yych <= '}') goto yy361;
			goto yy353;
		}
	}
yy351:
	++YYCURSOR;
#line 402 "../src/ast/lex.re"
	{ fail_if_eof(); goto code; }
#line 2187 "src/ast/lex.cc"
yy353:
	++YYCURSOR;
yy354:
#line 407 "../src/ast/lex.re"
	{ goto code; }
#line 2193 "src/ast/lex.cc"
yy355:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy356;
		if (yych <= '\n') goto yy363;
	} else {
		if (yych <= '\r') goto yy363;
		if (yych == ' ') goto yy363;
	}
yy356:
#line 395 "../src/ast/lex.re"
	{
        while (isspace(tok[0])) ++tok;
        while (cur > tok && isspace(cur[-1])) --cur;
        yylval.code = new Code(get_fname (), line, tok, tok_len ());
        return;
    }
#line 2211 "src/ast/lex.cc"
yy357:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy355;
	goto yy354;
yy358:
	++YYCURSOR;
#line 406 "../src/ast/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2220 "src/ast/lex.cc"
yy360:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy365;
	if (yych == '/') goto yy367;
	goto yy354;
yy361:
	++YYCURSOR;
#line 403 "../src/ast/lex.re"
	{ fatal_l(get_cline(), "Curly braces are not allowed after ':='"); }
#line 2230 "src/ast/lex.cc"
yy363:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 394 "../src/ast/lex.re"
	{ goto code; }
#line 2236 "src/ast/lex.cc"
yy365:
	++YYCURSOR;
#line 404 "../src/ast/lex.re"
	{ lex_c_comment(); goto code; }
#line 2241 "src/ast/lex.cc"
yy367:
	++YYCURSOR;
#line 405 "../src/ast/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2246 "src/ast/lex.cc"
}
#line 408 "../src/ast/lex.re"

}

void Scanner::lex_code_in_braces()
{
    const uint32_t line = cline;
    uint32_t depth = 1;
code:

#line 2258 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy371;
			if (yych == '\n') goto yy375;
			goto yy373;
		} else {
			if (yych <= '\r') goto yy377;
			if (yych == '"') goto yy378;
			goto yy373;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy378;
			if (yych == '/') goto yy380;
			goto yy373;
		} else {
			if (yych <= '{') goto yy381;
			if (yych == '}') goto yy383;
			goto yy373;
		}
	}
yy371:
	++YYCURSOR;
#line 428 "../src/ast/lex.re"
	{ fail_if_eof(); goto code; }
#line 2322 "src/ast/lex.cc"
yy373:
	++YYCURSOR;
yy374:
#line 432 "../src/ast/lex.re"
	{ goto code; }
#line 2328 "src/ast/lex.cc"
yy375:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy385;
	}
	if (yych == '#') goto yy388;
yy376:
#line 427 "../src/ast/lex.re"
	{ pos = cur; cline++; goto code; }
#line 2338 "src/ast/lex.cc"
yy377:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy375;
	goto yy374;
yy378:
	++YYCURSOR;
#line 431 "../src/ast/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2347 "src/ast/lex.cc"
yy380:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy390;
	if (yych == '/') goto yy392;
	goto yy374;
yy381:
	++YYCURSOR;
#line 425 "../src/ast/lex.re"
	{ ++depth; goto code; }
#line 2357 "src/ast/lex.cc"
yy383:
	++YYCURSOR;
#line 417 "../src/ast/lex.re"
	{
        if (--depth == 0) {
            yylval.code = new Code(get_fname (), line, tok, tok_len ());
            return;
        }
        goto code;
    }
#line 2368 "src/ast/lex.cc"
yy385:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy385;
	}
	if (yych == '#') goto yy388;
yy387:
	YYCURSOR = YYMARKER;
	goto yy376;
yy388:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy388;
		goto yy387;
	} else {
		if (yych <= ' ') goto yy388;
		if (yych == 'l') goto yy394;
		goto yy387;
	}
yy390:
	++YYCURSOR;
#line 429 "../src/ast/lex.re"
	{ lex_c_comment(); goto code; }
#line 2396 "src/ast/lex.cc"
yy392:
	++YYCURSOR;
#line 430 "../src/ast/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2401 "src/ast/lex.cc"
yy394:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy387;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy387;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy387;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy399;
	if (yych <= '9') goto yy387;
	goto yy399;
yy398:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy399:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy398;
		goto yy387;
	} else {
		if (yych <= ' ') goto yy398;
		if (yych <= '0') goto yy387;
		if (yych >= ':') goto yy387;
		YYCTXMARKER = YYCURSOR;
	}
yy400:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy400;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy387;
		if (yych <= '\t') goto yy402;
		if (yych <= '\n') goto yy404;
		goto yy387;
	} else {
		if (yych <= '\r') goto yy406;
		if (yych != ' ') goto yy387;
	}
yy402:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy402;
		goto yy387;
	} else {
		if (yych <= ' ') goto yy402;
		if (yych == '"') goto yy407;
		goto yy387;
	}
yy404:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 426 "../src/ast/lex.re"
	{ set_sourceline (); goto code; }
#line 2460 "src/ast/lex.cc"
yy406:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy404;
	goto yy387;
yy407:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy407;
	}
	if (yych <= '\n') goto yy387;
	if (yych >= '#') goto yy410;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy404;
	if (yych == '\r') goto yy406;
	goto yy387;
yy410:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy387;
	if (yych == '\n') goto yy387;
	goto yy407;
}
#line 433 "../src/ast/lex.re"

}

void Scanner::lex_string(char delim)
{
loop:

#line 2494 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy413;
			if (yych <= '\t') goto yy415;
			goto yy417;
		} else {
			if (yych == '\r') goto yy419;
			goto yy415;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy420;
			if (yych <= '&') goto yy415;
			goto yy420;
		} else {
			if (yych == '\\') goto yy422;
			goto yy415;
		}
	}
yy413:
	++YYCURSOR;
#line 443 "../src/ast/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2522 "src/ast/lex.cc"
yy415:
	++YYCURSOR;
yy416:
#line 444 "../src/ast/lex.re"
	{ goto loop; }
#line 2528 "src/ast/lex.cc"
yy417:
	++YYCURSOR;
#line 442 "../src/ast/lex.re"
	{ pos = cur; ++cline; goto loop; }
#line 2533 "src/ast/lex.cc"
yy419:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy417;
	goto yy416;
yy420:
	++YYCURSOR;
#line 440 "../src/ast/lex.re"
	{ if (cur[-1] == delim) return; else goto loop; }
#line 2542 "src/ast/lex.cc"
yy422:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '&') {
		if (yych != '"') goto yy416;
	} else {
		if (yych <= '\'') goto yy423;
		if (yych != '\\') goto yy416;
	}
yy423:
	++YYCURSOR;
#line 441 "../src/ast/lex.re"
	{ goto loop; }
#line 2555 "src/ast/lex.cc"
}
#line 445 "../src/ast/lex.re"

}

void Scanner::lex_c_comment()
{
loop:

#line 2565 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy427;
		if (yych == '\n') goto yy431;
		goto yy429;
	} else {
		if (yych <= '\r') goto yy433;
		if (yych == '*') goto yy434;
		goto yy429;
	}
yy427:
	++YYCURSOR;
#line 454 "../src/ast/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2583 "src/ast/lex.cc"
yy429:
	++YYCURSOR;
yy430:
#line 455 "../src/ast/lex.re"
	{ goto loop; }
#line 2589 "src/ast/lex.cc"
yy431:
	++YYCURSOR;
#line 453 "../src/ast/lex.re"
	{ pos = cur; ++cline; goto loop; }
#line 2594 "src/ast/lex.cc"
yy433:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy431;
	goto yy430;
yy434:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy430;
	++YYCURSOR;
#line 452 "../src/ast/lex.re"
	{ return; }
#line 2605 "src/ast/lex.cc"
}
#line 456 "../src/ast/lex.re"

}

void Scanner::lex_cpp_comment()
{
loop:

#line 2615 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy439;
		if (yych <= '\t') goto yy441;
		goto yy443;
	} else {
		if (yych == '\r') goto yy445;
		goto yy441;
	}
yy439:
	++YYCURSOR;
#line 464 "../src/ast/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2632 "src/ast/lex.cc"
yy441:
	++YYCURSOR;
yy442:
#line 465 "../src/ast/lex.re"
	{ goto loop; }
#line 2638 "src/ast/lex.cc"
yy443:
	++YYCURSOR;
#line 463 "../src/ast/lex.re"
	{ pos = cur; ++cline; return; }
#line 2643 "src/ast/lex.cc"
yy445:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy443;
	goto yy442;
}
#line 466 "../src/ast/lex.re"

}

const AST *Scanner::lex_cls(bool neg)
{
    std::vector<ASTRange> *cls = new std::vector<ASTRange>;
    uint32_t u, l, c, c0 = get_column();
fst:
    tok = cur;
    c = get_column();
    
#line 2661 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy449;
#line 478 "../src/ast/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 2669 "src/ast/lex.cc"
yy449:
	++YYCURSOR;
#line 477 "../src/ast/lex.re"
	{ return ast_cls(cline, c0, cls, neg); }
#line 2674 "src/ast/lex.cc"
}
#line 479 "../src/ast/lex.re"

snd:
    
#line 2680 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy454;
yy453:
#line 482 "../src/ast/lex.re"
	{ u = l; goto add; }
#line 2689 "src/ast/lex.cc"
yy454:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy456;
	YYCURSOR = YYMARKER;
	goto yy453;
yy456:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 483 "../src/ast/lex.re"
	{
            u = lex_cls_chr();
            if (l > u) {
                warn.swapped_range(cline, l, u);
                std::swap(l, u);
            }
            goto add;
        }
#line 2707 "src/ast/lex.cc"
}
#line 491 "../src/ast/lex.re"

add:
    cls->push_back(ASTRange(l, u, c));
    goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
    tok = cur;
    const uint32_t l = get_cline(), c = get_column();
    
#line 2721 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy460;
		if (yych == '\n') goto yy464;
		goto yy462;
	} else {
		if (yych <= '\r') goto yy466;
		if (yych == '\\') goto yy467;
		goto yy462;
	}
yy460:
	++YYCURSOR;
#line 503 "../src/ast/lex.re"
	{ fail_if_eof(); return 0; }
#line 2740 "src/ast/lex.cc"
yy462:
	++YYCURSOR;
yy463:
#line 509 "../src/ast/lex.re"
	{ return static_cast<uint8_t>(tok[0]); }
#line 2746 "src/ast/lex.cc"
yy464:
	++YYCURSOR;
#line 504 "../src/ast/lex.re"
	{ fatal_lc(l, c, "newline in character class"); }
#line 2751 "src/ast/lex.cc"
yy466:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy464;
	goto yy463;
yy467:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy468;
				if (yych == '\n') goto yy464;
				goto yy469;
			} else {
				if (yych <= '\r') goto yy471;
				if (yych == '-') goto yy472;
				goto yy469;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy474;
				if (yych <= '7') goto yy476;
				if (yych <= 'T') goto yy469;
				goto yy477;
			} else {
				if (yych == 'X') goto yy479;
				if (yych <= '[') goto yy469;
				goto yy480;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy482;
				if (yych <= '`') goto yy469;
				if (yych <= 'a') goto yy484;
				goto yy486;
			} else {
				if (yych == 'f') goto yy488;
				if (yych <= 'm') goto yy469;
				goto yy490;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy492;
				if (yych <= 's') goto yy469;
				goto yy494;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy479;
					goto yy496;
				} else {
					if (yych == 'x') goto yy498;
					goto yy469;
				}
			}
		}
	}
yy468:
#line 507 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in escape sequence"); }
#line 2812 "src/ast/lex.cc"
yy469:
	++YYCURSOR;
yy470:
#line 522 "../src/ast/lex.re"
	{
            warn.useless_escape(cline, get_column(), tok[1]);
            return static_cast<uint8_t>(tok[1]);
        }
#line 2821 "src/ast/lex.cc"
yy471:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy464;
	goto yy470;
yy472:
	++YYCURSOR;
#line 520 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 2830 "src/ast/lex.cc"
yy474:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy475;
	if (yych <= '7') goto yy499;
yy475:
#line 506 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in octal escape sequence"); }
#line 2839 "src/ast/lex.cc"
yy476:
	++YYCURSOR;
	goto yy475;
yy477:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy478;
		if (yych <= '9') goto yy501;
	} else {
		if (yych <= 'F') goto yy501;
		if (yych <= '`') goto yy478;
		if (yych <= 'f') goto yy501;
	}
yy478:
#line 505 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in hexadecimal escape sequence"); }
#line 2857 "src/ast/lex.cc"
yy479:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy478;
		if (yych <= '9') goto yy502;
		goto yy478;
	} else {
		if (yych <= 'F') goto yy502;
		if (yych <= '`') goto yy478;
		if (yych <= 'f') goto yy502;
		goto yy478;
	}
yy480:
	++YYCURSOR;
#line 519 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2875 "src/ast/lex.cc"
yy482:
	++YYCURSOR;
#line 521 "../src/ast/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 2880 "src/ast/lex.cc"
yy484:
	++YYCURSOR;
#line 512 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2885 "src/ast/lex.cc"
yy486:
	++YYCURSOR;
#line 513 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2890 "src/ast/lex.cc"
yy488:
	++YYCURSOR;
#line 514 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2895 "src/ast/lex.cc"
yy490:
	++YYCURSOR;
#line 515 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2900 "src/ast/lex.cc"
yy492:
	++YYCURSOR;
#line 516 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2905 "src/ast/lex.cc"
yy494:
	++YYCURSOR;
#line 517 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2910 "src/ast/lex.cc"
yy496:
	++YYCURSOR;
#line 518 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2915 "src/ast/lex.cc"
yy498:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy478;
		if (yych <= '9') goto yy503;
		goto yy478;
	} else {
		if (yych <= 'F') goto yy503;
		if (yych <= '`') goto yy478;
		if (yych <= 'f') goto yy503;
		goto yy478;
	}
yy499:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy500;
	if (yych <= '7') goto yy504;
yy500:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy475;
	} else {
		goto yy478;
	}
yy501:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy500;
		if (yych <= '9') goto yy506;
		goto yy500;
	} else {
		if (yych <= 'F') goto yy506;
		if (yych <= '`') goto yy500;
		if (yych <= 'f') goto yy506;
		goto yy500;
	}
yy502:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy500;
		if (yych <= '9') goto yy507;
		goto yy500;
	} else {
		if (yych <= 'F') goto yy507;
		if (yych <= '`') goto yy500;
		if (yych <= 'f') goto yy507;
		goto yy500;
	}
yy503:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy500;
		if (yych <= '9') goto yy508;
		goto yy500;
	} else {
		if (yych <= 'F') goto yy508;
		if (yych <= '`') goto yy500;
		if (yych <= 'f') goto yy508;
		goto yy500;
	}
yy504:
	++YYCURSOR;
#line 511 "../src/ast/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2980 "src/ast/lex.cc"
yy506:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy500;
		if (yych <= '9') goto yy510;
		goto yy500;
	} else {
		if (yych <= 'F') goto yy510;
		if (yych <= '`') goto yy500;
		if (yych <= 'f') goto yy510;
		goto yy500;
	}
yy507:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy500;
		if (yych <= '9') goto yy503;
		goto yy500;
	} else {
		if (yych <= 'F') goto yy503;
		if (yych <= '`') goto yy500;
		if (yych <= 'f') goto yy503;
		goto yy500;
	}
yy508:
	++YYCURSOR;
#line 510 "../src/ast/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3009 "src/ast/lex.cc"
yy510:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy500;
		if (yych >= ':') goto yy500;
	} else {
		if (yych <= 'F') goto yy511;
		if (yych <= '`') goto yy500;
		if (yych >= 'g') goto yy500;
	}
yy511:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy500;
		if (yych <= '9') goto yy502;
		goto yy500;
	} else {
		if (yych <= 'F') goto yy502;
		if (yych <= '`') goto yy500;
		if (yych <= 'f') goto yy502;
		goto yy500;
	}
}
#line 526 "../src/ast/lex.re"

}

uint32_t Scanner::lex_str_chr(char quote, bool &end)
{
    end = false;
    tok = cur;
    const uint32_t l = get_cline(), c = get_column();
    
#line 3043 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy514;
		if (yych == '\n') goto yy518;
		goto yy516;
	} else {
		if (yych <= '\r') goto yy520;
		if (yych == '\\') goto yy521;
		goto yy516;
	}
yy514:
	++YYCURSOR;
#line 536 "../src/ast/lex.re"
	{ fail_if_eof(); return 0; }
#line 3062 "src/ast/lex.cc"
yy516:
	++YYCURSOR;
yy517:
#line 542 "../src/ast/lex.re"
	{
            end = tok[0] == quote;
            return static_cast<uint8_t>(tok[0]);
        }
#line 3071 "src/ast/lex.cc"
yy518:
	++YYCURSOR;
#line 537 "../src/ast/lex.re"
	{ fatal_lc(l, c, "newline in character string"); }
#line 3076 "src/ast/lex.cc"
yy520:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy518;
	goto yy517;
yy521:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy522;
				if (yych <= '\t') goto yy523;
				goto yy518;
			} else {
				if (yych == '\r') goto yy525;
				if (yych <= '/') goto yy523;
				goto yy526;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy528;
				if (yych == 'U') goto yy529;
				goto yy523;
			} else {
				if (yych <= 'X') goto yy531;
				if (yych == '\\') goto yy532;
				goto yy523;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy534;
				if (yych <= 'b') goto yy536;
				goto yy523;
			} else {
				if (yych <= 'f') goto yy538;
				if (yych == 'n') goto yy540;
				goto yy523;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy542;
				if (yych <= 's') goto yy523;
				if (yych <= 't') goto yy544;
				goto yy531;
			} else {
				if (yych <= 'v') goto yy546;
				if (yych == 'x') goto yy548;
				goto yy523;
			}
		}
	}
yy522:
#line 540 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in escape sequence"); }
#line 3132 "src/ast/lex.cc"
yy523:
	++YYCURSOR;
yy524:
#line 556 "../src/ast/lex.re"
	{
            if (tok[1] != quote) {
                warn.useless_escape(cline, get_column(), tok[1]);
            }
            return static_cast<uint8_t>(tok[1]);
        }
#line 3143 "src/ast/lex.cc"
yy525:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy518;
	goto yy524;
yy526:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy527;
	if (yych <= '7') goto yy549;
yy527:
#line 539 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in octal escape sequence"); }
#line 3156 "src/ast/lex.cc"
yy528:
	++YYCURSOR;
	goto yy527;
yy529:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy530;
		if (yych <= '9') goto yy551;
	} else {
		if (yych <= 'F') goto yy551;
		if (yych <= '`') goto yy530;
		if (yych <= 'f') goto yy551;
	}
yy530:
#line 538 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in hexadecimal escape sequence"); }
#line 3174 "src/ast/lex.cc"
yy531:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy530;
		if (yych <= '9') goto yy552;
		goto yy530;
	} else {
		if (yych <= 'F') goto yy552;
		if (yych <= '`') goto yy530;
		if (yych <= 'f') goto yy552;
		goto yy530;
	}
yy532:
	++YYCURSOR;
#line 555 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3192 "src/ast/lex.cc"
yy534:
	++YYCURSOR;
#line 548 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3197 "src/ast/lex.cc"
yy536:
	++YYCURSOR;
#line 549 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3202 "src/ast/lex.cc"
yy538:
	++YYCURSOR;
#line 550 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3207 "src/ast/lex.cc"
yy540:
	++YYCURSOR;
#line 551 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3212 "src/ast/lex.cc"
yy542:
	++YYCURSOR;
#line 552 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3217 "src/ast/lex.cc"
yy544:
	++YYCURSOR;
#line 553 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3222 "src/ast/lex.cc"
yy546:
	++YYCURSOR;
#line 554 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3227 "src/ast/lex.cc"
yy548:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy530;
		if (yych <= '9') goto yy553;
		goto yy530;
	} else {
		if (yych <= 'F') goto yy553;
		if (yych <= '`') goto yy530;
		if (yych <= 'f') goto yy553;
		goto yy530;
	}
yy549:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy550;
	if (yych <= '7') goto yy554;
yy550:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy527;
	} else {
		goto yy530;
	}
yy551:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy550;
		if (yych <= '9') goto yy556;
		goto yy550;
	} else {
		if (yych <= 'F') goto yy556;
		if (yych <= '`') goto yy550;
		if (yych <= 'f') goto yy556;
		goto yy550;
	}
yy552:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy550;
		if (yych <= '9') goto yy557;
		goto yy550;
	} else {
		if (yych <= 'F') goto yy557;
		if (yych <= '`') goto yy550;
		if (yych <= 'f') goto yy557;
		goto yy550;
	}
yy553:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy550;
		if (yych <= '9') goto yy558;
		goto yy550;
	} else {
		if (yych <= 'F') goto yy558;
		if (yych <= '`') goto yy550;
		if (yych <= 'f') goto yy558;
		goto yy550;
	}
yy554:
	++YYCURSOR;
#line 547 "../src/ast/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3292 "src/ast/lex.cc"
yy556:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy550;
		if (yych <= '9') goto yy560;
		goto yy550;
	} else {
		if (yych <= 'F') goto yy560;
		if (yych <= '`') goto yy550;
		if (yych <= 'f') goto yy560;
		goto yy550;
	}
yy557:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy550;
		if (yych <= '9') goto yy553;
		goto yy550;
	} else {
		if (yych <= 'F') goto yy553;
		if (yych <= '`') goto yy550;
		if (yych <= 'f') goto yy553;
		goto yy550;
	}
yy558:
	++YYCURSOR;
#line 546 "../src/ast/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3321 "src/ast/lex.cc"
yy560:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy550;
		if (yych >= ':') goto yy550;
	} else {
		if (yych <= 'F') goto yy561;
		if (yych <= '`') goto yy550;
		if (yych >= 'g') goto yy550;
	}
yy561:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy550;
		if (yych <= '9') goto yy552;
		goto yy550;
	} else {
		if (yych <= 'F') goto yy552;
		if (yych <= '`') goto yy550;
		if (yych <= 'f') goto yy552;
		goto yy550;
	}
}
#line 562 "../src/ast/lex.re"

}

const AST *Scanner::lex_str(char quote)
{
    const uint32_t column = get_column();
    std::vector<ASTChar> *str = new std::vector<ASTChar>;
    for (bool end;;) {
        const uint32_t c = lex_str_chr(quote, end);
        if (end) return ast_str(cline, column, str, quote == '\'');
        str->push_back(ASTChar(c, get_column()));
    }
}

void Scanner::set_sourceline ()
{
sourceline:
    tok = cur;

#line 3365 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy566;
		} else {
			if (yych <= '\n') goto yy568;
			if (yych <= '\f') goto yy566;
			goto yy570;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy566;
			goto yy571;
		} else {
			if (yych <= '0') goto yy566;
			if (yych <= '9') goto yy572;
			goto yy566;
		}
	}
	++YYCURSOR;
#line 599 "../src/ast/lex.re"
	{
        --cur;
        tok = cur;
        return;
    }
#line 3429 "src/ast/lex.cc"
yy566:
	++YYCURSOR;
yy567:
#line 605 "../src/ast/lex.re"
	{ goto sourceline; }
#line 3435 "src/ast/lex.cc"
yy568:
	++YYCURSOR;
#line 594 "../src/ast/lex.re"
	{
        tok = cur;
        return;
    }
#line 3443 "src/ast/lex.cc"
yy570:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy568;
	goto yy567;
yy571:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x00) goto yy567;
	if (yych == '\n') goto yy567;
	goto yy576;
yy572:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy572;
	}
#line 581 "../src/ast/lex.re"
	{
        if (!s_to_u32_unsafe (tok, cur, cline)) {
            fatal_lc(get_cline(), get_column(), "line number overflow");
        }
        goto sourceline;
    }
#line 3467 "src/ast/lex.cc"
yy575:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy576:
	if (yybm[0+yych] & 128) {
		goto yy575;
	}
	if (yych <= '\n') goto yy577;
	if (yych <= '"') goto yy578;
	goto yy580;
yy577:
	YYCURSOR = YYMARKER;
	goto yy567;
yy578:
	++YYCURSOR;
#line 588 "../src/ast/lex.re"
	{
        in.escaped_file_name = std::string (tok + 1, tok_len () - 2); // strip quotes
        strrreplace (in.escaped_file_name, "\\", "\\\\");
        goto sourceline;
    }
#line 3490 "src/ast/lex.cc"
yy580:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy577;
	if (yych == '\n') goto yy577;
	goto yy575;
}
#line 606 "../src/ast/lex.re"

}

void Scanner::fail_if_eof() const
{
    if (cur == eof) {
        const uint32_t col = static_cast<uint32_t>(cur - pos) - 1;
        fatal_lc(get_cline(), col, "unexpected end of input");
    }
}

} // end namespace re2c
