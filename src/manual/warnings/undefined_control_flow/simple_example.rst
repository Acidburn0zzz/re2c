A simple example
~~~~~~~~~~~~~~~~

Say, we want to match ``'a'``:

.. code-block:: cpp
    :linenos:

    /*!re2c
        "a" { return 'a'; }
    */

```re2c -i -Wundefined-control-flow```:

.. code-block:: cpp
    :linenos:

    /* Generated by re2c 0.14.1.dev on Thu Nov  5 14:35:46 2015*/
    
    {
            YYCTYPE yych;
            if (YYLIMIT <= YYCURSOR) YYFILL(1);
            yych = *YYCURSOR;
            switch (yych) {
            case 'a':       goto yy3;
            default:        goto yy2;
            }
    yy2:
    yy3:
            ++YYCURSOR;
            { return 'a'; }
    }

Clearly this is not what we want: this code matches any letter, not only ``'a'``.
re2c grumbles something about undefined control flow and says that default ``*`` rule won't hurt:

.. code-block:: none

    re2c: warning: line 3: control flow is undefined for strings that match '[\x0-\x60\x62-\xFF]', use default rule '*' [-Wundefined-control-flow]

Let's add it:

.. code-block:: cpp
    :linenos:

    /*!re2c
        *   { return '*'; }
        "a" { return 'a'; }
    */

Now that's better:

.. code-block:: cpp
    :linenos:

    /* Generated by re2c 0.14.1.dev on Thu Nov  5 14:35:08 2015*/
    
    {
            YYCTYPE yych;
            if (YYLIMIT <= YYCURSOR) YYFILL(1);
            yych = *YYCURSOR;
            switch (yych) {
            case 'a':       goto yy4;
            default:        goto yy2;
            }
    yy2:
            ++YYCURSOR;
            { return '*'; }
    yy4:
            ++YYCURSOR;
            { return 'a'; }
    }

Note that default rule brings no overhead: it simply binds code to default label.

