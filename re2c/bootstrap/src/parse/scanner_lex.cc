/* Generated by re2c 0.14.3 on Thu Aug  6 12:02:24 2015 */
#line 1 "../src/parse/scanner_lex.re"
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <sstream>

#include "src/ir/dfa/dfa.h"
#include "src/globals.h"
#include "src/parse/extop.h"
#include "src/parse/parser.h"
#include "src/parse/scanner.h"
#include "y.tab.h"

extern YYSTYPE yylval;

#ifndef MAX
#define MAX(a,b) (((a)>(b))?(a):(b))
#endif

#define	YYCTYPE		unsigned char
#define	YYCURSOR	cursor
#define	YYLIMIT		lim
#define	YYMARKER	ptr
#define	YYCTXMARKER ctx
#define	YYFILL(n)	{cursor = fill(cursor, n);}

#define	RETURN(i)	{cur = cursor; return i;}

namespace re2c
{

#line 51 "../src/parse/scanner_lex.re"


Scanner::ParseMode Scanner::echo()
{
	char *cursor = cur;
	bool ignore_eoc = false;
	int  ignore_cnt = 0;

	if (eof && cursor == eof) // Catch EOF
	{
		return Stop;
	}

	tok = cursor;
echo:

#line 51 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};

	if ((YYLIMIT - YYCURSOR) < 16) YYFILL(16);
	yych = *YYCURSOR;
	if (yych <= '%') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '$') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '*') {
			if (yych <= ')') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 191 "../src/parse/scanner_lex.re"
	{
					if (!(ignore_eoc || DFlag || flag_skeleton))
					{
						out.write((const char*)(tok), (const char*)(cursor) - (const char*)(tok) - 1);
						// -1 so we don't write out the \0
					}
					if(cursor == eof)
					{
						RETURN(Stop);
					}
				}
#line 122 "src/parse/scanner_lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 202 "../src/parse/scanner_lex.re"
	{
					goto echo;
				}
#line 130 "src/parse/scanner_lex.cc"
yy6:
	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy89;
	}
	if (yych == '#') goto yy91;
yy7:
#line 178 "../src/parse/scanner_lex.re"
	{
					if (ignore_eoc)
					{
						ignore_cnt++;
					}
					else if (!(DFlag || flag_skeleton))
					{
						out.write((const char*)(tok), (const char*)(cursor) - (const char*)(tok));
					}
					tok = pos = cursor;
					cline++;
					goto echo;
				}
#line 153 "src/parse/scanner_lex.cc"
yy8:
	yych = *++YYCURSOR;
	if (yych == '{') goto yy32;
	goto yy5;
yy9:
	yych = *++YYCURSOR;
	if (yych == '/') goto yy84;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych != '*') goto yy5;
	yych = *++YYCURSOR;
	if (yych == '!') goto yy13;
yy12:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy7;
		} else {
			goto yy5;
		}
	} else {
		goto yy85;
	}
yy13:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy16;
	case 'i':	goto yy15;
	case 'm':	goto yy17;
	case 'r':	goto yy19;
	case 't':	goto yy14;
	case 'u':	goto yy18;
	default:	goto yy12;
	}
yy14:
	yych = *++YYCURSOR;
	if (yych == 'y') goto yy74;
	goto yy12;
yy15:
	yych = *++YYCURSOR;
	if (yych == 'g') goto yy63;
	goto yy12;
yy16:
	yych = *++YYCURSOR;
	if (yych == 'e') goto yy50;
	goto yy12;
yy17:
	yych = *++YYCURSOR;
	if (yych == 'a') goto yy42;
	goto yy12;
yy18:
	yych = *++YYCURSOR;
	if (yych == 's') goto yy34;
	goto yy12;
yy19:
	yych = *++YYCURSOR;
	if (yych == 'e') goto yy20;
	if (yych == 'u') goto yy21;
	goto yy12;
yy20:
	yych = *++YYCURSOR;
	if (yych == '2') goto yy31;
	goto yy12;
yy21:
	yych = *++YYCURSOR;
	if (yych != 'l') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy12;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 80 "../src/parse/scanner_lex.re"
	{
					if (rFlag)
					{
						mapCodeName.clear();
					}
					else
					{
						fatal("found 'rules:re2c' block without -r flag");
					}
					tok = cursor;
					RETURN(Rules);
				}
#line 250 "src/parse/scanner_lex.cc"
yy31:
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy12;
yy32:
	++YYCURSOR;
#line 68 "../src/parse/scanner_lex.re"
	{
					if (rFlag)
					{
						fatal("found standard 're2c' block while using -r flag");
					}
					if (!(DFlag || flag_skeleton))
					{
						out.write((const char*)(tok), (const char*)(&cursor[-7]) - (const char*)(tok));
					}
					tok = cursor;
					RETURN(Parse);
				}
#line 269 "src/parse/scanner_lex.cc"
yy34:
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 92 "../src/parse/scanner_lex.re"
	{
					if (!rFlag)
					{
						fatal("found 'use:re2c' block without -r flag");
					}
					reuse();
					if (!(DFlag || flag_skeleton))
					{
						out.write((const char*)(tok), (const char*)(&cursor[-11]) - (const char*)(tok));
					}
					tok = cursor;
					RETURN(Reuse);
				}
#line 298 "src/parse/scanner_lex.cc"
yy42:
	yych = *++YYCURSOR;
	if (yych != 'x') goto yy12;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 105 "../src/parse/scanner_lex.re"
	{
					if (!DFlag)
					{
						out.insert_yymaxfill ();
					}
					tok = pos = cursor;
					ignore_eoc = true;
					goto echo;
				}
#line 323 "src/parse/scanner_lex.cc"
yy50:
	yych = *++YYCURSOR;
	if (yych != 't') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'a') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 114 "../src/parse/scanner_lex.re"
	{
					tok = pos = cursor;
					out.insert_state_goto (topIndent);
					ignore_eoc = true;
					goto echo;
				}
#line 355 "src/parse/scanner_lex.cc"
yy63:
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 120 "../src/parse/scanner_lex.re"
	{
					tok = pos = cursor;
					ignore_eoc = true;
					goto echo;
				}
#line 382 "src/parse/scanner_lex.cc"
yy74:
	yych = *++YYCURSOR;
	if (yych != 'p') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy12;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
#line 125 "../src/parse/scanner_lex.re"
	{
					tok = pos = cursor;
					ignore_eoc = true;
					if (!DFlag)
					{
						out.insert_line_info ();
						out << "\n";
						out.insert_types ();
						out << "\n";
						out.write_line_info (cline, get_fname ().c_str ());
					}
					goto echo;
				}
#line 415 "src/parse/scanner_lex.cc"
yy84:
	yyaccept = 2;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy87;
	if (yych == '\r') goto yy86;
yy85:
#line 156 "../src/parse/scanner_lex.re"
	{
					if (ignore_eoc)
					{
						if (ignore_cnt)
						{
							out << "\n";
							out.write_line_info (cline, get_fname ().c_str ());
						}
						ignore_eoc = false;
						ignore_cnt = 0;
					}
					else if (!(DFlag || flag_skeleton))
					{
						out.write((const char*)(tok), (const char*)(cursor) - (const char*)(tok));
					}
					tok = pos = cursor;
					goto echo;
				}
#line 441 "src/parse/scanner_lex.cc"
yy86:
	yych = *++YYCURSOR;
	if (yych != '\n') goto yy12;
yy87:
	++YYCURSOR;
#line 138 "../src/parse/scanner_lex.re"
	{
					cline++;
					if (ignore_eoc)
					{
						if (ignore_cnt)
						{
							out.write_line_info (cline, get_fname ().c_str ());
						}
						ignore_eoc = false;
						ignore_cnt = 0;
					}
					else if (!(DFlag || flag_skeleton))
					{
						out.write((const char*)(tok), (const char*)(cursor) - (const char*)(tok));
					}
					tok = pos = cursor;
					goto echo;
				}
#line 466 "src/parse/scanner_lex.cc"
yy89:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy89;
	}
	if (yych != '#') goto yy12;
yy91:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy91;
		goto yy12;
	} else {
		if (yych <= ' ') goto yy91;
		if (yych != 'l') goto yy12;
	}
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych <= '0') goto yy98;
	if (yych <= '9') goto yy12;
	goto yy98;
yy97:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy98:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy97;
		goto yy12;
	} else {
		if (yych <= ' ') goto yy97;
		if (yych <= '0') goto yy12;
		if (yych >= ':') goto yy12;
	}
yy99:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy99;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy12;
		if (yych <= '\t') goto yy101;
		if (yych <= '\n') goto yy103;
		goto yy12;
	} else {
		if (yych <= '\r') goto yy105;
		if (yych != ' ') goto yy12;
	}
yy101:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy101;
		goto yy12;
	} else {
		if (yych <= ' ') goto yy101;
		if (yych == '"') goto yy106;
		goto yy12;
	}
yy103:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 174 "../src/parse/scanner_lex.re"
	{
					set_sourceline(cursor);
					goto echo;
				}
#line 546 "src/parse/scanner_lex.cc"
yy105:
	yych = *++YYCURSOR;
	if (yych == '\n') goto yy103;
	goto yy12;
yy106:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy106;
	}
	if (yych <= '\n') goto yy12;
	if (yych <= '"') goto yy109;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy12;
	goto yy106;
yy109:
	++YYCURSOR;
	if ((yych = *YYCURSOR) == '\n') goto yy103;
	if (yych == '\r') goto yy105;
	goto yy12;
}
#line 205 "../src/parse/scanner_lex.re"

}

int Scanner::scan()
{
	char *cursor = cur;
	uint32_t depth;

scan:
	tchar = cursor - pos;
	tline = cline;
	tok = cursor;
	switch (lexer_state)
	{
		case LEX_NORMAL:       goto start;
		case LEX_CONFIG:       goto config;
		case LEX_CONFIG_VALUE: goto value;
		case LEX_FLEX_NAME:    goto flex_name;
	}

start:

#line 594 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 240,   0, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		240, 224,  96, 224, 224, 224, 224, 160, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		236, 236, 236, 236, 236, 236, 236, 236, 
		236, 236, 224, 224, 224, 224, 224, 224, 
		224, 232, 232, 232, 232, 232, 232, 232, 
		232, 232, 232, 232, 232, 232, 232, 232, 
		232, 232, 232, 232, 232, 232, 232, 232, 
		232, 232, 232, 224,   0, 192, 224, 232, 
		224, 232, 232, 232, 232, 232, 232, 232, 
		232, 232, 232, 232, 232, 232, 232, 232, 
		232, 232, 232, 232, 232, 232, 232, 232, 
		232, 232, 232, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
	};
	if ((YYLIMIT - YYCURSOR) < 6) YYFILL(6);
	yych = *YYCURSOR;
	if (yych <= '.') {
		if (yych <= '"') {
			if (yych <= '\f') {
				if (yych <= 0x08) goto yy112;
				if (yych <= '\t') goto yy114;
				if (yych <= '\n') goto yy116;
			} else {
				if (yych <= 0x1F) {
					if (yych <= '\r') goto yy118;
				} else {
					if (yych <= ' ') goto yy114;
					if (yych >= '"') goto yy119;
				}
			}
		} else {
			if (yych <= ')') {
				if (yych <= '%') {
					if (yych >= '%') goto yy121;
				} else {
					if (yych <= '&') goto yy112;
					if (yych <= '\'') goto yy122;
					goto yy124;
				}
			} else {
				if (yych <= '+') {
					if (yych <= '*') goto yy126;
					goto yy128;
				} else {
					if (yych <= ',') goto yy124;
					if (yych >= '.') goto yy130;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '<') {
				if (yych <= '9') {
					if (yych <= '/') goto yy132;
					goto yy133;
				} else {
					if (yych <= ':') goto yy134;
					if (yych <= ';') goto yy124;
					goto yy135;
				}
			} else {
				if (yych <= '?') {
					if (yych <= '>') goto yy124;
					goto yy128;
				} else {
					if (yych <= '@') goto yy112;
					if (yych <= 'Z') goto yy133;
					goto yy136;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy124;
				} else {
					if (yych != '`') goto yy133;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy138;
					goto yy133;
				} else {
					if (yych <= '{') goto yy139;
					if (yych <= '|') goto yy124;
				}
			}
		}
	}
yy112:
	++YYCURSOR;
yy113:
#line 436 "../src/parse/scanner_lex.re"
	{
					fatalf("unexpected character: '%c'", *tok);
					goto scan;
				}
#line 714 "src/parse/scanner_lex.cc"
yy114:
	++YYCURSOR;
	yych = *YYCURSOR;
	goto yy248;
yy115:
#line 420 "../src/parse/scanner_lex.re"
	{
					goto scan;
				}
#line 724 "src/parse/scanner_lex.cc"
yy116:
	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy226;
	} else {
		if (yych <= ' ') goto yy226;
		if (yych == '#') goto yy228;
	}
yy117:
#line 429 "../src/parse/scanner_lex.re"
	{
					if (cursor == eof) RETURN(0);
					pos = cursor;
					cline++;
					goto scan;
				}
#line 742 "src/parse/scanner_lex.cc"
yy118:
	yych = *++YYCURSOR;
	if (yych == '\n') goto yy225;
	goto yy113;
yy119:
	yyaccept = 1;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych != '\n') goto yy221;
yy120:
#line 285 "../src/parse/scanner_lex.re"
	{
					fatal("unterminated string constant (missing \")");
				}
#line 756 "src/parse/scanner_lex.cc"
yy121:
	yych = *++YYCURSOR;
	if (yych == '}') goto yy213;
	goto yy113;
yy122:
	yyaccept = 2;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych != '\n') goto yy216;
yy123:
#line 288 "../src/parse/scanner_lex.re"
	{
					fatal("unterminated string constant (missing ')");
				}
#line 770 "src/parse/scanner_lex.cc"
yy124:
	++YYCURSOR;
yy125:
#line 316 "../src/parse/scanner_lex.re"
	{
					RETURN(*tok);
				}
#line 778 "src/parse/scanner_lex.cc"
yy126:
	++YYCURSOR;
	if ((yych = *YYCURSOR) == '/') goto yy213;
#line 320 "../src/parse/scanner_lex.re"
	{
					yylval.op = *tok;
					RETURN(STAR);
				}
#line 787 "src/parse/scanner_lex.cc"
yy128:
	++YYCURSOR;
#line 324 "../src/parse/scanner_lex.re"
	{
					yylval.op = *tok;
					RETURN(CLOSE);
				}
#line 795 "src/parse/scanner_lex.cc"
yy130:
	++YYCURSOR;
#line 414 "../src/parse/scanner_lex.re"
	{
					cur = cursor;
					yylval.regexp = mkDot();
					return RANGE;
				}
#line 804 "src/parse/scanner_lex.cc"
yy132:
	yych = *++YYCURSOR;
	if (yych == '*') goto yy209;
	if (yych == '/') goto yy211;
	goto yy125;
yy133:
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	goto yy169;
yy134:
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	if (yych == '=') goto yy205;
	goto yy113;
yy135:
	yyaccept = 3;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == '!') goto yy196;
	if (yych == '>') goto yy198;
	goto yy125;
yy136:
	yyaccept = 4;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy137;
	if (yych == '^') goto yy188;
	goto yy187;
yy137:
#line 306 "../src/parse/scanner_lex.re"
	{
					fatal("unterminated range (missing ])");
				}
#line 836 "src/parse/scanner_lex.cc"
yy138:
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	if (yych == 'e') goto yy170;
	goto yy169;
yy139:
	yyaccept = 5;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') {
			if (yych == ',') goto yy147;
		} else {
			if (yych <= '0') goto yy141;
			if (yych <= '9') goto yy143;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') goto yy145;
			if (yych >= '_') goto yy145;
		} else {
			if (yych <= '`') goto yy140;
			if (yych <= 'z') goto yy145;
		}
	}
yy140:
#line 227 "../src/parse/scanner_lex.re"
	{
					depth = 1;
					goto code;
				}
#line 867 "src/parse/scanner_lex.cc"
yy141:
	yych = *++YYCURSOR;
	if (yych == ',') goto yy160;
	goto yy144;
yy142:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy117;
			} else {
				goto yy120;
			}
		} else {
			if (yyaccept == 2) {
				goto yy123;
			} else {
				goto yy125;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy137;
			} else {
				goto yy140;
			}
		} else {
			if (yyaccept == 6) {
				goto yy148;
			} else {
				goto yy176;
			}
		}
	}
yy143:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
yy144:
	if (yybm[0+yych] & 4) {
		goto yy143;
	}
	if (yych <= '^') {
		if (yych <= ',') {
			if (yych <= '+') goto yy142;
			goto yy153;
		} else {
			if (yych <= '@') goto yy142;
			if (yych >= '[') goto yy142;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy142;
		} else {
			if (yych == '}') goto yy151;
			goto yy142;
		}
	}
yy145:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 8) {
		goto yy145;
	}
	if (yych == '}') goto yy149;
	goto yy142;
yy147:
	++YYCURSOR;
yy148:
#line 352 "../src/parse/scanner_lex.re"
	{
					fatal("illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
				}
#line 943 "src/parse/scanner_lex.cc"
yy149:
	++YYCURSOR;
#line 356 "../src/parse/scanner_lex.re"
	{
					if (!FFlag) {
						fatal("curly braces for names only allowed with -F switch");
					}
					cur = cursor;
					yylval.str = new std::string (tok + 1, cur - tok - 2);
					return ID;
				}
#line 955 "src/parse/scanner_lex.cc"
yy151:
	++YYCURSOR;
#line 334 "../src/parse/scanner_lex.re"
	{
					yylval.extop.minsize = atoi((char *)tok+1);
					yylval.extop.maxsize = atoi((char *)tok+1);
					RETURN(CLOSESIZE);
				}
#line 964 "src/parse/scanner_lex.cc"
yy153:
	yyaccept = 6;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy148;
	if (yych <= '9') goto yy156;
	if (yych != '}') goto yy148;
	++YYCURSOR;
#line 346 "../src/parse/scanner_lex.re"
	{
					yylval.extop.minsize = atoi((char *)tok+1);
					yylval.extop.maxsize = -1;
					RETURN(CLOSESIZE);
				}
#line 978 "src/parse/scanner_lex.cc"
yy156:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= '/') goto yy142;
	if (yych <= '9') goto yy156;
	if (yych != '}') goto yy142;
	++YYCURSOR;
#line 340 "../src/parse/scanner_lex.re"
	{
					yylval.extop.minsize = atoi((char *)tok+1);
					yylval.extop.maxsize = MAX(yylval.extop.minsize,atoi(strchr((char *)tok, ',')+1));
					RETURN(CLOSESIZE);
				}
#line 993 "src/parse/scanner_lex.cc"
yy160:
	yyaccept = 6;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy148;
	if (yych <= '9') goto yy156;
	if (yych != '}') goto yy148;
	++YYCURSOR;
#line 329 "../src/parse/scanner_lex.re"
	{
					yylval.op = '*';
					RETURN(CLOSE);
				}
#line 1006 "src/parse/scanner_lex.cc"
yy163:
	++YYCURSOR;
yy164:
	YYCURSOR = YYCTXMARKER;
#line 393 "../src/parse/scanner_lex.re"
	{
					if (!FFlag) {
						cur = cursor;
						yylval.str = new std::string (tok, cur - tok);
						return ID;
					} else {
						/* Add one char in front and one behind instead of 's or "s */
						cur = cursor;
						SubStr s (tok, cur - tok);
						if (bCaseInsensitive || bCaseInverted)
						{
							yylval.regexp = strToCaseInsensitiveRE (s);
						}
						else
						{
							yylval.regexp = strToRE (s);
						}
						return STRING;
					}
				}
#line 1032 "src/parse/scanner_lex.cc"
yy165:
	yych = *++YYCURSOR;
	goto yy184;
yy166:
	++YYCURSOR;
yy167:
	YYCURSOR = YYCTXMARKER;
#line 387 "../src/parse/scanner_lex.re"
	{
					cur = ptr > tok ? ptr - 1 : cursor;
					yylval.str = new std::string (tok, cur - tok);
					return ID;
				}
#line 1046 "src/parse/scanner_lex.cc"
yy168:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
yy169:
	if (yych <= '9') {
		if (yych <= ' ') {
			if (yych == '\t') goto yy165;
			if (yych <= 0x1F) goto yy163;
			goto yy165;
		} else {
			if (yych == ',') goto yy166;
			if (yych <= '/') goto yy163;
			goto yy168;
		}
	} else {
		if (yych <= 'Z') {
			if (yych <= '<') goto yy163;
			if (yych <= '>') goto yy166;
			if (yych <= '@') goto yy163;
			goto yy168;
		} else {
			if (yych <= '_') {
				if (yych <= '^') goto yy163;
				goto yy168;
			} else {
				if (yych <= '`') goto yy163;
				if (yych <= 'z') goto yy168;
				goto yy163;
			}
		}
	}
yy170:
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy169;
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy169;
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy169;
	yych = *++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy164;
		if (yych <= '9') goto yy174;
		if (yych <= '@') goto yy164;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy164;
		} else {
			if (yych <= '`') goto yy164;
			if (yych >= '{') goto yy164;
		}
	}
yy174:
	yyaccept = 7;
	YYMARKER = ++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= '@') {
		if (yych <= '9') {
			if (yych >= '0') goto yy174;
		} else {
			if (yych <= ':') goto yy178;
			if (yych >= '@') goto yy177;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') goto yy174;
			if (yych >= '_') goto yy174;
		} else {
			if (yych <= '`') goto yy176;
			if (yych <= 'z') goto yy174;
		}
	}
yy176:
#line 365 "../src/parse/scanner_lex.re"
	{
					cur = cursor;
					tok += 5; /* skip "re2c:" */
					lexer_state = LEX_CONFIG;
					yylval.str = new std::string (tok, cur - tok);
					return CONFIG;
				}
#line 1133 "src/parse/scanner_lex.cc"
yy177:
	yych = *++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy142;
		if (yych <= '9') goto yy179;
		if (yych <= '@') goto yy142;
		goto yy179;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy142;
			goto yy179;
		} else {
			if (yych <= '`') goto yy142;
			if (yych <= 'z') goto yy179;
			goto yy142;
		}
	}
yy178:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy142;
		if (yych <= '9') goto yy174;
		if (yych <= '@') goto yy142;
		goto yy174;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy142;
			goto yy174;
		} else {
			if (yych <= '`') goto yy142;
			if (yych <= 'z') goto yy174;
			goto yy142;
		}
	}
yy179:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy176;
		if (yych <= '9') goto yy179;
		if (yych <= '@') goto yy176;
		goto yy179;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy176;
			goto yy179;
		} else {
			if (yych <= '`') goto yy176;
			if (yych <= 'z') goto yy179;
			goto yy176;
		}
	}
yy181:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 373 "../src/parse/scanner_lex.re"
	{
					cur = ptr > tok ? ptr - 1 : cursor;
					yylval.str = new std::string (tok, cur - tok);
					if (FFlag)
					{
						lexer_state = LEX_FLEX_NAME;
						return FID;
					}
					else
					{
						return ID;
					}
				}
#line 1206 "src/parse/scanner_lex.cc"
yy183:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy184:
	if (yybm[0+yych] & 16) {
		goto yy183;
	}
	if (yych == ',') goto yy185;
	if (yych <= '<') goto yy181;
	if (yych >= '?') goto yy181;
yy185:
	yych = *++YYCURSOR;
	goto yy167;
yy186:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy187:
	if (yybm[0+yych] & 32) {
		goto yy186;
	}
	if (yych <= '\n') goto yy142;
	if (yych <= '\\') goto yy190;
	goto yy191;
yy188:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= '[') {
		if (yych == '\n') goto yy142;
		goto yy188;
	} else {
		if (yych <= '\\') goto yy193;
		if (yych <= ']') goto yy194;
		goto yy188;
	}
yy190:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy142;
	goto yy186;
yy191:
	++YYCURSOR;
#line 299 "../src/parse/scanner_lex.re"
	{
					cur = cursor;
					SubStr s (tok, cur - tok);
					yylval.regexp = ranToRE (s);
					return RANGE;
				}
#line 1259 "src/parse/scanner_lex.cc"
yy193:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy142;
	goto yy188;
yy194:
	++YYCURSOR;
#line 292 "../src/parse/scanner_lex.re"
	{
					cur = cursor;
					SubStr s (tok, cur - tok);
					yylval.regexp = invToRE (s);
					return RANGE;
				}
#line 1275 "src/parse/scanner_lex.cc"
yy196:
	++YYCURSOR;
#line 313 "../src/parse/scanner_lex.re"
	{
					RETURN(SETUP);
				}
#line 1282 "src/parse/scanner_lex.cc"
yy198:
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	goto yy200;
yy199:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
yy200:
	if (yych <= '9') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy142;
			goto yy199;
		} else {
			if (yych == ' ') goto yy199;
			goto yy142;
		}
	} else {
		if (yych <= '=') {
			if (yych <= ':') goto yy204;
			if (yych <= '<') goto yy142;
			goto yy203;
		} else {
			if (yych != '{') goto yy142;
		}
	}
yy201:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 310 "../src/parse/scanner_lex.re"
	{
					RETURN(NOCOND);
				}
#line 1316 "src/parse/scanner_lex.cc"
yy203:
	yych = *++YYCURSOR;
	if (yych == '>') goto yy201;
	goto yy142;
yy204:
	yych = *++YYCURSOR;
	if (yych == '=') goto yy201;
	goto yy142;
yy205:
	++YYCURSOR;
	if ((yych = *YYCURSOR) == '>') goto yy207;
#line 236 "../src/parse/scanner_lex.re"
	{
					cur = cursor;
					tok += 2; /* skip ":=" */
					depth = 0;
					goto code;
				}
#line 1335 "src/parse/scanner_lex.cc"
yy207:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 232 "../src/parse/scanner_lex.re"
	{
					RETURN(*tok);
				}
#line 1343 "src/parse/scanner_lex.cc"
yy209:
	++YYCURSOR;
#line 246 "../src/parse/scanner_lex.re"
	{
					depth = 1;
					goto comment;
				}
#line 1351 "src/parse/scanner_lex.cc"
yy211:
	++YYCURSOR;
#line 243 "../src/parse/scanner_lex.re"
	{
				goto nextLine;
			}
#line 1358 "src/parse/scanner_lex.cc"
yy213:
	++YYCURSOR;
#line 252 "../src/parse/scanner_lex.re"
	{
					tok = cursor;
					RETURN(0);
				}
#line 1366 "src/parse/scanner_lex.cc"
yy215:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy216:
	if (yybm[0+yych] & 64) {
		goto yy215;
	}
	if (yych <= '\n') goto yy142;
	if (yych <= '\'') goto yy218;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy142;
	goto yy215;
yy218:
	++YYCURSOR;
#line 271 "../src/parse/scanner_lex.re"
	{
					cur = cursor;
					SubStr s (tok + 1, cur - tok - 2);
					if (bCaseInverted)
					{
						yylval.regexp = strToRE (s);
					}
					else
					{
						yylval.regexp = strToCaseInsensitiveRE (s);
					}
					return STRING;
				}
#line 1398 "src/parse/scanner_lex.cc"
yy220:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy221:
	if (yybm[0+yych] & 128) {
		goto yy220;
	}
	if (yych <= '\n') goto yy142;
	if (yych <= '"') goto yy223;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy142;
	goto yy220;
yy223:
	++YYCURSOR;
#line 257 "../src/parse/scanner_lex.re"
	{
					cur = cursor;
					SubStr s (tok + 1, cur - tok - 2);
					if (bCaseInsensitive || bCaseInverted)
					{
						yylval.regexp = strToCaseInsensitiveRE (s);
					}
					else
					{
						yylval.regexp = strToRE (s);
					}
					return STRING;
				}
#line 1430 "src/parse/scanner_lex.cc"
yy225:
	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych != '\t') goto yy117;
	} else {
		if (yych <= ' ') goto yy226;
		if (yych == '#') goto yy228;
		goto yy117;
	}
yy226:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy226;
		goto yy142;
	} else {
		if (yych <= ' ') goto yy226;
		if (yych != '#') goto yy142;
	}
yy228:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy228;
		goto yy142;
	} else {
		if (yych <= ' ') goto yy228;
		if (yych != 'l') goto yy142;
	}
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy142;
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy142;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy142;
	yych = *++YYCURSOR;
	if (yych <= '0') goto yy235;
	if (yych <= '9') goto yy142;
	goto yy235;
yy234:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy235:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy234;
		goto yy142;
	} else {
		if (yych <= ' ') goto yy234;
		if (yych <= '0') goto yy142;
		if (yych >= ':') goto yy142;
	}
yy236:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy142;
		} else {
			if (yych <= '\n') goto yy240;
			if (yych <= '\f') goto yy142;
			goto yy242;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy142;
		} else {
			if (yych <= '/') goto yy142;
			if (yych <= '9') goto yy236;
			goto yy142;
		}
	}
yy238:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy238;
		goto yy142;
	} else {
		if (yych <= ' ') goto yy238;
		if (yych == '"') goto yy243;
		goto yy142;
	}
yy240:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 424 "../src/parse/scanner_lex.re"
	{
					set_sourceline(cursor);
					goto scan;
				}
#line 1528 "src/parse/scanner_lex.cc"
yy242:
	yych = *++YYCURSOR;
	if (yych == '\n') goto yy240;
	goto yy142;
yy243:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = *YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy142;
		goto yy243;
	} else {
		if (yych <= '"') goto yy246;
		if (yych != '\\') goto yy243;
	}
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy142;
	goto yy243;
yy246:
	yych = *++YYCURSOR;
	if (yych == '\n') goto yy240;
	if (yych == '\r') goto yy242;
	goto yy142;
yy247:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy248:
	if (yych == '\t') goto yy247;
	if (yych == ' ') goto yy247;
	goto yy115;
}
#line 440 "../src/parse/scanner_lex.re"


flex_name:

#line 1568 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy253;
	if (yych == '\r') goto yy255;
	++YYCURSOR;
yy252:
#line 451 "../src/parse/scanner_lex.re"
	{
		YYCURSOR = tok;
		goto start;
	}
#line 1582 "src/parse/scanner_lex.cc"
yy253:
	++YYCURSOR;
yy254:
#line 445 "../src/parse/scanner_lex.re"
	{
		YYCURSOR = tok;
		lexer_state = LEX_NORMAL;
		return FID_END;
	}
#line 1592 "src/parse/scanner_lex.cc"
yy255:
	yych = *++YYCURSOR;
	if (yych != '\n') goto yy252;
	++YYCURSOR;
	yych = *YYCURSOR;
	goto yy254;
}
#line 455 "../src/parse/scanner_lex.re"


code:

#line 1605 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48, 112,   0,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		112,  48,  16,  48,  48,  48,  48,  32, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		176, 176, 176, 176, 176, 176, 176, 176, 
		176, 176,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,   0,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = *YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy259;
			if (yych <= '\t') goto yy261;
			goto yy263;
		} else {
			if (yych == '"') goto yy265;
			goto yy261;
		}
	} else {
		if (yych <= '{') {
			if (yych <= '\'') goto yy266;
			if (yych <= 'z') goto yy261;
			goto yy267;
		} else {
			if (yych == '}') goto yy269;
			goto yy261;
		}
	}
yy259:
	++YYCURSOR;
#line 520 "../src/parse/scanner_lex.re"
	{
					if (cursor == eof)
					{
						if (depth)
						{
							fatal("missing '}'");
						}
						RETURN(0);
					}
					goto code;
				}
#line 1678 "src/parse/scanner_lex.cc"
yy261:
	++YYCURSOR;
yy262:
#line 534 "../src/parse/scanner_lex.re"
	{
					goto code;
				}
#line 1686 "src/parse/scanner_lex.cc"
yy263:
	YYCTXMARKER = YYCURSOR + 1;
	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy280;
		} else {
			if (yych <= '\n') goto yy282;
			if (yych >= '\r') goto yy282;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy280;
		} else {
			if (yych == '#') goto yy283;
		}
	}
yy264:
#line 500 "../src/parse/scanner_lex.re"
	{
					if (depth == 0)
					{
						cur = cursor;
						tok += strspn(tok, " \t\r\n");
						while (cur > tok && strchr(" \t\r\n", cur[-1]))
						{
							--cur;
						}
						yylval.code = new Code (tok, cur - tok, get_fname (), tline);
						return CODE;
					}
					else if (cursor == eof)
					{
						fatal("missing '}'");
					}
					pos = cursor;
					cline++;
					goto code;
				}
#line 1727 "src/parse/scanner_lex.cc"
yy265:
	yyaccept = 1;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy262;
	goto yy278;
yy266:
	yyaccept = 1;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy262;
	goto yy272;
yy267:
	++YYCURSOR;
#line 472 "../src/parse/scanner_lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else
					{
						++depth;
					}
					goto code;
				}
#line 1752 "src/parse/scanner_lex.cc"
yy269:
	++YYCURSOR;
#line 459 "../src/parse/scanner_lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else if (--depth == 0)
					{
						cur = cursor;
						yylval.code = new Code (tok, cur - tok, get_fname (), tline);
						return CODE;
					}
					goto code;
				}
#line 1769 "src/parse/scanner_lex.cc"
yy271:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy272:
	if (yybm[0+yych] & 16) {
		goto yy271;
	}
	if (yych <= '\n') goto yy273;
	if (yych <= '\'') goto yy275;
	goto yy274;
yy273:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy264;
		} else {
			goto yy262;
		}
	} else {
		goto yy281;
	}
yy274:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy273;
	goto yy271;
yy275:
	++YYCURSOR;
#line 531 "../src/parse/scanner_lex.re"
	{
					goto code;
				}
#line 1804 "src/parse/scanner_lex.cc"
yy277:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy278:
	if (yybm[0+yych] & 32) {
		goto yy277;
	}
	if (yych <= '\n') goto yy273;
	if (yych <= '"') goto yy275;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy273;
	goto yy277;
yy280:
	yyaccept = 2;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy302;
	} else {
		if (yych <= ' ') goto yy302;
		if (yych == '#') goto yy283;
	}
yy281:
	YYCURSOR = YYCTXMARKER;
#line 487 "../src/parse/scanner_lex.re"
	{
					if (depth == 0)
					{
						goto code;
					}
					else if (cursor == eof)
					{
						fatal("missing '}'");
					}
					pos = cursor;
					cline++;
					goto code;
				}
#line 1845 "src/parse/scanner_lex.cc"
yy282:
	yych = *++YYCURSOR;
	goto yy281;
yy283:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy283;
	}
	if (yych != 'l') goto yy273;
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy273;
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy273;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy273;
	yych = *++YYCURSOR;
	if (yych <= '0') goto yy290;
	if (yych <= '9') goto yy273;
	goto yy290;
yy289:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy290:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy289;
		goto yy273;
	} else {
		if (yych <= ' ') goto yy289;
		if (yych <= '0') goto yy273;
		if (yych >= ':') goto yy273;
	}
yy291:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy291;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy273;
		if (yych <= '\t') goto yy293;
		if (yych <= '\n') goto yy295;
		goto yy273;
	} else {
		if (yych <= '\r') goto yy297;
		if (yych != ' ') goto yy273;
	}
yy293:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy293;
		goto yy273;
	} else {
		if (yych <= ' ') goto yy293;
		if (yych == '"') goto yy298;
		goto yy273;
	}
yy295:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 483 "../src/parse/scanner_lex.re"
	{
					set_sourceline(cursor);
					goto code;
				}
#line 1917 "src/parse/scanner_lex.cc"
yy297:
	yych = *++YYCURSOR;
	if (yych == '\n') goto yy295;
	goto yy273;
yy298:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = *YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy273;
		goto yy298;
	} else {
		if (yych <= '"') goto yy301;
		if (yych != '\\') goto yy298;
	}
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy273;
	goto yy298;
yy301:
	yych = *++YYCURSOR;
	if (yych == '\n') goto yy295;
	if (yych == '\r') goto yy297;
	goto yy273;
yy302:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy302;
		goto yy273;
	} else {
		if (yych <= ' ') goto yy302;
		if (yych == '#') goto yy283;
		goto yy273;
	}
}
#line 537 "../src/parse/scanner_lex.re"


comment:

#line 1961 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= ')') {
		if (yych == '\n') goto yy308;
	} else {
		if (yych <= '*') goto yy310;
		if (yych == '/') goto yy311;
	}
	++YYCURSOR;
yy307:
#line 569 "../src/parse/scanner_lex.re"
	{
					if (cursor == eof)
					{
						RETURN(0);
					}
					goto comment;
				}
#line 2016 "src/parse/scanner_lex.cc"
yy308:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy316;
	}
	if (yych == '#') goto yy319;
yy309:
#line 560 "../src/parse/scanner_lex.re"
	{
					if (cursor == eof)
					{
						RETURN(0);
					}
					tok = pos = cursor;
					cline++;
					goto comment;
				}
#line 2034 "src/parse/scanner_lex.cc"
yy310:
	yych = *++YYCURSOR;
	if (yych == '/') goto yy314;
	goto yy307;
yy311:
	yych = *++YYCURSOR;
	if (yych != '*') goto yy307;
	++YYCURSOR;
#line 551 "../src/parse/scanner_lex.re"
	{
					++depth;
					fatal("ambiguous /* found");
					goto comment;
				}
#line 2049 "src/parse/scanner_lex.cc"
yy314:
	++YYCURSOR;
#line 541 "../src/parse/scanner_lex.re"
	{
					if (--depth == 0)
					{
						goto scan;
					}
					else
					{
						goto comment;
					}
				}
#line 2063 "src/parse/scanner_lex.cc"
yy316:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy316;
	}
	if (yych == '#') goto yy319;
yy318:
	YYCURSOR = YYMARKER;
	goto yy309;
yy319:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy319;
		goto yy318;
	} else {
		if (yych <= ' ') goto yy319;
		if (yych != 'l') goto yy318;
	}
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy318;
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy318;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy318;
	yych = *++YYCURSOR;
	if (yych <= '0') goto yy326;
	if (yych <= '9') goto yy318;
	goto yy326;
yy325:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy326:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy325;
		goto yy318;
	} else {
		if (yych <= ' ') goto yy325;
		if (yych <= '0') goto yy318;
		if (yych >= ':') goto yy318;
	}
yy327:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy327;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy318;
		if (yych <= '\t') goto yy329;
		if (yych <= '\n') goto yy331;
		goto yy318;
	} else {
		if (yych <= '\r') goto yy333;
		if (yych != ' ') goto yy318;
	}
yy329:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy329;
		goto yy318;
	} else {
		if (yych <= ' ') goto yy329;
		if (yych == '"') goto yy334;
		goto yy318;
	}
yy331:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 556 "../src/parse/scanner_lex.re"
	{
					set_sourceline(cursor);
					goto comment;
				}
#line 2146 "src/parse/scanner_lex.cc"
yy333:
	yych = *++YYCURSOR;
	if (yych == '\n') goto yy331;
	goto yy318;
yy334:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy334;
	}
	if (yych <= '\n') goto yy318;
	if (yych <= '"') goto yy337;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy318;
	goto yy334;
yy337:
	++YYCURSOR;
	if ((yych = *YYCURSOR) == '\n') goto yy331;
	if (yych == '\r') goto yy333;
	goto yy318;
}
#line 576 "../src/parse/scanner_lex.re"


nextLine:

#line 2176 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy342;
	++YYCURSOR;
#line 587 "../src/parse/scanner_lex.re"
	{  if(cursor == eof) {
                  RETURN(0);
               }
               goto nextLine;
            }
#line 2189 "src/parse/scanner_lex.cc"
yy342:
	++YYCURSOR;
#line 580 "../src/parse/scanner_lex.re"
	{ if(cursor == eof) {
                  RETURN(0);
               }
               tok = pos = cursor;
               cline++;
               goto scan;
            }
#line 2200 "src/parse/scanner_lex.cc"
}
#line 592 "../src/parse/scanner_lex.re"


config:

#line 2207 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy348;
	} else {
		if (yych <= ' ') goto yy348;
		if (yych == '=') goto yy350;
	}
	++YYCURSOR;
#line 604 "../src/parse/scanner_lex.re"
	{
					fatal("missing '='");
				}
#line 2257 "src/parse/scanner_lex.cc"
yy348:
	++YYCURSOR;
	yych = *YYCURSOR;
	goto yy355;
yy349:
#line 596 "../src/parse/scanner_lex.re"
	{
					goto config;
				}
#line 2267 "src/parse/scanner_lex.cc"
yy350:
	++YYCURSOR;
	yych = *YYCURSOR;
	goto yy353;
yy351:
#line 599 "../src/parse/scanner_lex.re"
	{
					lexer_state = LEX_CONFIG_VALUE;
					cur = cursor;
					RETURN('=');
				}
#line 2279 "src/parse/scanner_lex.cc"
yy352:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy353:
	if (yybm[0+yych] & 128) {
		goto yy352;
	}
	goto yy351;
yy354:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy355:
	if (yych == '\t') goto yy354;
	if (yych == ' ') goto yy354;
	goto yy349;
}
#line 607 "../src/parse/scanner_lex.re"


value:

#line 2303 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 192,   0, 248, 248, 192, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		192, 248, 104, 248, 248, 248, 248, 152, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		252, 252, 252, 252, 252, 252, 252, 252, 
		252, 252, 248, 192, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248,   8, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\r') {
			if (yych <= 0x08) goto yy364;
			if (yych <= '\n') goto yy358;
			if (yych <= '\f') goto yy364;
		} else {
			if (yych <= ' ') {
				if (yych <= 0x1F) goto yy364;
			} else {
				if (yych == '"') goto yy366;
				goto yy364;
			}
		}
	} else {
		if (yych <= '/') {
			if (yych <= '\'') goto yy368;
			if (yych == '-') goto yy361;
			goto yy364;
		} else {
			if (yych <= '9') {
				if (yych <= '0') goto yy359;
				goto yy362;
			} else {
				if (yych != ';') goto yy364;
			}
		}
	}
yy358:
#line 617 "../src/parse/scanner_lex.re"
	{
					cur = cursor;
					yylval.str = new std::string (tok, cur - tok);
					lexer_state = LEX_NORMAL;
					return VALUE;
				}
#line 2377 "src/parse/scanner_lex.cc"
yy359:
	++YYCURSOR;
	if (yybm[0+(yych = *YYCURSOR)] & 8) {
		goto yy364;
	}
yy360:
#line 611 "../src/parse/scanner_lex.re"
	{
					cur = cursor;
					yylval.number = atoi(std::string (tok, cur - tok).c_str());
					lexer_state = LEX_NORMAL;
					return NUMBER;
				}
#line 2391 "src/parse/scanner_lex.cc"
yy361:
	yych = *++YYCURSOR;
	if (yych <= '0') goto yy365;
	if (yych >= ':') goto yy365;
yy362:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 4) {
		goto yy362;
	}
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy364;
		if (yych <= '\n') goto yy360;
		if (yych >= '\r') goto yy360;
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy360;
		} else {
			if (yych == ';') goto yy360;
		}
	}
yy364:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy365:
	if (yybm[0+yych] & 8) {
		goto yy364;
	}
	goto yy358;
yy366:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy366;
	}
	if (yych <= ' ') {
		if (yych == '\n') goto yy358;
		goto yy376;
	} else {
		if (yych <= '"') goto yy364;
		if (yych <= ';') goto yy376;
		goto yy378;
	}
yy368:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy368;
	}
	if (yych <= ' ') {
		if (yych == '\n') goto yy358;
	} else {
		if (yych <= '\'') goto yy364;
		if (yych >= '<') goto yy373;
	}
yy370:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy370;
	}
	if (yych <= '\n') goto yy372;
	if (yych <= '\'') goto yy374;
	goto yy375;
yy372:
	YYCURSOR = YYMARKER;
	goto yy358;
yy373:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy368;
			goto yy370;
		} else {
			if (yych <= '\n') goto yy358;
			if (yych <= '\f') goto yy368;
			goto yy370;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy368;
			goto yy370;
		} else {
			if (yych == ';') goto yy370;
			goto yy368;
		}
	}
yy374:
	yych = *++YYCURSOR;
	goto yy358;
yy375:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy372;
	goto yy370;
yy376:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy376;
	}
	if (yych <= '\n') goto yy372;
	if (yych <= '"') goto yy374;
	goto yy379;
yy378:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy366;
			goto yy376;
		} else {
			if (yych <= '\n') goto yy358;
			if (yych <= '\f') goto yy366;
			goto yy376;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy366;
			goto yy376;
		} else {
			if (yych == ';') goto yy376;
			goto yy366;
		}
	}
yy379:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy372;
	goto yy376;
}
#line 623 "../src/parse/scanner_lex.re"

}

static void escape (std::string & dest, const std::string & src)
{
	dest = src;
	size_t l = dest.length();
	for (size_t p = 0; p < l; ++p)
	{
		if (dest[p] == '\\')
		{
			dest.insert(++p, "\\");
			++l;
		}
	}
}

void Scanner::set_sourceline(char *& cursor) 
{
sourceline:
	tok = cursor;

#line 2557 "src/parse/scanner_lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy384;
	} else {
		if (yych <= '"') goto yy386;
		if (yych <= '0') goto yy382;
		if (yych <= '9') goto yy387;
	}
yy382:
	++YYCURSOR;
yy383:
#line 667 "../src/parse/scanner_lex.re"
	{
  					goto sourceline;
  				}
#line 2610 "src/parse/scanner_lex.cc"
yy384:
	++YYCURSOR;
#line 655 "../src/parse/scanner_lex.re"
	{
  					if (cursor == eof)
  					{
						--cursor; 
					}
			  		else
			  		{
			  			pos = cursor; 
			  		}
			  		tok = cursor;
			  		return; 
				}
#line 2626 "src/parse/scanner_lex.cc"
yy386:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy383;
	goto yy392;
yy387:
	++YYCURSOR;
	yych = *YYCURSOR;
	goto yy390;
yy388:
#line 645 "../src/parse/scanner_lex.re"
	{
					cur = cursor;
					cline = atoi(std::string (tok, cur - tok).c_str());
					goto sourceline; 
				}
#line 2642 "src/parse/scanner_lex.cc"
yy389:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy390:
	if (yybm[0+yych] & 64) {
		goto yy389;
	}
	goto yy388;
yy391:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy392:
	if (yybm[0+yych] & 128) {
		goto yy391;
	}
	if (yych <= '\n') goto yy393;
	if (yych <= '"') goto yy395;
	goto yy394;
yy393:
	YYCURSOR = YYMARKER;
	goto yy383;
yy394:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy393;
	goto yy391;
yy395:
	++YYCURSOR;
#line 650 "../src/parse/scanner_lex.re"
	{
					cur = cursor;
					escape (in.file_name, std::string (tok + 1, cur - tok - 2));
			  		goto sourceline; 
				}
#line 2680 "src/parse/scanner_lex.cc"
}
#line 670 "../src/parse/scanner_lex.re"

}

} // end namespace re2c
