/* Generated by re2c 0.16 on Wed May 11 15:38:08 2016 */
#line 1 "../src/parse/lex.re"
#include "src/util/c99_stdint.h"
#include <stddef.h>
#include <string.h>
#include <algorithm>
#include <limits>
#include <string>

#include "src/codegen/output.h"
#include "src/conf/opt.h"
#include "src/conf/warn.h"
#include "src/globals.h"
#include "src/ir/regexp/encoding/enc.h"
#include "src/ir/regexp/regexp.h"
#include "src/parse/code.h"
#include "src/parse/extop.h"
#include "src/parse/input.h"
#include "src/parse/scanner.h"
#include "src/parse/parser.h" // needed by "y.tab.h"
#include "src/parse/unescape.h"
#include "src/util/range.h"
#include "src/util/s_to_n32_unsafe.h"
#include "y.tab.h"

extern YYSTYPE yylval;

#define	YYCTYPE		unsigned char
#define	YYCURSOR	cur
#define	YYLIMIT		lim
#define	YYMARKER	ptr
#define	YYCTXMARKER ctx
#define	YYFILL(n)	{ fill (n); }

namespace re2c
{

// source code is in ASCII: pointers have type 'char *'
// but re2c makes an implicit assumption that YYCTYPE is unsigned
// when it generates comparisons
#line 41 "../src/parse/lex.re"


#line 62 "../src/parse/lex.re"


Scanner::ParseMode Scanner::echo()
{
	if (eof && cur == eof) // Catch EOF
	{
		return Stop;
	}

	tok = cur;
echo:
	const char *start = cur;


#line 60 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 16) YYFILL(16);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 153 "../src/parse/lex.re"
	{
		if (cur == eof) {
			if (opts->target == opt_t::CODE) {
				out.wraw(tok, start);
			}
			return Stop;
		}
		goto echo;
	}
#line 128 "src/parse/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 174 "../src/parse/lex.re"
	{ goto echo; }
#line 134 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 168 "../src/parse/lex.re"
	{
		cline++;
		pos = cur;
		goto echo;
	}
#line 149 "src/parse/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy7;
	} else {
		goto yy5;
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 76 "../src/parse/lex.re"
	{
		if (opts->rFlag) {
			fatal("found standard 're2c' block while using -r flag");
		}
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		return Parse;
	}
#line 202 "src/parse/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'i':	goto yy23;
	case 'm':	goto yy24;
	case 'r':	goto yy25;
	case 't':	goto yy26;
	case 'u':	goto yy27;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy28;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy29;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy30;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy31;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy32;
	if (yych == 'u') goto yy33;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy34;
	if (yych == 'y') goto yy35;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy36;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy37;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy38;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy39;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy40;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy41;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy42;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy43;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy44;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy45;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy47;
	if (yych <= '9') goto yy13;
	goto yy47;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy48;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy49;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy50;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy51;
	goto yy13;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy52;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy53;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy54;
	goto yy13;
yy46:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy47:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy46;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy46;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			YYCTXMARKER = YYCURSOR;
			goto yy55;
		}
		goto yy13;
	}
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy57;
	goto yy13;
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy58;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy59;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy60;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy61;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy62;
	goto yy13;
yy54:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy63;
	goto yy13;
yy55:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy55;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy64;
		if (yych <= '\n') goto yy66;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy68;
		if (yych == ' ') goto yy64;
		goto yy13;
	}
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy69;
	goto yy13;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy70;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy71;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy72;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy73;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy74;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy75;
	goto yy13;
yy64:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy64;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy64;
		if (yych == '"') goto yy76;
		goto yy13;
	}
yy66:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 163 "../src/parse/lex.re"
	{
		set_sourceline();
		goto echo;
	}
#line 435 "src/parse/lex.cc"
yy68:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy66;
	goto yy13;
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy78;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy79;
	goto yy13;
yy71:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy80;
	goto yy13;
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy81;
	goto yy13;
yy73:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy82;
	goto yy13;
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy83;
	goto yy13;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy84;
	goto yy13;
yy76:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy76;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy85;
	goto yy86;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy87;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy88;
	goto yy13;
yy80:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy89;
	goto yy13;
yy81:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy91;
	goto yy13;
yy82:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy92;
	goto yy13;
yy83:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy93;
	goto yy13;
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy94;
	goto yy13;
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy66;
	if (yych == '\r') goto yy68;
	goto yy13;
yy86:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy13;
	goto yy76;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy96;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy97;
	goto yy13;
yy89:
	++YYCURSOR;
#line 116 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start)
				.wdelay_yymaxfill();
		}
		lex_end_of_comment();
		goto echo;
	}
#line 536 "src/parse/lex.cc"
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy98;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy99;
	goto yy13;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy101;
	goto yy13;
yy94:
	++YYCURSOR;
#line 97 "../src/parse/lex.re"
	{
		if (!opts->rFlag) {
			fatal("found 'use:re2c' block without -r flag");
		}
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		reuse();
		return Reuse;
	}
#line 562 "src/parse/lex.cc"
yy96:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy102;
	goto yy13;
yy97:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy103;
	goto yy13;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy104;
	goto yy13;
yy99:
	++YYCURSOR;
#line 145 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		lex_tags();
		goto echo;
	}
#line 585 "src/parse/lex.cc"
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy106;
	goto yy13;
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy108;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy109;
	goto yy13;
yy104:
	++YYCURSOR;
#line 86 "../src/parse/lex.re"
	{
		if (!opts->rFlag) {
			fatal("found 'rules:re2c' block without -r flag");
		}
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		opts.reset_mapCodeName ();
		return Rules;
	}
#line 611 "src/parse/lex.cc"
yy106:
	++YYCURSOR;
#line 134 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start)
				.wdelay_line_info()
				.wdelay_types()
				.wline_info(cline, get_fname().c_str());
		}
		lex_end_of_comment();
		goto echo;
	}
#line 625 "src/parse/lex.cc"
yy108:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy111;
	goto yy13;
yy109:
	++YYCURSOR;
#line 108 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start);
		}
		lex_end_of_comment();
		goto echo;
	}
#line 640 "src/parse/lex.cc"
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
#line 125 "../src/parse/lex.re"
	{
		if (opts->target == opt_t::CODE) {
			out.wraw(tok, start)
				.wdelay_state_goto(opts->topIndent);
		}
		lex_end_of_comment();
		goto echo;
	}
#line 654 "src/parse/lex.cc"
}
#line 175 "../src/parse/lex.re"

}

void Scanner::lex_end_of_comment()
{
	uint32_t ignored = 0;
	for (;;) {
#line 664 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy116;
		if (yych == '\n') goto yy120;
		goto yy118;
	} else {
		if (yych <= '\r') goto yy122;
		if (yych == '*') goto yy123;
		goto yy118;
	}
yy116:
	++YYCURSOR;
#line 182 "../src/parse/lex.re"
	{ fatal("expected end of block"); }
#line 682 "src/parse/lex.cc"
yy118:
	++YYCURSOR;
yy119:
#line 184 "../src/parse/lex.re"
	{ continue; }
#line 688 "src/parse/lex.cc"
yy120:
	++YYCURSOR;
#line 185 "../src/parse/lex.re"
	{ ++ignored; continue; }
#line 693 "src/parse/lex.cc"
yy122:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy120;
	goto yy119;
yy123:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy119;
	++YYCURSOR;
#line 186 "../src/parse/lex.re"
	{
			if (ignored > 0) {
				cline += ignored;
				out.ws("\n").wline_info(cline, get_fname().c_str());
			}
			tok = pos = cur;
			return;
		}
#line 711 "src/parse/lex.cc"
}
#line 194 "../src/parse/lex.re"
}
}

void Scanner::lex_tags()
{
	ConfTags conf;
	for (;;) {
#line 721 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy130;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy133;
		} else {
			if (yych == '\r') goto yy135;
		}
	} else {
		if (yych <= 'l') {
			if (yych <= '*') goto yy136;
			if (yych >= 'l') goto yy137;
		} else {
			if (yych == 's') goto yy138;
		}
	}
	++YYCURSOR;
yy129:
#line 201 "../src/parse/lex.re"
	{ fatal("unrecognized configuration"); }
#line 781 "src/parse/lex.cc"
yy130:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy130;
	}
#line 206 "../src/parse/lex.re"
	{ continue; }
#line 791 "src/parse/lex.cc"
yy133:
	++YYCURSOR;
#line 207 "../src/parse/lex.re"
	{ ++cline; continue; }
#line 796 "src/parse/lex.cc"
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy133;
	goto yy129;
yy136:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy139;
	goto yy129;
yy137:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'i') goto yy141;
	goto yy129;
yy138:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy143;
	goto yy129;
yy139:
	++YYCURSOR;
#line 208 "../src/parse/lex.re"
	{
			if (opts->target == opt_t::CODE) {
				out.wdelay_tags(opts->topIndent,
					new ConfTags(conf));
			}
			tok = pos = cur;
			return;
		}
#line 824 "src/parse/lex.cc"
yy141:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy144;
yy142:
	YYCURSOR = YYMARKER;
	goto yy129;
yy143:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy145;
	goto yy142;
yy144:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy147;
	goto yy142;
yy145:
	++YYCURSOR;
#line 204 "../src/parse/lex.re"
	{ conf.sep  = lex_conf_string(); continue; }
#line 843 "src/parse/lex.cc"
yy147:
	++YYCURSOR;
#line 203 "../src/parse/lex.re"
	{ conf.line = lex_conf_string(); continue; }
#line 848 "src/parse/lex.cc"
}
#line 216 "../src/parse/lex.re"
}
}

int Scanner::scan()
{
	uint32_t depth;

scan:
	tchar = cur - pos;
	tline = cline;
	tok = cur;
	switch (lexer_state)
	{
		case LEX_NORMAL:    goto start;
		case LEX_FLEX_NAME: goto flex_name;
	}

start:

#line 870 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 6) YYFILL(6);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy153;
	}
	if (yych <= '9') {
		if (yych <= '&') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy151;
				if (yych <= '\n') goto yy156;
				if (yych >= '\r') goto yy158;
			} else {
				if (yych <= '"') {
					if (yych >= '"') goto yy159;
				} else {
					if (yych == '%') goto yy161;
				}
			}
		} else {
			if (yych <= '+') {
				if (yych <= '\'') goto yy162;
				if (yych <= ')') goto yy164;
				if (yych <= '*') goto yy166;
				goto yy168;
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy164;
				} else {
					if (yych <= '.') goto yy170;
					if (yych <= '/') goto yy172;
					goto yy173;
				}
			}
		}
	} else {
		if (yych <= '\\') {
			if (yych <= '>') {
				if (yych <= ':') goto yy174;
				if (yych == '<') goto yy175;
				goto yy164;
			} else {
				if (yych <= '@') {
					if (yych <= '?') goto yy168;
					goto yy176;
				} else {
					if (yych <= 'Z') goto yy173;
					if (yych <= '[') goto yy177;
					goto yy164;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych == '_') goto yy173;
				if (yych >= 'a') goto yy173;
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy179;
					goto yy173;
				} else {
					if (yych <= '{') goto yy180;
					if (yych <= '|') goto yy164;
				}
			}
		}
	}
yy151:
	++YYCURSOR;
yy152:
#line 398 "../src/parse/lex.re"
	{
					fatalf("unexpected character: '%c'", *tok);
					goto scan;
				}
#line 981 "src/parse/lex.cc"
yy153:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy153;
	}
#line 382 "../src/parse/lex.re"
	{
					goto scan;
				}
#line 993 "src/parse/lex.cc"
yy156:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy182;
	} else {
		if (yych <= ' ') goto yy182;
		if (yych == '#') goto yy185;
	}
yy157:
#line 391 "../src/parse/lex.re"
	{
					if (cur == eof) return 0;
					pos = cur;
					cline++;
					goto scan;
				}
#line 1011 "src/parse/lex.cc"
yy158:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy156;
	goto yy152;
yy159:
	++YYCURSOR;
#line 265 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"',  opts->bCaseInsensitive ||  opts->bCaseInverted); return TOKEN_REGEXP; }
#line 1020 "src/parse/lex.cc"
yy161:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy187;
	goto yy152;
yy162:
	++YYCURSOR;
#line 264 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\'', opts->bCaseInsensitive || !opts->bCaseInverted); return TOKEN_REGEXP; }
#line 1029 "src/parse/lex.cc"
yy164:
	++YYCURSOR;
yy165:
#line 285 "../src/parse/lex.re"
	{
					return *tok;
				}
#line 1037 "src/parse/lex.cc"
yy166:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '/') goto yy187;
#line 289 "../src/parse/lex.re"
	{
					yylval.op = *tok;
					return TOKEN_STAR;
				}
#line 1046 "src/parse/lex.cc"
yy168:
	++YYCURSOR;
#line 293 "../src/parse/lex.re"
	{
					yylval.op = *tok;
					return TOKEN_CLOSE;
				}
#line 1054 "src/parse/lex.cc"
yy170:
	++YYCURSOR;
#line 377 "../src/parse/lex.re"
	{
					yylval.regexp = mkDot();
					return TOKEN_REGEXP;
				}
#line 1062 "src/parse/lex.cc"
yy172:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy189;
	if (yych == '/') goto yy191;
	goto yy165;
yy173:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy199;
yy174:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy200;
	goto yy152;
yy175:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '!') goto yy202;
	if (yych == '>') goto yy204;
	goto yy165;
yy176:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy152;
		if (yych <= '9') goto yy205;
		if (yych <= '@') goto yy152;
		goto yy205;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy152;
			goto yy205;
		} else {
			if (yych <= '`') goto yy152;
			if (yych <= 'z') goto yy205;
			goto yy152;
		}
	}
yy177:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '^') goto yy208;
#line 266 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1103 "src/parse/lex.cc"
yy179:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy210;
	goto yy199;
yy180:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy213;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy211;
		if (yych >= 'A') goto yy215;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy215;
		} else {
			if (yych <= '`') goto yy181;
			if (yych <= 'z') goto yy215;
		}
	}
yy181:
#line 235 "../src/parse/lex.re"
	{
					depth = 1;
					goto code;
				}
#line 1131 "src/parse/lex.cc"
yy182:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy182;
	} else {
		if (yych <= ' ') goto yy182;
		if (yych == '#') goto yy185;
	}
yy184:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy157;
		} else {
			goto yy165;
		}
	} else {
		if (yyaccept == 2) {
			goto yy181;
		} else {
			goto yy212;
		}
	}
yy185:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy185;
		goto yy184;
	} else {
		if (yych <= ' ') goto yy185;
		if (yych == 'l') goto yy217;
		goto yy184;
	}
yy187:
	++YYCURSOR;
#line 259 "../src/parse/lex.re"
	{
					tok = cur;
					return 0;
				}
#line 1176 "src/parse/lex.cc"
yy189:
	++YYCURSOR;
#line 253 "../src/parse/lex.re"
	{
					depth = 1;
					goto comment;
				}
#line 1184 "src/parse/lex.cc"
yy191:
	++YYCURSOR;
#line 250 "../src/parse/lex.re"
	{
				goto nextLine;
			}
#line 1191 "src/parse/lex.cc"
yy193:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 361 "../src/parse/lex.re"
	{
					if (!opts->FFlag) {
						yylval.str = new std::string (tok, tok_len());
						return TOKEN_ID;
					} else {
						const RegExp *r = NULL;
						const bool casing = opts->bCaseInsensitive || opts->bCaseInverted;
						for (char *s = tok; s < cur; ++s) {
							const uint32_t c = static_cast<uint8_t>(*s);
							r = doCat(r, casing ? ichr(c) : schr(c));
						}
						yylval.regexp = r ? r : RegExp::make_nil();
						return TOKEN_REGEXP;
					}
				}
#line 1211 "src/parse/lex.cc"
yy195:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy221;
yy196:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 356 "../src/parse/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					return TOKEN_ID;
				}
#line 1223 "src/parse/lex.cc"
yy198:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
yy199:
	if (yybm[0+yych] & 32) {
		goto yy198;
	}
	if (yych <= ' ') {
		if (yych == '\t') {
			YYCTXMARKER = YYCURSOR;
			goto yy195;
		}
		if (yych <= 0x1F) goto yy193;
		YYCTXMARKER = YYCURSOR;
		goto yy195;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy193;
			YYCTXMARKER = YYCURSOR;
			goto yy196;
		} else {
			if (yych <= '<') goto yy193;
			if (yych <= '>') {
				YYCTXMARKER = YYCURSOR;
				goto yy196;
			}
			goto yy193;
		}
	}
yy200:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '>') goto yy222;
#line 244 "../src/parse/lex.re"
	{
					tok += 2; /* skip ":=" */
					depth = 0;
					goto code;
				}
#line 1263 "src/parse/lex.cc"
yy202:
	++YYCURSOR;
#line 272 "../src/parse/lex.re"
	{
					return TOKEN_SETUP;
				}
#line 1270 "src/parse/lex.cc"
yy204:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '9') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy184;
			YYCTXMARKER = YYCURSOR;
			goto yy224;
		} else {
			if (yych == ' ') {
				YYCTXMARKER = YYCURSOR;
				goto yy224;
			}
			goto yy184;
		}
	} else {
		if (yych <= '=') {
			if (yych <= ':') {
				YYCTXMARKER = YYCURSOR;
				goto yy226;
			}
			if (yych <= '<') goto yy184;
			YYCTXMARKER = YYCURSOR;
			goto yy227;
		} else {
			if (yych == '{') {
				YYCTXMARKER = YYCURSOR;
				goto yy228;
			}
			goto yy184;
		}
	}
yy205:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy207;
		if (yych <= '9') goto yy205;
		if (yych >= 'A') goto yy205;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy205;
		} else {
			if (yych <= '`') goto yy207;
			if (yych <= 'z') goto yy205;
		}
	}
yy207:
#line 276 "../src/parse/lex.re"
	{
		if (!opts->tags) {
			fatal("tags are only allowed with '-T, --tags' option");
		}
		const std::string *name = new std::string(tok + 1, tok_len() - 1);
		yylval.regexp = RegExp::make_tag(name);
		return TOKEN_REGEXP;
	}
#line 1328 "src/parse/lex.cc"
yy208:
	++YYCURSOR;
#line 267 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1333 "src/parse/lex.cc"
yy210:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy230;
	goto yy199;
yy211:
	++YYCURSOR;
yy212:
#line 329 "../src/parse/lex.re"
	{
					fatal("illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
				}
#line 1345 "src/parse/lex.cc"
yy213:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy213;
	}
	if (yych <= '^') {
		if (yych <= ',') {
			if (yych <= '+') goto yy184;
			goto yy231;
		} else {
			if (yych <= '@') goto yy184;
			if (yych >= '[') goto yy184;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy184;
		} else {
			if (yych == '}') goto yy232;
			goto yy184;
		}
	}
yy215:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy184;
			goto yy215;
		} else {
			if (yych <= '@') goto yy184;
			if (yych <= 'Z') goto yy215;
			goto yy184;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy184;
			goto yy215;
		} else {
			if (yych == '}') goto yy234;
			goto yy184;
		}
	}
yy217:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy236;
	goto yy184;
yy218:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 343 "../src/parse/lex.re"
	{
					yylval.str = new std::string (tok, tok_len ());
					if (opts->FFlag)
					{
						lexer_state = LEX_FLEX_NAME;
						return TOKEN_FID;
					}
					else
					{
						return TOKEN_ID;
					}
				}
#line 1411 "src/parse/lex.cc"
yy220:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy221:
	if (yych <= ' ') {
		if (yych == '\t') goto yy220;
		if (yych <= 0x1F) goto yy218;
		goto yy220;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy218;
			goto yy196;
		} else {
			if (yych <= '<') goto yy218;
			if (yych <= '>') goto yy196;
			goto yy218;
		}
	}
yy222:
	++YYCURSOR;
	YYCURSOR -= 2;
#line 240 "../src/parse/lex.re"
	{
					return *tok;
				}
#line 1438 "src/parse/lex.cc"
yy224:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '9') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy184;
			goto yy224;
		} else {
			if (yych == ' ') goto yy224;
			goto yy184;
		}
	} else {
		if (yych <= '=') {
			if (yych <= ':') goto yy226;
			if (yych <= '<') goto yy184;
			goto yy227;
		} else {
			if (yych == '{') goto yy228;
			goto yy184;
		}
	}
yy226:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy228;
	goto yy184;
yy227:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '>') goto yy184;
yy228:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 269 "../src/parse/lex.re"
	{
					return TOKEN_NOCOND;
				}
#line 1475 "src/parse/lex.cc"
yy230:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy237;
	goto yy199;
yy231:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy212;
	if (yych <= '9') goto yy238;
	if (yych == '}') goto yy240;
	goto yy212;
yy232:
	++YYCURSOR;
#line 298 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.extop.min))
					{
						fatal ("repetition count overflow");
					}
					yylval.extop.max = yylval.extop.min;
					return TOKEN_CLOSESIZE;
				}
#line 1498 "src/parse/lex.cc"
yy234:
	++YYCURSOR;
#line 333 "../src/parse/lex.re"
	{
					if (!opts->FFlag) {
						fatal("curly braces for names only allowed with -F switch");
					}
					yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
					return TOKEN_ID;
				}
#line 1509 "src/parse/lex.cc"
yy236:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy242;
	goto yy184;
yy237:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy243;
	goto yy199;
yy238:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy184;
	if (yych <= '9') goto yy238;
	if (yych == '}') goto yy245;
	goto yy184;
yy240:
	++YYCURSOR;
#line 320 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					yylval.extop.max = std::numeric_limits<uint32_t>::max();
					return TOKEN_CLOSESIZE;
				}
#line 1537 "src/parse/lex.cc"
yy242:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy247;
	goto yy184;
yy243:
	++YYCURSOR;
#line 341 "../src/parse/lex.re"
	{ lex_conf (); return TOKEN_CONF; }
#line 1546 "src/parse/lex.cc"
yy245:
	++YYCURSOR;
#line 307 "../src/parse/lex.re"
	{
					const char * p = strchr (tok, ',');
					if (!s_to_u32_unsafe (tok + 1, p, yylval.extop.min))
					{
						fatal ("repetition lower bound overflow");
					}
					if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.extop.max))
					{
						fatal ("repetition upper bound overflow");
					}
					return TOKEN_CLOSESIZE;
				}
#line 1562 "src/parse/lex.cc"
yy247:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy249;
	if (yych <= '9') goto yy184;
	goto yy249;
yy248:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy249:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy248;
		goto yy184;
	} else {
		if (yych <= ' ') goto yy248;
		if (yych <= '0') goto yy184;
		if (yych >= ':') goto yy184;
		YYCTXMARKER = YYCURSOR;
	}
yy250:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy184;
		} else {
			if (yych <= '\n') goto yy254;
			if (yych <= '\f') goto yy184;
			goto yy256;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy184;
		} else {
			if (yych <= '/') goto yy184;
			if (yych <= '9') goto yy250;
			goto yy184;
		}
	}
yy252:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy252;
		goto yy184;
	} else {
		if (yych <= ' ') goto yy252;
		if (yych == '"') goto yy257;
		goto yy184;
	}
yy254:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 386 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto scan;
				}
#line 1623 "src/parse/lex.cc"
yy256:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy254;
	goto yy184;
yy257:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy257;
	}
	if (yych <= '\n') goto yy184;
	if (yych >= '#') goto yy260;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy254;
	if (yych == '\r') goto yy256;
	goto yy184;
yy260:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy184;
	goto yy257;
}
#line 402 "../src/parse/lex.re"


flex_name:

#line 1653 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy265;
	if (yych == '\r') goto yy267;
	++YYCURSOR;
yy264:
#line 413 "../src/parse/lex.re"
	{
		YYCURSOR = tok;
		goto start;
	}
#line 1667 "src/parse/lex.cc"
yy265:
	++YYCURSOR;
#line 407 "../src/parse/lex.re"
	{
		YYCURSOR = tok;
		lexer_state = LEX_NORMAL;
		return TOKEN_FID_END;
	}
#line 1676 "src/parse/lex.cc"
yy267:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) == '\n') goto yy265;
	goto yy264;
}
#line 417 "../src/parse/lex.re"


code:

#line 1687 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96, 112,   0,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		112,  96,  64,  96,  96,  96,  96,  32, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,   0,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
		 96,  96,  96,  96,  96,  96,  96,  96, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy270;
			if (yych <= '\t') goto yy272;
			goto yy274;
		} else {
			if (yych == '"') goto yy276;
			goto yy272;
		}
	} else {
		if (yych <= '{') {
			if (yych <= '\'') goto yy277;
			if (yych <= 'z') goto yy272;
			goto yy278;
		} else {
			if (yych == '}') goto yy280;
			goto yy272;
		}
	}
yy270:
	++YYCURSOR;
#line 480 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						if (depth)
						{
							fatal("missing '}'");
						}
						return 0;
					}
					goto code;
				}
#line 1760 "src/parse/lex.cc"
yy272:
	++YYCURSOR;
yy273:
#line 494 "../src/parse/lex.re"
	{
					goto code;
				}
#line 1768 "src/parse/lex.cc"
yy274:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy282;
		} else {
			if (yych <= '\n') goto yy284;
			if (yych >= '\r') goto yy284;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy282;
		} else {
			if (yych == '#') goto yy285;
		}
	}
yy275:
#line 461 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						tok += strspn(tok, " \t\r\n");
						while (cur > tok && strchr(" \t\r\n", cur[-1]))
						{
							--cur;
						}
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return TOKEN_CODE;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1807 "src/parse/lex.cc"
yy276:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy273;
	goto yy289;
yy277:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy273;
	goto yy294;
yy278:
	++YYCURSOR;
#line 433 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else
					{
						++depth;
					}
					goto code;
				}
#line 1832 "src/parse/lex.cc"
yy280:
	++YYCURSOR;
#line 421 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else if (--depth == 0)
					{
						yylval.code = new Code (tok, tok_len (), get_fname (), tline);
						return TOKEN_CODE;
					}
					goto code;
				}
#line 1848 "src/parse/lex.cc"
yy282:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy296;
	} else {
		if (yych <= ' ') goto yy296;
		if (yych == '#') goto yy285;
	}
yy283:
	YYCURSOR -= 1;
#line 448 "../src/parse/lex.re"
	{
					if (depth == 0)
					{
						goto code;
					}
					else if (cur == eof)
					{
						fatal("missing '}'");
					}
					pos = cur;
					cline++;
					goto code;
				}
#line 1874 "src/parse/lex.cc"
yy284:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy283;
yy285:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy285;
	}
	if (yych == 'l') goto yy298;
yy287:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy275;
		} else {
			goto yy273;
		}
	} else {
		goto yy283;
	}
yy288:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy289:
	if (yybm[0+yych] & 32) {
		goto yy288;
	}
	if (yych <= '\n') goto yy287;
	if (yych >= '#') goto yy292;
yy290:
	++YYCURSOR;
#line 491 "../src/parse/lex.re"
	{
					goto code;
				}
#line 1913 "src/parse/lex.cc"
yy292:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy287;
	goto yy288;
yy293:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy294:
	if (yybm[0+yych] & 64) {
		goto yy293;
	}
	if (yych <= '\n') goto yy287;
	if (yych <= '\'') goto yy290;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy287;
	goto yy293;
yy296:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy296;
		goto yy287;
	} else {
		if (yych <= ' ') goto yy296;
		if (yych == '#') goto yy285;
		goto yy287;
	}
yy298:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy287;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy287;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy287;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy303;
	if (yych <= '9') goto yy287;
	goto yy303;
yy302:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy303:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy302;
		goto yy287;
	} else {
		if (yych <= ' ') goto yy302;
		if (yych <= '0') goto yy287;
		if (yych >= ':') goto yy287;
		YYCTXMARKER = YYCURSOR;
	}
yy304:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy304;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy287;
		if (yych <= '\t') goto yy306;
		if (yych <= '\n') goto yy308;
		goto yy287;
	} else {
		if (yych <= '\r') goto yy310;
		if (yych != ' ') goto yy287;
	}
yy306:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy306;
		goto yy287;
	} else {
		if (yych <= ' ') goto yy306;
		if (yych == '"') goto yy311;
		goto yy287;
	}
yy308:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 444 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto code;
				}
#line 2008 "src/parse/lex.cc"
yy310:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy308;
	goto yy287;
yy311:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy287;
		goto yy311;
	} else {
		if (yych <= '"') goto yy313;
		if (yych == '\\') goto yy314;
		goto yy311;
	}
yy313:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy308;
	if (yych == '\r') goto yy310;
	goto yy287;
yy314:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy287;
	goto yy311;
}
#line 497 "../src/parse/lex.re"


comment:

#line 2042 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ')') {
		if (yych == '\n') goto yy319;
	} else {
		if (yych <= '*') goto yy321;
		if (yych == '/') goto yy322;
	}
	++YYCURSOR;
yy318:
#line 529 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					goto comment;
				}
#line 2097 "src/parse/lex.cc"
yy319:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy323;
	}
	if (yych == '#') goto yy326;
yy320:
#line 520 "../src/parse/lex.re"
	{
					if (cur == eof)
					{
						return 0;
					}
					tok = pos = cur;
					cline++;
					goto comment;
				}
#line 2115 "src/parse/lex.cc"
yy321:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy328;
	goto yy318;
yy322:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy330;
	goto yy318;
yy323:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy323;
	}
	if (yych == '#') goto yy326;
yy325:
	YYCURSOR = YYMARKER;
	goto yy320;
yy326:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy326;
		goto yy325;
	} else {
		if (yych <= ' ') goto yy326;
		if (yych == 'l') goto yy332;
		goto yy325;
	}
yy328:
	++YYCURSOR;
#line 501 "../src/parse/lex.re"
	{
					if (--depth == 0)
					{
						goto scan;
					}
					else
					{
						goto comment;
					}
				}
#line 2160 "src/parse/lex.cc"
yy330:
	++YYCURSOR;
#line 511 "../src/parse/lex.re"
	{
					++depth;
					fatal("ambiguous /* found");
					goto comment;
				}
#line 2169 "src/parse/lex.cc"
yy332:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy325;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy325;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy325;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy337;
	if (yych <= '9') goto yy325;
	goto yy337;
yy336:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy337:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy336;
		goto yy325;
	} else {
		if (yych <= ' ') goto yy336;
		if (yych <= '0') goto yy325;
		if (yych >= ':') goto yy325;
		YYCTXMARKER = YYCURSOR;
	}
yy338:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy338;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy325;
		if (yych <= '\t') goto yy340;
		if (yych <= '\n') goto yy342;
		goto yy325;
	} else {
		if (yych <= '\r') goto yy344;
		if (yych != ' ') goto yy325;
	}
yy340:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy340;
		goto yy325;
	} else {
		if (yych <= ' ') goto yy340;
		if (yych == '"') goto yy345;
		goto yy325;
	}
yy342:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 516 "../src/parse/lex.re"
	{
					set_sourceline ();
					goto comment;
				}
#line 2231 "src/parse/lex.cc"
yy344:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy342;
	goto yy325;
yy345:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy345;
	}
	if (yych <= '\n') goto yy325;
	if (yych >= '#') goto yy348;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy342;
	if (yych == '\r') goto yy344;
	goto yy325;
yy348:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy325;
	goto yy345;
}
#line 536 "../src/parse/lex.re"


nextLine:

#line 2261 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy353;
	++YYCURSOR;
#line 547 "../src/parse/lex.re"
	{  if(cur == eof) {
                  return 0;
               }
               goto nextLine;
            }
#line 2274 "src/parse/lex.cc"
yy353:
	++YYCURSOR;
#line 540 "../src/parse/lex.re"
	{ if(cur == eof) {
                  return 0;
               }
               tok = pos = cur;
               cline++;
               goto scan;
            }
#line 2285 "src/parse/lex.cc"
}
#line 552 "../src/parse/lex.re"

}

static void escape (std::string & dest, const std::string & src)
{
	dest = src;
	size_t l = dest.length();
	for (size_t p = 0; p < l; ++p)
	{
		if (dest[p] == '\\')
		{
			dest.insert(++p, "\\");
			++l;
		}
	}
}

const RegExp *Scanner::lex_cls(bool neg)
{
	Range *r = NULL, *s;
	uint32_t u, l;
fst:
	
#line 2311 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy358;
#line 576 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 2319 "src/parse/lex.cc"
yy358:
	++YYCURSOR;
#line 575 "../src/parse/lex.re"
	{ goto end; }
#line 2324 "src/parse/lex.cc"
}
#line 577 "../src/parse/lex.re"

snd:
	
#line 2330 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy363;
yy362:
#line 580 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 2339 "src/parse/lex.cc"
yy363:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy365;
	YYCURSOR = YYMARKER;
	goto yy362;
yy365:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 581 "../src/parse/lex.re"
	{
			u = lex_cls_chr();
			if (l > u) {
				warn.swapped_range(get_line(), l, u);
				std::swap(l, u);
			}
			goto add;
		}
#line 2357 "src/parse/lex.cc"
}
#line 589 "../src/parse/lex.re"

add:
	if (!(s = opts->encoding.encodeRange(l, u))) {
		fatalf ("Bad code point range: '0x%X - 0x%X'", l, u);
	}
	r = Range::add(r, s);
	goto fst;
end:
	if (neg) {
		r = Range::sub(opts->encoding.fullRange(), r);
	}
	return cls(r);
}

uint32_t Scanner::lex_cls_chr()
{
	tok = cur;
	
#line 2378 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy371;
	if (yych == '\\') goto yy373;
	++YYCURSOR;
#line 612 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(tok[0]); }
#line 2389 "src/parse/lex.cc"
yy371:
	++YYCURSOR;
#line 607 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error"); }
#line 2394 "src/parse/lex.cc"
yy373:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '`') {
		if (yych <= '7') {
			if (yych <= ',') {
				if (yych != '\n') goto yy375;
			} else {
				if (yych <= '-') goto yy377;
				if (yych <= '/') goto yy375;
				if (yych <= '3') goto yy379;
				goto yy381;
			}
		} else {
			if (yych <= 'X') {
				if (yych == 'U') goto yy382;
				if (yych <= 'W') goto yy375;
				goto yy384;
			} else {
				if (yych <= '[') goto yy375;
				if (yych <= '\\') goto yy385;
				if (yych <= ']') goto yy387;
				goto yy375;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy389;
				if (yych <= 'b') goto yy391;
				goto yy375;
			} else {
				if (yych <= 'f') goto yy393;
				if (yych == 'n') goto yy395;
				goto yy375;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy397;
				if (yych <= 's') goto yy375;
				if (yych <= 't') goto yy399;
				goto yy384;
			} else {
				if (yych <= 'v') goto yy401;
				if (yych == 'x') goto yy403;
				goto yy375;
			}
		}
	}
#line 610 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in escape sequence"); }
#line 2445 "src/parse/lex.cc"
yy375:
	++YYCURSOR;
#line 625 "../src/parse/lex.re"
	{
			warn.useless_escape(tline, tok - pos, tok[1]);
			return static_cast<uint8_t>(tok[1]);
		}
#line 2453 "src/parse/lex.cc"
yy377:
	++YYCURSOR;
#line 623 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 2458 "src/parse/lex.cc"
yy379:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy380;
	if (yych <= '7') goto yy404;
yy380:
#line 609 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in octal escape sequence"); }
#line 2467 "src/parse/lex.cc"
yy381:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy380;
yy382:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy383;
		if (yych <= '9') goto yy406;
	} else {
		if (yych <= 'F') goto yy406;
		if (yych <= '`') goto yy383;
		if (yych <= 'f') goto yy406;
	}
yy383:
#line 608 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2485 "src/parse/lex.cc"
yy384:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy383;
		if (yych <= '9') goto yy407;
		goto yy383;
	} else {
		if (yych <= 'F') goto yy407;
		if (yych <= '`') goto yy383;
		if (yych <= 'f') goto yy407;
		goto yy383;
	}
yy385:
	++YYCURSOR;
#line 622 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2503 "src/parse/lex.cc"
yy387:
	++YYCURSOR;
#line 624 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 2508 "src/parse/lex.cc"
yy389:
	++YYCURSOR;
#line 615 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2513 "src/parse/lex.cc"
yy391:
	++YYCURSOR;
#line 616 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2518 "src/parse/lex.cc"
yy393:
	++YYCURSOR;
#line 617 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2523 "src/parse/lex.cc"
yy395:
	++YYCURSOR;
#line 618 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2528 "src/parse/lex.cc"
yy397:
	++YYCURSOR;
#line 619 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2533 "src/parse/lex.cc"
yy399:
	++YYCURSOR;
#line 620 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2538 "src/parse/lex.cc"
yy401:
	++YYCURSOR;
#line 621 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2543 "src/parse/lex.cc"
yy403:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy383;
		if (yych <= '9') goto yy408;
		goto yy383;
	} else {
		if (yych <= 'F') goto yy408;
		if (yych <= '`') goto yy383;
		if (yych <= 'f') goto yy408;
		goto yy383;
	}
yy404:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy405;
	if (yych <= '7') goto yy409;
yy405:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy380;
	} else {
		goto yy383;
	}
yy406:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy405;
		if (yych <= '9') goto yy411;
		goto yy405;
	} else {
		if (yych <= 'F') goto yy411;
		if (yych <= '`') goto yy405;
		if (yych <= 'f') goto yy411;
		goto yy405;
	}
yy407:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy405;
		if (yych <= '9') goto yy412;
		goto yy405;
	} else {
		if (yych <= 'F') goto yy412;
		if (yych <= '`') goto yy405;
		if (yych <= 'f') goto yy412;
		goto yy405;
	}
yy408:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy405;
		if (yych <= '9') goto yy413;
		goto yy405;
	} else {
		if (yych <= 'F') goto yy413;
		if (yych <= '`') goto yy405;
		if (yych <= 'f') goto yy413;
		goto yy405;
	}
yy409:
	++YYCURSOR;
#line 614 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2608 "src/parse/lex.cc"
yy411:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy405;
		if (yych <= '9') goto yy415;
		goto yy405;
	} else {
		if (yych <= 'F') goto yy415;
		if (yych <= '`') goto yy405;
		if (yych <= 'f') goto yy415;
		goto yy405;
	}
yy412:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy405;
		if (yych <= '9') goto yy408;
		goto yy405;
	} else {
		if (yych <= 'F') goto yy408;
		if (yych <= '`') goto yy405;
		if (yych <= 'f') goto yy408;
		goto yy405;
	}
yy413:
	++YYCURSOR;
#line 613 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2637 "src/parse/lex.cc"
yy415:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy405;
		if (yych >= ':') goto yy405;
	} else {
		if (yych <= 'F') goto yy416;
		if (yych <= '`') goto yy405;
		if (yych >= 'g') goto yy405;
	}
yy416:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '@') {
		if (yych <= '/') goto yy405;
		if (yych <= '9') goto yy407;
		goto yy405;
	} else {
		if (yych <= 'F') goto yy407;
		if (yych <= '`') goto yy405;
		if (yych <= 'f') goto yy407;
		goto yy405;
	}
}
#line 629 "../src/parse/lex.re"

}

uint32_t Scanner::lex_str_chr(char quote, bool &end)
{
	end = false;
	tok = cur;
	
#line 2670 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy421;
	if (yych == '\\') goto yy423;
	++YYCURSOR;
#line 642 "../src/parse/lex.re"
	{
			end = tok[0] == quote;
			return static_cast<uint8_t>(tok[0]);
		}
#line 2684 "src/parse/lex.cc"
yy421:
	++YYCURSOR;
#line 637 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error"); }
#line 2689 "src/parse/lex.cc"
yy423:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= 'a') {
		if (yych <= 'T') {
			if (yych <= '/') {
				if (yych != '\n') goto yy425;
			} else {
				if (yych <= '3') goto yy427;
				if (yych <= '7') goto yy429;
				goto yy425;
			}
		} else {
			if (yych <= 'X') {
				if (yych <= 'U') goto yy430;
				if (yych <= 'W') goto yy425;
				goto yy432;
			} else {
				if (yych == '\\') goto yy433;
				if (yych <= '`') goto yy425;
				goto yy435;
			}
		}
	} else {
		if (yych <= 'r') {
			if (yych <= 'f') {
				if (yych <= 'b') goto yy437;
				if (yych <= 'e') goto yy425;
				goto yy439;
			} else {
				if (yych == 'n') goto yy441;
				if (yych <= 'q') goto yy425;
				goto yy443;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 's') goto yy425;
				if (yych <= 't') goto yy445;
				goto yy432;
			} else {
				if (yych <= 'v') goto yy447;
				if (yych == 'x') goto yy449;
				goto yy425;
			}
		}
	}
#line 640 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in escape sequence"); }
#line 2737 "src/parse/lex.cc"
yy425:
	++YYCURSOR;
#line 656 "../src/parse/lex.re"
	{
			if (tok[1] != quote) {
				warn.useless_escape(tline, tok - pos, tok[1]);
			}
			return static_cast<uint8_t>(tok[1]);
		}
#line 2747 "src/parse/lex.cc"
yy427:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy428;
	if (yych <= '7') goto yy450;
yy428:
#line 639 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in octal escape sequence"); }
#line 2756 "src/parse/lex.cc"
yy429:
	yych = (YYCTYPE)*++YYCURSOR;
	goto yy428;
yy430:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy431;
		if (yych <= '9') goto yy452;
	} else {
		if (yych <= 'F') goto yy452;
		if (yych <= '`') goto yy431;
		if (yych <= 'f') goto yy452;
	}
yy431:
#line 638 "../src/parse/lex.re"
	{ fatal ((tok - pos) - tchar, "syntax error in hexadecimal escape sequence"); }
#line 2774 "src/parse/lex.cc"
yy432:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy431;
		if (yych <= '9') goto yy453;
		goto yy431;
	} else {
		if (yych <= 'F') goto yy453;
		if (yych <= '`') goto yy431;
		if (yych <= 'f') goto yy453;
		goto yy431;
	}
yy433:
	++YYCURSOR;
#line 655 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2792 "src/parse/lex.cc"
yy435:
	++YYCURSOR;
#line 648 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2797 "src/parse/lex.cc"
yy437:
	++YYCURSOR;
#line 649 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2802 "src/parse/lex.cc"
yy439:
	++YYCURSOR;
#line 650 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2807 "src/parse/lex.cc"
yy441:
	++YYCURSOR;
#line 651 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2812 "src/parse/lex.cc"
yy443:
	++YYCURSOR;
#line 652 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2817 "src/parse/lex.cc"
yy445:
	++YYCURSOR;
#line 653 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2822 "src/parse/lex.cc"
yy447:
	++YYCURSOR;
#line 654 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2827 "src/parse/lex.cc"
yy449:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy431;
		if (yych <= '9') goto yy454;
		goto yy431;
	} else {
		if (yych <= 'F') goto yy454;
		if (yych <= '`') goto yy431;
		if (yych <= 'f') goto yy454;
		goto yy431;
	}
yy450:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy451;
	if (yych <= '7') goto yy455;
yy451:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy428;
	} else {
		goto yy431;
	}
yy452:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy451;
		if (yych <= '9') goto yy457;
		goto yy451;
	} else {
		if (yych <= 'F') goto yy457;
		if (yych <= '`') goto yy451;
		if (yych <= 'f') goto yy457;
		goto yy451;
	}
yy453:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy451;
		if (yych <= '9') goto yy458;
		goto yy451;
	} else {
		if (yych <= 'F') goto yy458;
		if (yych <= '`') goto yy451;
		if (yych <= 'f') goto yy458;
		goto yy451;
	}
yy454:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy451;
		if (yych <= '9') goto yy459;
		goto yy451;
	} else {
		if (yych <= 'F') goto yy459;
		if (yych <= '`') goto yy451;
		if (yych <= 'f') goto yy459;
		goto yy451;
	}
yy455:
	++YYCURSOR;
#line 647 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2892 "src/parse/lex.cc"
yy457:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy451;
		if (yych <= '9') goto yy461;
		goto yy451;
	} else {
		if (yych <= 'F') goto yy461;
		if (yych <= '`') goto yy451;
		if (yych <= 'f') goto yy461;
		goto yy451;
	}
yy458:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy451;
		if (yych <= '9') goto yy454;
		goto yy451;
	} else {
		if (yych <= 'F') goto yy454;
		if (yych <= '`') goto yy451;
		if (yych <= 'f') goto yy454;
		goto yy451;
	}
yy459:
	++YYCURSOR;
#line 646 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2921 "src/parse/lex.cc"
yy461:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy451;
		if (yych >= ':') goto yy451;
	} else {
		if (yych <= 'F') goto yy462;
		if (yych <= '`') goto yy451;
		if (yych >= 'g') goto yy451;
	}
yy462:
	++YYCURSOR;
	if ((yych = (YYCTYPE)*YYCURSOR) <= '@') {
		if (yych <= '/') goto yy451;
		if (yych <= '9') goto yy453;
		goto yy451;
	} else {
		if (yych <= 'F') goto yy453;
		if (yych <= '`') goto yy451;
		if (yych <= 'f') goto yy453;
		goto yy451;
	}
}
#line 662 "../src/parse/lex.re"

}

const RegExp *Scanner::lex_str(char quote, bool casing)
{
	const RegExp *r = NULL;
	for (bool end;;) {
		const uint32_t c = lex_str_chr(quote, end);
		if (end) {
			return r ? r : RegExp::make_nil();
		}
		r = doCat(r, casing ? ichr(c) : schr(c));
	}
}

void Scanner::set_sourceline ()
{
sourceline:
	tok = cur;

#line 2966 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy467;
	} else {
		if (yych <= '"') goto yy469;
		if (yych <= '0') goto yy465;
		if (yych <= '9') goto yy470;
	}
yy465:
	++YYCURSOR;
yy466:
#line 705 "../src/parse/lex.re"
	{
  					goto sourceline;
  				}
#line 3019 "src/parse/lex.cc"
yy467:
	++YYCURSOR;
#line 693 "../src/parse/lex.re"
	{
  					if (cur == eof)
  					{
						--cur; 
					}
			  		else
			  		{
			  			pos = cur; 
			  		}
			  		tok = cur;
			  		return; 
				}
#line 3035 "src/parse/lex.cc"
yy469:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy466;
	goto yy474;
yy470:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy470;
	}
#line 682 "../src/parse/lex.re"
	{
					if (!s_to_u32_unsafe (tok, cur, cline))
					{
						fatal ("line number overflow");
					}
					goto sourceline; 
				}
#line 3055 "src/parse/lex.cc"
yy473:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy474:
	if (yybm[0+yych] & 128) {
		goto yy473;
	}
	if (yych <= '\n') goto yy475;
	if (yych <= '"') goto yy476;
	goto yy478;
yy475:
	YYCURSOR = YYMARKER;
	goto yy466;
yy476:
	++YYCURSOR;
#line 689 "../src/parse/lex.re"
	{
					escape (in.file_name, std::string (tok + 1, tok_len () - 2)); // -2 to omit quotes
			  		goto sourceline; 
				}
#line 3077 "src/parse/lex.cc"
yy478:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\n') goto yy475;
	goto yy473;
}
#line 708 "../src/parse/lex.re"

}

} // end namespace re2c
