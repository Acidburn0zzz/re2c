/* Generated by re2c 1.1.1 on Fri Nov 16 00:34:34 2018 */
#line 1 "../src/ast/lex.re"
#include "src/util/c99_stdint.h"
#include <stddef.h>
#include <string.h>
#include <algorithm>
#include <limits>
#include <string>

#include "src/conf/msg.h"
#include "src/code/output.h"
#include "src/re/encoding/enc.h"
#include "src/ast/input.h"
#include "src/ast/ast.h"
#include "src/ast/scanner.h"
#include "src/ast/parser.h" // needed by "y.tab.h"
#include "src/ast/unescape.h"
#include "src/util/range.h"
#include "src/util/s_to_n32_unsafe.h"
#include "src/util/string_utils.h"
#include "y.tab.h"

extern YYSTYPE yylval;

#define    YYCTYPE      unsigned char
#define    YYCURSOR     cur
#define    YYLIMIT      lim
#define    YYMARKER     mar
#define    YYCTXMARKER  ctx
#define    YYFILL(n)    { fill (n); }

namespace re2c
{

#line 56 "../src/ast/lex.re"


Scanner::ParseMode Scanner::echo(OutputFile &out)
{
    if (eof && cur == eof) // Catch EOF
    {
        return Stop;
    }

    tok = cur;
echo:
    ptr = cur;


#line 51 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 17) YYFILL(17);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 133 "../src/ast/lex.re"
	{
        if (cur != eof) goto echo;
        out.wraw(tok, ptr);
        return Stop;
    }
#line 115 "src/ast/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 151 "../src/ast/lex.re"
	{ goto echo; }
#line 121 "src/ast/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 145 "../src/ast/lex.re"
	{
        cline++;
        pos = cur;
        goto echo;
    }
#line 136 "src/ast/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy7;
	} else {
		goto yy5;
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 70 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        return Parse;
    }
#line 184 "src/ast/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'i':	goto yy23;
	case 'm':	goto yy24;
	case 'r':	goto yy25;
	case 's':	goto yy26;
	case 't':	goto yy27;
	case 'u':	goto yy28;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy29;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy30;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy31;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy32;
	if (yych == 't') goto yy33;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy34;
	if (yych == 'u') goto yy35;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy36;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy37;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy38;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy39;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy40;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy41;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy42;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy43;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy44;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy45;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy46;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy47;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy48;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy50;
	if (yych <= '9') goto yy13;
	goto yy50;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy51;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy52;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy53;
	if (yych == 'n') goto yy54;
	goto yy13;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy55;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy56;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy57;
	goto yy13;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy58;
	goto yy13;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy59;
	goto yy13;
yy49:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy50:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy49;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy49;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			YYCTXMARKER = YYCURSOR;
			goto yy60;
		}
		goto yy13;
	}
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy62;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy63;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy64;
	goto yy13;
yy54:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy65;
	goto yy13;
yy55:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy66;
	goto yy13;
yy56:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy67;
	goto yy13;
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy68;
	goto yy13;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy69;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy70;
	goto yy13;
yy60:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy60;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy71;
		if (yych <= '\n') goto yy73;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy75;
		if (yych == ' ') goto yy71;
		goto yy13;
	}
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy76;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy77;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy78;
	goto yy13;
yy65:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy79;
	goto yy13;
yy66:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy80;
	goto yy13;
yy67:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy81;
	goto yy13;
yy68:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy82;
	goto yy13;
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy83;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy84;
	goto yy13;
yy71:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy71;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy71;
		if (yych == '"') goto yy85;
		goto yy13;
	}
yy73:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 139 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr + 1);
        set_sourceline();
        goto echo;
    }
#line 448 "src/ast/lex.cc"
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy73;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy87;
	goto yy13;
yy77:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy88;
	goto yy13;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy89;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy90;
	goto yy13;
yy80:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy91;
	goto yy13;
yy81:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy92;
	goto yy13;
yy82:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy93;
	goto yy13;
yy83:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy94;
	goto yy13;
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy95;
	goto yy13;
yy85:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy85;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy96;
	goto yy97;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy98;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy99;
	goto yy13;
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy100;
	goto yy13;
yy90:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy102;
	goto yy13;
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy103;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy104;
	goto yy13;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy105;
	goto yy13;
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy106;
	goto yy13;
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy107;
	goto yy13;
yy96:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy73;
	if (yych == '\r') goto yy75;
	goto yy13;
yy97:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy85;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy109;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy110;
	goto yy13;
yy100:
	++YYCURSOR;
#line 91 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_yymaxfill();
        lex_end_of_comment(out);
        goto echo;
    }
#line 564 "src/ast/lex.cc"
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'h') goto yy111;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy112;
	goto yy13;
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy113;
	goto yy13;
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy114;
	goto yy13;
yy106:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy115;
	goto yy13;
yy107:
	++YYCURSOR;
#line 80 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        return Reuse;
    }
#line 592 "src/ast/lex.cc"
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy116;
	goto yy13;
yy110:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy117;
	goto yy13;
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy118;
	goto yy13;
yy112:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy119;
	goto yy13;
yy113:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy121;
	goto yy13;
yy114:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy123;
	goto yy13;
yy115:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy125;
	goto yy13;
yy116:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy127;
	goto yy13;
yy117:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy128;
	goto yy13;
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy130;
	goto yy13;
yy119:
	++YYCURSOR;
#line 127 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, true);
        goto echo;
    }
#line 641 "src/ast/lex.cc"
yy121:
	++YYCURSOR;
#line 75 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        return Rules;
    }
#line 649 "src/ast/lex.cc"
yy123:
	++YYCURSOR;
#line 121 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, false);
        goto echo;
    }
#line 658 "src/ast/lex.cc"
yy125:
	++YYCURSOR;
#line 112 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_line_info_output();
        out.wdelay_types();
        out.wdelay_line_info_input(cline, get_fname());
        lex_end_of_comment(out);
        goto echo;
    }
#line 670 "src/ast/lex.cc"
yy127:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy131;
	goto yy13;
yy128:
	++YYCURSOR;
#line 85 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        lex_end_of_comment(out);
        goto echo;
    }
#line 683 "src/ast/lex.cc"
yy130:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy132;
	goto yy13;
yy131:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy133;
	goto yy13;
yy132:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy135;
	goto yy13;
yy133:
	++YYCURSOR;
#line 105 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_state_goto(0);
        lex_end_of_comment(out);
        goto echo;
    }
#line 705 "src/ast/lex.cc"
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
#line 98 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_yymaxnmatch();
        lex_end_of_comment(out);
        goto echo;
    }
#line 717 "src/ast/lex.cc"
}
#line 152 "../src/ast/lex.re"

}

void Scanner::lex_end_of_comment(OutputFile &out)
{
    uint32_t ignored = 0;
    for (;;) {
#line 727 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy140;
		if (yych == '\n') goto yy144;
		goto yy142;
	} else {
		if (yych <= '\r') goto yy146;
		if (yych == '*') goto yy147;
		goto yy142;
	}
yy140:
	++YYCURSOR;
#line 159 "../src/ast/lex.re"
	{ fatal_lc(get_cline(), get_column(), "expected end of block"); }
#line 745 "src/ast/lex.cc"
yy142:
	++YYCURSOR;
yy143:
#line 161 "../src/ast/lex.re"
	{ continue; }
#line 751 "src/ast/lex.cc"
yy144:
	++YYCURSOR;
#line 162 "../src/ast/lex.re"
	{ ++ignored; continue; }
#line 756 "src/ast/lex.cc"
yy146:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy144;
	goto yy143;
yy147:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy143;
	++YYCURSOR;
#line 163 "../src/ast/lex.re"
	{
            if (ignored > 0) {
                cline += ignored;
                out.wdelay_line_info_input(cline, get_fname());
            }
            tok = pos = cur;
            return;
        }
#line 774 "src/ast/lex.cc"
}
#line 171 "../src/ast/lex.re"
}
}

void Scanner::lex_tags(OutputFile &out, bool mtags)
{
    std::string fmt, sep;
    for (;;) {
#line 784 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy154;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy157;
		} else {
			if (yych == '\r') goto yy159;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy160;
			if (yych >= 'f') goto yy161;
		} else {
			if (yych == 's') goto yy162;
		}
	}
	++YYCURSOR;
yy153:
#line 178 "../src/ast/lex.re"
	{ fatal_lc(get_cline(), get_column(), "unrecognized configuration"); }
#line 844 "src/ast/lex.cc"
yy154:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy154;
	}
#line 183 "../src/ast/lex.re"
	{ continue; }
#line 854 "src/ast/lex.cc"
yy157:
	++YYCURSOR;
#line 184 "../src/ast/lex.re"
	{ ++cline; continue; }
#line 859 "src/ast/lex.cc"
yy159:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy157;
	goto yy153;
yy160:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy163;
	goto yy153;
yy161:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy165;
	goto yy153;
yy162:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy167;
	goto yy153;
yy163:
	++YYCURSOR;
#line 185 "../src/ast/lex.re"
	{
            out.wdelay_tags(new ConfTags(fmt, sep), mtags);
            tok = pos = cur;
            return;
        }
#line 884 "src/ast/lex.cc"
yy165:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy168;
yy166:
	YYCURSOR = YYMARKER;
	goto yy153;
yy167:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy169;
	goto yy166;
yy168:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy170;
	goto yy166;
yy169:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy171;
	goto yy166;
yy170:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy172;
	goto yy166;
yy171:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy173;
	goto yy166;
yy172:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy174;
	goto yy166;
yy173:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy176;
	goto yy166;
yy174:
	++YYCURSOR;
#line 180 "../src/ast/lex.re"
	{ fmt = lex_conf_string(); continue; }
#line 923 "src/ast/lex.cc"
yy176:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy166;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy166;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy166;
	++YYCURSOR;
#line 181 "../src/ast/lex.re"
	{ sep = lex_conf_string(); continue; }
#line 934 "src/ast/lex.cc"
}
#line 190 "../src/ast/lex.re"
}
}

int Scanner::scan(const conopt_t *globopts)
{
scan:
    tchar = cur - pos;
    tok = cur;

#line 946 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy185;
	}
	if (yych <= '9') {
		if (yych <= '%') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy183;
				if (yych <= '\n') goto yy188;
				if (yych >= '\r') goto yy190;
			} else {
				if (yych <= '"') {
					if (yych >= '"') goto yy191;
				} else {
					if (yych <= '#') goto yy193;
					if (yych >= '%') goto yy194;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') goto yy183;
				if (yych <= '\'') goto yy195;
				if (yych <= ')') goto yy197;
				goto yy199;
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy197;
				} else {
					if (yych <= '.') goto yy200;
					if (yych <= '/') goto yy202;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy203;
				if (yych <= ';') goto yy197;
				if (yych <= '<') goto yy204;
				goto yy206;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy197;
				} else {
					if (yych <= '@') goto yy193;
					if (yych <= 'Z') goto yy207;
					goto yy210;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy197;
				} else {
					if (yych != '`') goto yy207;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy212;
					goto yy207;
				} else {
					if (yych <= '{') goto yy213;
					if (yych <= '|') goto yy197;
				}
			}
		}
	}
yy183:
	++YYCURSOR;
yy184:
#line 314 "../src/ast/lex.re"
	{
        fatal_lc(get_cline(), get_column(), "unexpected character: '%c'", *tok);
        goto scan;
    }
#line 1060 "src/ast/lex.cc"
yy185:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy185;
	}
#line 295 "../src/ast/lex.re"
	{ goto scan; }
#line 1070 "src/ast/lex.cc"
yy188:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy215;
	} else {
		if (yych <= ' ') goto yy215;
		if (yych == '#') goto yy218;
	}
yy189:
#line 302 "../src/ast/lex.re"
	{
        pos = cur;
        cline++;
        if (lexer_state == LEX_FLEX_NAME) {
            lexer_state = LEX_NORMAL;
            return TOKEN_FID_END;
        }
        else {
            goto scan;
        }
    }
#line 1093 "src/ast/lex.cc"
yy190:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy188;
	goto yy184;
yy191:
	++YYCURSOR;
#line 212 "../src/ast/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1102 "src/ast/lex.cc"
yy193:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy184;
		if (yych <= 'Z') goto yy220;
		goto yy184;
	} else {
		if (yych == '`') goto yy184;
		if (yych <= 'z') goto yy220;
		goto yy184;
	}
yy194:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy223;
	goto yy184;
yy195:
	++YYCURSOR;
#line 211 "../src/ast/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1122 "src/ast/lex.cc"
yy197:
	++YYCURSOR;
yy198:
#line 222 "../src/ast/lex.re"
	{ return *tok; }
#line 1128 "src/ast/lex.cc"
yy199:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy223;
	goto yy198;
yy200:
	++YYCURSOR;
#line 290 "../src/ast/lex.re"
	{
        yylval.regexp = ast_dot(cline, get_column());
        return TOKEN_REGEXP;
    }
#line 1140 "src/ast/lex.cc"
yy202:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy225;
	if (yych == '/') goto yy227;
	goto yy198;
yy203:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy229;
	goto yy184;
yy204:
	++YYCURSOR;
#line 204 "../src/ast/lex.re"
	{ return lex_clist(); }
#line 1154 "src/ast/lex.cc"
yy206:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy231;
	goto yy198;
yy207:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy208:
	if (yybm[0+yych] & 32) {
		goto yy207;
	}
#line 267 "../src/ast/lex.re"
	{
        if (!globopts->FFlag || lex_namedef_context_re2c()) {
            yylval.str = new std::string (tok, tok_len());
            return TOKEN_ID;
        }
        else if (lex_namedef_context_flex()) {
            yylval.str = new std::string (tok, tok_len());
            lexer_state = LEX_FLEX_NAME;
            return TOKEN_FID;
        }
        else {
            std::vector<ASTChar> *str = new std::vector<ASTChar>;
            for (const char *s = tok; s < cur; ++s) {
                const uint32_t
                    chr = static_cast<uint8_t>(*s),
                    col = static_cast<uint32_t>(s - tok);
                str->push_back(ASTChar(chr, col));
            }
            yylval.regexp = ast_str(cline, get_column(), str, false);
            return TOKEN_REGEXP;
        }
    }
#line 1190 "src/ast/lex.cc"
yy210:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy233;
#line 213 "../src/ast/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1196 "src/ast/lex.cc"
yy212:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy235;
	goto yy208;
yy213:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy238;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy236;
		if (yych >= 'A') goto yy240;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy240;
		} else {
			if (yych <= '`') goto yy214;
			if (yych <= 'z') goto yy240;
		}
	}
yy214:
#line 199 "../src/ast/lex.re"
	{ lex_code_in_braces(); return TOKEN_CODE; }
#line 1221 "src/ast/lex.cc"
yy215:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy215;
	} else {
		if (yych <= ' ') goto yy215;
		if (yych == '#') goto yy218;
	}
yy217:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy189;
		} else {
			goto yy214;
		}
	} else {
		goto yy237;
	}
yy218:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy218;
		goto yy217;
	} else {
		if (yych <= ' ') goto yy218;
		if (yych == 'l') goto yy242;
		goto yy217;
	}
yy220:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy222;
		if (yych <= '9') goto yy220;
		if (yych >= 'A') goto yy220;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy220;
		} else {
			if (yych <= '`') goto yy222;
			if (yych <= 'z') goto yy220;
		}
	}
yy222:
#line 216 "../src/ast/lex.re"
	{
        const std::string *name = new std::string(tok + 1, tok_len() - 1);
        yylval.regexp = ast_tag(cline, get_column(), name, tok[0] == '#');
        return TOKEN_REGEXP;
    }
#line 1278 "src/ast/lex.cc"
yy223:
	++YYCURSOR;
#line 209 "../src/ast/lex.re"
	{ tok = cur; return 0; }
#line 1283 "src/ast/lex.cc"
yy225:
	++YYCURSOR;
#line 207 "../src/ast/lex.re"
	{ lex_c_comment(); goto scan; }
#line 1288 "src/ast/lex.cc"
yy227:
	++YYCURSOR;
#line 206 "../src/ast/lex.re"
	{ lex_cpp_comment(); goto scan; }
#line 1293 "src/ast/lex.cc"
yy229:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy243;
#line 200 "../src/ast/lex.re"
	{ lex_code_indented(); return TOKEN_CODE; }
#line 1299 "src/ast/lex.cc"
yy231:
	++YYCURSOR;
#line 202 "../src/ast/lex.re"
	{ lex_cgoto(); return TOKEN_CNEXT; }
#line 1304 "src/ast/lex.cc"
yy233:
	++YYCURSOR;
#line 214 "../src/ast/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1309 "src/ast/lex.cc"
yy235:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy245;
	goto yy208;
yy236:
	++YYCURSOR;
yy237:
#line 251 "../src/ast/lex.re"
	{
        fatal_lc(get_cline(), get_column(),
            "illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
    }
#line 1322 "src/ast/lex.cc"
yy238:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy238;
	}
	if (yych == ',') goto yy246;
	if (yych == '}') goto yy247;
	goto yy217;
yy240:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy217;
			goto yy240;
		} else {
			if (yych <= '@') goto yy217;
			if (yych <= 'Z') goto yy240;
			goto yy217;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy217;
			goto yy240;
		} else {
			if (yych == '}') goto yy249;
			goto yy217;
		}
	}
yy242:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy251;
	goto yy217;
yy243:
	++YYCURSOR;
#line 203 "../src/ast/lex.re"
	{ lex_cgoto(); return TOKEN_CJUMP; }
#line 1363 "src/ast/lex.cc"
yy245:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy252;
	goto yy208;
yy246:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy237;
	if (yych <= '9') goto yy253;
	if (yych == '}') goto yy255;
	goto yy237;
yy247:
	++YYCURSOR;
#line 224 "../src/ast/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            fatal_lc(get_cline(), get_column(), "repetition count overflow");
        }
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_CLOSESIZE;
    }
#line 1385 "src/ast/lex.cc"
yy249:
	++YYCURSOR;
#line 256 "../src/ast/lex.re"
	{
        if (!globopts->FFlag) {
            fatal_lc(get_cline(), get_column(),
                "curly braces for names only allowed with -F switch");
        }
        yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
        return TOKEN_ID;
    }
#line 1397 "src/ast/lex.cc"
yy251:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy257;
	goto yy217;
yy252:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy258;
	goto yy208;
yy253:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy217;
	if (yych <= '9') goto yy253;
	if (yych == '}') goto yy260;
	goto yy217;
yy255:
	++YYCURSOR;
#line 243 "../src/ast/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            fatal_lc(get_cline(), get_column(), "repetition lower bound overflow");
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        return TOKEN_CLOSESIZE;
    }
#line 1424 "src/ast/lex.cc"
yy257:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy262;
	goto yy217;
yy258:
	++YYCURSOR;
#line 265 "../src/ast/lex.re"
	{ return TOKEN_CONF; }
#line 1433 "src/ast/lex.cc"
yy260:
	++YYCURSOR;
#line 232 "../src/ast/lex.re"
	{
        const char * p = strchr (tok, ',');
        if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min)) {
            fatal_lc(get_cline(), get_column(), "repetition lower bound overflow");
        }
        if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max)) {
            fatal_lc(get_cline(), get_column(), "repetition upper bound overflow");
        }
        return TOKEN_CLOSESIZE;
    }
#line 1447 "src/ast/lex.cc"
yy262:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy264;
	if (yych <= '9') goto yy217;
	goto yy264;
yy263:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy264:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy263;
		goto yy217;
	} else {
		if (yych <= ' ') goto yy263;
		if (yych <= '0') goto yy217;
		if (yych >= ':') goto yy217;
		YYCTXMARKER = YYCURSOR;
	}
yy265:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy217;
		} else {
			if (yych <= '\n') goto yy269;
			if (yych <= '\f') goto yy217;
			goto yy271;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy217;
		} else {
			if (yych <= '/') goto yy217;
			if (yych <= '9') goto yy265;
			goto yy217;
		}
	}
yy267:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy267;
		goto yy217;
	} else {
		if (yych <= ' ') goto yy267;
		if (yych == '"') goto yy272;
		goto yy217;
	}
yy269:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 297 "../src/ast/lex.re"
	{
        set_sourceline ();
        return TOKEN_LINE_INFO;
    }
#line 1508 "src/ast/lex.cc"
yy271:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy269;
	goto yy217;
yy272:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy272;
	}
	if (yych <= '\n') goto yy217;
	if (yych >= '#') goto yy275;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy269;
	if (yych == '\r') goto yy271;
	goto yy217;
yy275:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy217;
	if (yych == '\n') goto yy217;
	goto yy272;
}
#line 318 "../src/ast/lex.re"

}

bool Scanner::lex_namedef_context_re2c()
{

#line 1541 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			YYCTXMARKER = YYCURSOR;
			goto yy279;
		}
	} else {
		if (yych <= ' ') {
			YYCTXMARKER = YYCURSOR;
			goto yy279;
		}
		if (yych == '=') {
			YYCTXMARKER = YYCURSOR;
			goto yy282;
		}
	}
yy278:
#line 325 "../src/ast/lex.re"
	{ return false; }
#line 1598 "src/ast/lex.cc"
yy279:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy279;
	}
	if (yych == '=') goto yy282;
yy281:
	YYCURSOR = YYMARKER;
	goto yy278;
yy282:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy281;
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 324 "../src/ast/lex.re"
	{ return true; }
#line 1617 "src/ast/lex.cc"
}
#line 326 "../src/ast/lex.re"

}

bool Scanner::lex_namedef_context_flex()
{

#line 1626 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') {
		YYCTXMARKER = YYCURSOR;
		goto yy288;
	}
	if (yych == ' ') {
		YYCTXMARKER = YYCURSOR;
		goto yy288;
	}
#line 334 "../src/ast/lex.re"
	{ return false; }
#line 1675 "src/ast/lex.cc"
yy288:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy288;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy291;
	} else {
		if (yych <= '=') goto yy291;
		if (yych == '{') goto yy291;
	}
	YYCURSOR = YYCTXMARKER;
#line 333 "../src/ast/lex.re"
	{ return true; }
#line 1692 "src/ast/lex.cc"
yy291:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 332 "../src/ast/lex.re"
	{ return false; }
#line 1698 "src/ast/lex.cc"
}
#line 335 "../src/ast/lex.re"

}

int Scanner::lex_clist()
{
    int kind = TOKEN_CLIST;
    CondList *cl = new CondList;

#line 1709 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy293;
yy294:
	++YYCURSOR;
yy293:
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy294;
	}
	if (yych <= 0x1F) goto yy296;
	if (yych <= '!') goto yy297;
	if (yych == '>') goto yy300;
yy296:
#line 345 "../src/ast/lex.re"
	{ goto cond; }
#line 1761 "src/ast/lex.cc"
yy297:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') goto yy297;
	if (yych == ' ') goto yy297;
#line 343 "../src/ast/lex.re"
	{ kind = TOKEN_CSETUP; goto cond; }
#line 1770 "src/ast/lex.cc"
yy300:
	++YYCURSOR;
#line 344 "../src/ast/lex.re"
	{ kind = TOKEN_CZERO; goto end; }
#line 1775 "src/ast/lex.cc"
}
#line 346 "../src/ast/lex.re"

cond:
    tok = cur;

#line 1782 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych == '*') goto yy306;
		if (yych >= 'A') goto yy308;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy308;
		} else {
			if (yych <= '`') goto yy304;
			if (yych <= 'z') goto yy308;
		}
	}
yy304:
	++YYCURSOR;
#line 352 "../src/ast/lex.re"
	{ goto error; }
#line 1836 "src/ast/lex.cc"
yy306:
	++YYCURSOR;
#line 351 "../src/ast/lex.re"
	{ if (!cl->empty()) goto error; cl->insert("*"); goto next; }
#line 1841 "src/ast/lex.cc"
yy308:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy308;
	}
#line 350 "../src/ast/lex.re"
	{ cl->insert(std::string(tok, tok_len())); goto next; }
#line 1851 "src/ast/lex.cc"
}
#line 353 "../src/ast/lex.re"

next:

#line 1857 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy315;
		if (yych >= ' ') goto yy315;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy316;
		} else {
			if (yych == '>') goto yy319;
		}
	}
	++YYCURSOR;
yy314:
#line 358 "../src/ast/lex.re"
	{ goto error; }
#line 1910 "src/ast/lex.cc"
yy315:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= ' ') {
		if (yych == '\t') goto yy321;
		if (yych <= 0x1F) goto yy314;
		goto yy321;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy314;
		} else {
			if (yych == '>') goto yy319;
			goto yy314;
		}
	}
yy316:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy316;
	}
#line 356 "../src/ast/lex.re"
	{ goto cond; }
#line 1934 "src/ast/lex.cc"
yy319:
	++YYCURSOR;
#line 357 "../src/ast/lex.re"
	{ goto end; }
#line 1939 "src/ast/lex.cc"
yy321:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy321;
		if (yych >= ' ') goto yy321;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy316;
		} else {
			if (yych == '>') goto yy319;
		}
	}
	YYCURSOR = YYMARKER;
	goto yy314;
}
#line 359 "../src/ast/lex.re"

end:
    yylval.clist = cl;
    return kind;
error:
    delete cl;
    fatal_l(get_cline(), "syntax error in condition list");
}

void Scanner::lex_cgoto()
{

#line 1970 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy324;
yy325:
	++YYCURSOR;
yy324:
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy325;
	}
#line 371 "../src/ast/lex.re"
	{ goto name; }
#line 2018 "src/ast/lex.cc"
}
#line 372 "../src/ast/lex.re"

name:
    tok = cur;

#line 2025 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy330;
		if (yych <= 'Z') goto yy332;
	} else {
		if (yych == '`') goto yy330;
		if (yych <= 'z') goto yy332;
	}
yy330:
	++YYCURSOR;
#line 377 "../src/ast/lex.re"
	{ fatal_l(get_cline(), "syntax error in condition goto"); }
#line 2075 "src/ast/lex.cc"
yy332:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy332;
	}
#line 376 "../src/ast/lex.re"
	{ yylval.str = new std::string (tok, tok_len ()); return; }
#line 2085 "src/ast/lex.cc"
}
#line 378 "../src/ast/lex.re"

}

void Scanner::lex_code_indented()
{
    const uint32_t line = cline;
    tok = cur;
code:

#line 2097 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy337;
			if (yych == '\n') goto yy341;
			goto yy339;
		} else {
			if (yych <= '\r') goto yy343;
			if (yych == '"') goto yy344;
			goto yy339;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy344;
			if (yych == '/') goto yy346;
			goto yy339;
		} else {
			if (yych == '|') goto yy339;
			if (yych <= '}') goto yy347;
			goto yy339;
		}
	}
yy337:
	++YYCURSOR;
#line 395 "../src/ast/lex.re"
	{ fail_if_eof(); goto code; }
#line 2127 "src/ast/lex.cc"
yy339:
	++YYCURSOR;
yy340:
#line 400 "../src/ast/lex.re"
	{ goto code; }
#line 2133 "src/ast/lex.cc"
yy341:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy342;
		if (yych <= '\n') goto yy349;
	} else {
		if (yych <= '\r') goto yy349;
		if (yych == ' ') goto yy349;
	}
yy342:
#line 388 "../src/ast/lex.re"
	{
        while (isspace(tok[0])) ++tok;
        while (cur > tok && isspace(cur[-1])) --cur;
        yylval.code = new Code(get_fname (), line, tok, tok_len ());
        return;
    }
#line 2151 "src/ast/lex.cc"
yy343:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy341;
	goto yy340;
yy344:
	++YYCURSOR;
#line 399 "../src/ast/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2160 "src/ast/lex.cc"
yy346:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy351;
	if (yych == '/') goto yy353;
	goto yy340;
yy347:
	++YYCURSOR;
#line 396 "../src/ast/lex.re"
	{ fatal_l(get_cline(), "Curly braces are not allowed after ':='"); }
#line 2170 "src/ast/lex.cc"
yy349:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 387 "../src/ast/lex.re"
	{ goto code; }
#line 2176 "src/ast/lex.cc"
yy351:
	++YYCURSOR;
#line 397 "../src/ast/lex.re"
	{ lex_c_comment(); goto code; }
#line 2181 "src/ast/lex.cc"
yy353:
	++YYCURSOR;
#line 398 "../src/ast/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2186 "src/ast/lex.cc"
}
#line 401 "../src/ast/lex.re"

}

void Scanner::lex_code_in_braces()
{
    const uint32_t line = cline;
    uint32_t depth = 1;
code:

#line 2198 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy357;
			if (yych == '\n') goto yy361;
			goto yy359;
		} else {
			if (yych <= '\r') goto yy363;
			if (yych == '"') goto yy364;
			goto yy359;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy364;
			if (yych == '/') goto yy366;
			goto yy359;
		} else {
			if (yych <= '{') goto yy367;
			if (yych == '}') goto yy369;
			goto yy359;
		}
	}
yy357:
	++YYCURSOR;
#line 421 "../src/ast/lex.re"
	{ fail_if_eof(); goto code; }
#line 2262 "src/ast/lex.cc"
yy359:
	++YYCURSOR;
yy360:
#line 425 "../src/ast/lex.re"
	{ goto code; }
#line 2268 "src/ast/lex.cc"
yy361:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy371;
	}
	if (yych == '#') goto yy374;
yy362:
#line 420 "../src/ast/lex.re"
	{ pos = cur; cline++; goto code; }
#line 2278 "src/ast/lex.cc"
yy363:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy361;
	goto yy360;
yy364:
	++YYCURSOR;
#line 424 "../src/ast/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2287 "src/ast/lex.cc"
yy366:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy376;
	if (yych == '/') goto yy378;
	goto yy360;
yy367:
	++YYCURSOR;
#line 418 "../src/ast/lex.re"
	{ ++depth; goto code; }
#line 2297 "src/ast/lex.cc"
yy369:
	++YYCURSOR;
#line 410 "../src/ast/lex.re"
	{
        if (--depth == 0) {
            yylval.code = new Code(get_fname (), line, tok, tok_len ());
            return;
        }
        goto code;
    }
#line 2308 "src/ast/lex.cc"
yy371:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy371;
	}
	if (yych == '#') goto yy374;
yy373:
	YYCURSOR = YYMARKER;
	goto yy362;
yy374:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy374;
		goto yy373;
	} else {
		if (yych <= ' ') goto yy374;
		if (yych == 'l') goto yy380;
		goto yy373;
	}
yy376:
	++YYCURSOR;
#line 422 "../src/ast/lex.re"
	{ lex_c_comment(); goto code; }
#line 2336 "src/ast/lex.cc"
yy378:
	++YYCURSOR;
#line 423 "../src/ast/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2341 "src/ast/lex.cc"
yy380:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy373;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy373;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy373;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy385;
	if (yych <= '9') goto yy373;
	goto yy385;
yy384:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy385:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy384;
		goto yy373;
	} else {
		if (yych <= ' ') goto yy384;
		if (yych <= '0') goto yy373;
		if (yych >= ':') goto yy373;
		YYCTXMARKER = YYCURSOR;
	}
yy386:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy386;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy373;
		if (yych <= '\t') goto yy388;
		if (yych <= '\n') goto yy390;
		goto yy373;
	} else {
		if (yych <= '\r') goto yy392;
		if (yych != ' ') goto yy373;
	}
yy388:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy388;
		goto yy373;
	} else {
		if (yych <= ' ') goto yy388;
		if (yych == '"') goto yy393;
		goto yy373;
	}
yy390:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 419 "../src/ast/lex.re"
	{ set_sourceline (); goto code; }
#line 2400 "src/ast/lex.cc"
yy392:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy390;
	goto yy373;
yy393:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy393;
	}
	if (yych <= '\n') goto yy373;
	if (yych >= '#') goto yy396;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy390;
	if (yych == '\r') goto yy392;
	goto yy373;
yy396:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy373;
	if (yych == '\n') goto yy373;
	goto yy393;
}
#line 426 "../src/ast/lex.re"

}

void Scanner::lex_string(char delim)
{
loop:

#line 2434 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy399;
			if (yych <= '\t') goto yy401;
			goto yy403;
		} else {
			if (yych == '\r') goto yy405;
			goto yy401;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy406;
			if (yych <= '&') goto yy401;
			goto yy406;
		} else {
			if (yych == '\\') goto yy408;
			goto yy401;
		}
	}
yy399:
	++YYCURSOR;
#line 436 "../src/ast/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2462 "src/ast/lex.cc"
yy401:
	++YYCURSOR;
yy402:
#line 437 "../src/ast/lex.re"
	{ goto loop; }
#line 2468 "src/ast/lex.cc"
yy403:
	++YYCURSOR;
#line 435 "../src/ast/lex.re"
	{ pos = cur; ++cline; goto loop; }
#line 2473 "src/ast/lex.cc"
yy405:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy403;
	goto yy402;
yy406:
	++YYCURSOR;
#line 433 "../src/ast/lex.re"
	{ if (cur[-1] == delim) return; else goto loop; }
#line 2482 "src/ast/lex.cc"
yy408:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '&') {
		if (yych != '"') goto yy402;
	} else {
		if (yych <= '\'') goto yy409;
		if (yych != '\\') goto yy402;
	}
yy409:
	++YYCURSOR;
#line 434 "../src/ast/lex.re"
	{ goto loop; }
#line 2495 "src/ast/lex.cc"
}
#line 438 "../src/ast/lex.re"

}

void Scanner::lex_c_comment()
{
loop:

#line 2505 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy413;
		if (yych == '\n') goto yy417;
		goto yy415;
	} else {
		if (yych <= '\r') goto yy419;
		if (yych == '*') goto yy420;
		goto yy415;
	}
yy413:
	++YYCURSOR;
#line 447 "../src/ast/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2523 "src/ast/lex.cc"
yy415:
	++YYCURSOR;
yy416:
#line 448 "../src/ast/lex.re"
	{ goto loop; }
#line 2529 "src/ast/lex.cc"
yy417:
	++YYCURSOR;
#line 446 "../src/ast/lex.re"
	{ pos = cur; ++cline; goto loop; }
#line 2534 "src/ast/lex.cc"
yy419:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy417;
	goto yy416;
yy420:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy416;
	++YYCURSOR;
#line 445 "../src/ast/lex.re"
	{ return; }
#line 2545 "src/ast/lex.cc"
}
#line 449 "../src/ast/lex.re"

}

void Scanner::lex_cpp_comment()
{
loop:

#line 2555 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy425;
		if (yych <= '\t') goto yy427;
		goto yy429;
	} else {
		if (yych == '\r') goto yy431;
		goto yy427;
	}
yy425:
	++YYCURSOR;
#line 457 "../src/ast/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2572 "src/ast/lex.cc"
yy427:
	++YYCURSOR;
yy428:
#line 458 "../src/ast/lex.re"
	{ goto loop; }
#line 2578 "src/ast/lex.cc"
yy429:
	++YYCURSOR;
#line 456 "../src/ast/lex.re"
	{ pos = cur; ++cline; return; }
#line 2583 "src/ast/lex.cc"
yy431:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy429;
	goto yy428;
}
#line 459 "../src/ast/lex.re"

}

const AST *Scanner::lex_cls(bool neg)
{
    std::vector<ASTRange> *cls = new std::vector<ASTRange>;
    uint32_t u, l, c, c0 = get_column();
fst:
    tok = cur;
    c = get_column();
    
#line 2601 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy435;
#line 471 "../src/ast/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 2609 "src/ast/lex.cc"
yy435:
	++YYCURSOR;
#line 470 "../src/ast/lex.re"
	{ return ast_cls(cline, c0, cls, neg); }
#line 2614 "src/ast/lex.cc"
}
#line 472 "../src/ast/lex.re"

snd:
    
#line 2620 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy440;
yy439:
#line 475 "../src/ast/lex.re"
	{ u = l; goto add; }
#line 2629 "src/ast/lex.cc"
yy440:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy442;
	YYCURSOR = YYMARKER;
	goto yy439;
yy442:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 476 "../src/ast/lex.re"
	{
            u = lex_cls_chr();
            if (l > u) {
                warn.swapped_range(cline, l, u);
                std::swap(l, u);
            }
            goto add;
        }
#line 2647 "src/ast/lex.cc"
}
#line 484 "../src/ast/lex.re"

add:
    cls->push_back(ASTRange(l, u, c));
    goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
    tok = cur;
    const uint32_t l = get_cline(), c = get_column();
    
#line 2661 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy446;
		if (yych == '\n') goto yy450;
		goto yy448;
	} else {
		if (yych <= '\r') goto yy452;
		if (yych == '\\') goto yy453;
		goto yy448;
	}
yy446:
	++YYCURSOR;
#line 496 "../src/ast/lex.re"
	{ fail_if_eof(); return 0; }
#line 2680 "src/ast/lex.cc"
yy448:
	++YYCURSOR;
yy449:
#line 502 "../src/ast/lex.re"
	{ return static_cast<uint8_t>(tok[0]); }
#line 2686 "src/ast/lex.cc"
yy450:
	++YYCURSOR;
#line 497 "../src/ast/lex.re"
	{ fatal_lc(l, c, "newline in character class"); }
#line 2691 "src/ast/lex.cc"
yy452:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy450;
	goto yy449;
yy453:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy454;
				if (yych == '\n') goto yy450;
				goto yy455;
			} else {
				if (yych <= '\r') goto yy457;
				if (yych == '-') goto yy458;
				goto yy455;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy460;
				if (yych <= '7') goto yy462;
				if (yych <= 'T') goto yy455;
				goto yy463;
			} else {
				if (yych == 'X') goto yy465;
				if (yych <= '[') goto yy455;
				goto yy466;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy468;
				if (yych <= '`') goto yy455;
				if (yych <= 'a') goto yy470;
				goto yy472;
			} else {
				if (yych == 'f') goto yy474;
				if (yych <= 'm') goto yy455;
				goto yy476;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy478;
				if (yych <= 's') goto yy455;
				goto yy480;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy465;
					goto yy482;
				} else {
					if (yych == 'x') goto yy484;
					goto yy455;
				}
			}
		}
	}
yy454:
#line 500 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in escape sequence"); }
#line 2752 "src/ast/lex.cc"
yy455:
	++YYCURSOR;
yy456:
#line 515 "../src/ast/lex.re"
	{
            warn.useless_escape(cline, get_column(), tok[1]);
            return static_cast<uint8_t>(tok[1]);
        }
#line 2761 "src/ast/lex.cc"
yy457:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy450;
	goto yy456;
yy458:
	++YYCURSOR;
#line 513 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 2770 "src/ast/lex.cc"
yy460:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy461;
	if (yych <= '7') goto yy485;
yy461:
#line 499 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in octal escape sequence"); }
#line 2779 "src/ast/lex.cc"
yy462:
	++YYCURSOR;
	goto yy461;
yy463:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy464;
		if (yych <= '9') goto yy487;
	} else {
		if (yych <= 'F') goto yy487;
		if (yych <= '`') goto yy464;
		if (yych <= 'f') goto yy487;
	}
yy464:
#line 498 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in hexadecimal escape sequence"); }
#line 2797 "src/ast/lex.cc"
yy465:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy464;
		if (yych <= '9') goto yy488;
		goto yy464;
	} else {
		if (yych <= 'F') goto yy488;
		if (yych <= '`') goto yy464;
		if (yych <= 'f') goto yy488;
		goto yy464;
	}
yy466:
	++YYCURSOR;
#line 512 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2815 "src/ast/lex.cc"
yy468:
	++YYCURSOR;
#line 514 "../src/ast/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 2820 "src/ast/lex.cc"
yy470:
	++YYCURSOR;
#line 505 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2825 "src/ast/lex.cc"
yy472:
	++YYCURSOR;
#line 506 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2830 "src/ast/lex.cc"
yy474:
	++YYCURSOR;
#line 507 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2835 "src/ast/lex.cc"
yy476:
	++YYCURSOR;
#line 508 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2840 "src/ast/lex.cc"
yy478:
	++YYCURSOR;
#line 509 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2845 "src/ast/lex.cc"
yy480:
	++YYCURSOR;
#line 510 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2850 "src/ast/lex.cc"
yy482:
	++YYCURSOR;
#line 511 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2855 "src/ast/lex.cc"
yy484:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy464;
		if (yych <= '9') goto yy489;
		goto yy464;
	} else {
		if (yych <= 'F') goto yy489;
		if (yych <= '`') goto yy464;
		if (yych <= 'f') goto yy489;
		goto yy464;
	}
yy485:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy486;
	if (yych <= '7') goto yy490;
yy486:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy461;
	} else {
		goto yy464;
	}
yy487:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy486;
		if (yych <= '9') goto yy492;
		goto yy486;
	} else {
		if (yych <= 'F') goto yy492;
		if (yych <= '`') goto yy486;
		if (yych <= 'f') goto yy492;
		goto yy486;
	}
yy488:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy486;
		if (yych <= '9') goto yy493;
		goto yy486;
	} else {
		if (yych <= 'F') goto yy493;
		if (yych <= '`') goto yy486;
		if (yych <= 'f') goto yy493;
		goto yy486;
	}
yy489:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy486;
		if (yych <= '9') goto yy494;
		goto yy486;
	} else {
		if (yych <= 'F') goto yy494;
		if (yych <= '`') goto yy486;
		if (yych <= 'f') goto yy494;
		goto yy486;
	}
yy490:
	++YYCURSOR;
#line 504 "../src/ast/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2920 "src/ast/lex.cc"
yy492:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy486;
		if (yych <= '9') goto yy496;
		goto yy486;
	} else {
		if (yych <= 'F') goto yy496;
		if (yych <= '`') goto yy486;
		if (yych <= 'f') goto yy496;
		goto yy486;
	}
yy493:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy486;
		if (yych <= '9') goto yy489;
		goto yy486;
	} else {
		if (yych <= 'F') goto yy489;
		if (yych <= '`') goto yy486;
		if (yych <= 'f') goto yy489;
		goto yy486;
	}
yy494:
	++YYCURSOR;
#line 503 "../src/ast/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2949 "src/ast/lex.cc"
yy496:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy486;
		if (yych >= ':') goto yy486;
	} else {
		if (yych <= 'F') goto yy497;
		if (yych <= '`') goto yy486;
		if (yych >= 'g') goto yy486;
	}
yy497:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy486;
		if (yych <= '9') goto yy488;
		goto yy486;
	} else {
		if (yych <= 'F') goto yy488;
		if (yych <= '`') goto yy486;
		if (yych <= 'f') goto yy488;
		goto yy486;
	}
}
#line 519 "../src/ast/lex.re"

}

uint32_t Scanner::lex_str_chr(char quote, bool &end)
{
    end = false;
    tok = cur;
    const uint32_t l = get_cline(), c = get_column();
    
#line 2983 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy500;
		if (yych == '\n') goto yy504;
		goto yy502;
	} else {
		if (yych <= '\r') goto yy506;
		if (yych == '\\') goto yy507;
		goto yy502;
	}
yy500:
	++YYCURSOR;
#line 529 "../src/ast/lex.re"
	{ fail_if_eof(); return 0; }
#line 3002 "src/ast/lex.cc"
yy502:
	++YYCURSOR;
yy503:
#line 535 "../src/ast/lex.re"
	{
            end = tok[0] == quote;
            return static_cast<uint8_t>(tok[0]);
        }
#line 3011 "src/ast/lex.cc"
yy504:
	++YYCURSOR;
#line 530 "../src/ast/lex.re"
	{ fatal_lc(l, c, "newline in character string"); }
#line 3016 "src/ast/lex.cc"
yy506:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy504;
	goto yy503;
yy507:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy508;
				if (yych <= '\t') goto yy509;
				goto yy504;
			} else {
				if (yych == '\r') goto yy511;
				if (yych <= '/') goto yy509;
				goto yy512;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy514;
				if (yych == 'U') goto yy515;
				goto yy509;
			} else {
				if (yych <= 'X') goto yy517;
				if (yych == '\\') goto yy518;
				goto yy509;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy520;
				if (yych <= 'b') goto yy522;
				goto yy509;
			} else {
				if (yych <= 'f') goto yy524;
				if (yych == 'n') goto yy526;
				goto yy509;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy528;
				if (yych <= 's') goto yy509;
				if (yych <= 't') goto yy530;
				goto yy517;
			} else {
				if (yych <= 'v') goto yy532;
				if (yych == 'x') goto yy534;
				goto yy509;
			}
		}
	}
yy508:
#line 533 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in escape sequence"); }
#line 3072 "src/ast/lex.cc"
yy509:
	++YYCURSOR;
yy510:
#line 549 "../src/ast/lex.re"
	{
            if (tok[1] != quote) {
                warn.useless_escape(cline, get_column(), tok[1]);
            }
            return static_cast<uint8_t>(tok[1]);
        }
#line 3083 "src/ast/lex.cc"
yy511:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy504;
	goto yy510;
yy512:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy513;
	if (yych <= '7') goto yy535;
yy513:
#line 532 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in octal escape sequence"); }
#line 3096 "src/ast/lex.cc"
yy514:
	++YYCURSOR;
	goto yy513;
yy515:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy516;
		if (yych <= '9') goto yy537;
	} else {
		if (yych <= 'F') goto yy537;
		if (yych <= '`') goto yy516;
		if (yych <= 'f') goto yy537;
	}
yy516:
#line 531 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in hexadecimal escape sequence"); }
#line 3114 "src/ast/lex.cc"
yy517:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy516;
		if (yych <= '9') goto yy538;
		goto yy516;
	} else {
		if (yych <= 'F') goto yy538;
		if (yych <= '`') goto yy516;
		if (yych <= 'f') goto yy538;
		goto yy516;
	}
yy518:
	++YYCURSOR;
#line 548 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3132 "src/ast/lex.cc"
yy520:
	++YYCURSOR;
#line 541 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3137 "src/ast/lex.cc"
yy522:
	++YYCURSOR;
#line 542 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3142 "src/ast/lex.cc"
yy524:
	++YYCURSOR;
#line 543 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3147 "src/ast/lex.cc"
yy526:
	++YYCURSOR;
#line 544 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3152 "src/ast/lex.cc"
yy528:
	++YYCURSOR;
#line 545 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3157 "src/ast/lex.cc"
yy530:
	++YYCURSOR;
#line 546 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3162 "src/ast/lex.cc"
yy532:
	++YYCURSOR;
#line 547 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3167 "src/ast/lex.cc"
yy534:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy516;
		if (yych <= '9') goto yy539;
		goto yy516;
	} else {
		if (yych <= 'F') goto yy539;
		if (yych <= '`') goto yy516;
		if (yych <= 'f') goto yy539;
		goto yy516;
	}
yy535:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy536;
	if (yych <= '7') goto yy540;
yy536:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy513;
	} else {
		goto yy516;
	}
yy537:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy536;
		if (yych <= '9') goto yy542;
		goto yy536;
	} else {
		if (yych <= 'F') goto yy542;
		if (yych <= '`') goto yy536;
		if (yych <= 'f') goto yy542;
		goto yy536;
	}
yy538:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy536;
		if (yych <= '9') goto yy543;
		goto yy536;
	} else {
		if (yych <= 'F') goto yy543;
		if (yych <= '`') goto yy536;
		if (yych <= 'f') goto yy543;
		goto yy536;
	}
yy539:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy536;
		if (yych <= '9') goto yy544;
		goto yy536;
	} else {
		if (yych <= 'F') goto yy544;
		if (yych <= '`') goto yy536;
		if (yych <= 'f') goto yy544;
		goto yy536;
	}
yy540:
	++YYCURSOR;
#line 540 "../src/ast/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3232 "src/ast/lex.cc"
yy542:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy536;
		if (yych <= '9') goto yy546;
		goto yy536;
	} else {
		if (yych <= 'F') goto yy546;
		if (yych <= '`') goto yy536;
		if (yych <= 'f') goto yy546;
		goto yy536;
	}
yy543:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy536;
		if (yych <= '9') goto yy539;
		goto yy536;
	} else {
		if (yych <= 'F') goto yy539;
		if (yych <= '`') goto yy536;
		if (yych <= 'f') goto yy539;
		goto yy536;
	}
yy544:
	++YYCURSOR;
#line 539 "../src/ast/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3261 "src/ast/lex.cc"
yy546:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy536;
		if (yych >= ':') goto yy536;
	} else {
		if (yych <= 'F') goto yy547;
		if (yych <= '`') goto yy536;
		if (yych >= 'g') goto yy536;
	}
yy547:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy536;
		if (yych <= '9') goto yy538;
		goto yy536;
	} else {
		if (yych <= 'F') goto yy538;
		if (yych <= '`') goto yy536;
		if (yych <= 'f') goto yy538;
		goto yy536;
	}
}
#line 555 "../src/ast/lex.re"

}

const AST *Scanner::lex_str(char quote)
{
    const uint32_t column = get_column();
    std::vector<ASTChar> *str = new std::vector<ASTChar>;
    for (bool end;;) {
        const uint32_t c = lex_str_chr(quote, end);
        if (end) return ast_str(cline, column, str, quote == '\'');
        str->push_back(ASTChar(c, get_column()));
    }
}

void Scanner::set_sourceline ()
{
sourceline:
    tok = cur;

#line 3305 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy552;
		} else {
			if (yych <= '\n') goto yy554;
			if (yych <= '\f') goto yy552;
			goto yy556;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy552;
			goto yy557;
		} else {
			if (yych <= '0') goto yy552;
			if (yych <= '9') goto yy558;
			goto yy552;
		}
	}
	++YYCURSOR;
#line 592 "../src/ast/lex.re"
	{
        --cur;
        tok = cur;
        return;
    }
#line 3369 "src/ast/lex.cc"
yy552:
	++YYCURSOR;
yy553:
#line 598 "../src/ast/lex.re"
	{ goto sourceline; }
#line 3375 "src/ast/lex.cc"
yy554:
	++YYCURSOR;
#line 587 "../src/ast/lex.re"
	{
        tok = cur;
        return;
    }
#line 3383 "src/ast/lex.cc"
yy556:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy554;
	goto yy553;
yy557:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x00) goto yy553;
	if (yych == '\n') goto yy553;
	goto yy562;
yy558:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy558;
	}
#line 574 "../src/ast/lex.re"
	{
        if (!s_to_u32_unsafe (tok, cur, cline)) {
            fatal_lc(get_cline(), get_column(), "line number overflow");
        }
        goto sourceline;
    }
#line 3407 "src/ast/lex.cc"
yy561:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy562:
	if (yybm[0+yych] & 128) {
		goto yy561;
	}
	if (yych <= '\n') goto yy563;
	if (yych <= '"') goto yy564;
	goto yy566;
yy563:
	YYCURSOR = YYMARKER;
	goto yy553;
yy564:
	++YYCURSOR;
#line 581 "../src/ast/lex.re"
	{
        in.escaped_file_name = std::string (tok + 1, tok_len () - 2); // strip quotes
        strrreplace (in.escaped_file_name, "\\", "\\\\");
        goto sourceline;
    }
#line 3430 "src/ast/lex.cc"
yy566:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy563;
	if (yych == '\n') goto yy563;
	goto yy561;
}
#line 599 "../src/ast/lex.re"

}

void Scanner::fail_if_eof() const
{
    if (cur == eof) {
        const uint32_t col = static_cast<uint32_t>(cur - pos) - 1;
        fatal_lc(get_cline(), col, "unexpected end of input");
    }
}

} // end namespace re2c
