%{

#include "src/util/c99_stdint.h"
#include <assert.h>
#include <stddef.h>
#include <stdlib.h>
#include <limits>
#include <list>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>

#include "src/conf/msg.h"
#include "src/codegen/output.h"
#include "src/ir/compile.h"
#include "src/ir/adfa/adfa.h"
#include "src/ir/regexp/encoding/enc.h"
#include "src/ir/regexp/encoding/range_suffix.h"
#include "src/ir/regexp/regexp.h"
#include "src/ir/skeleton/skeleton.h"
#include "src/parse/extop.h"
#include "src/parse/parser.h"
#include "src/parse/scanner.h"
#include "src/util/free_list.h"
#include "src/util/range.h"

#define YYMALLOC malloc
#define YYFREE free

using namespace re2c;

extern "C" {

int yylex(context_t &context);
void yyerror(context_t &context, const char*);

} // extern "C"

/* Bison version 1.875 emits a definition that is not working
 * with several g++ version. Hence we disable it here.
 */
#if defined(__GNUC__)
#define __attribute__(x)
#endif

static void check(const specs_t &specs, bool cflag)
{
	specs_t::const_iterator i,
		b = specs.begin(),
		e = specs.end();

	for (i = b; i != e; ++i) {
		if (i->defs.size() > 1) {
			error("line %u: code to default rule %sis already defined at line %u",
				i->defs[1]->fline, incond(i->name).c_str(), i->defs[0]->fline);
			exit(1);
		}
	}

	if (!cflag) {
		for (i = b; i != e; ++i) {
			if (i->name != "") {
				error("line %u: conditions are only allowed"
					" with '-c', '--conditions' option",
					i->rules[0].code->fline);
				exit(1);
			}
		}
	} else {
		for (i = b; i != e; ++i) {
			if (i->name == "") {
				error("line %u: non-conditional rules are not allowed"
					" with '-c', '--conditions' option",
					i->rules[0].code->fline);
				exit(1);
			}
		}

		for (i = b; i != e; ++i) {
			if (i->setup.size() > 1) {
				error("line %u: code to setup rule '%s' is already defined at line %u",
					i->setup[1]->fline, i->name.c_str(), i->setup[0]->fline);
				exit(1);
			}
		}

		for (i = b; i != e; ++i) {
			if (i->name != "*" && !i->setup.empty() && i->rules.empty()) {
				error("line %u: setup for non existing condition '%s' found",
					i->setup[0]->fline, i->name.c_str());
				exit(1);
			}
		}

		for (i = b; i != e && !i->setup.empty(); ++i);
		if (i == e) {
			for (i = b; i != e; ++i) {
				if (i->name == "*") {
					error("line %u: setup for all conditions '<!*>' is illegal "
						"if setup for each condition is defined explicitly",
						i->setup[0]->fline);
					exit(1);
				}
			}
		}

		for (i = b; i != e; ++i) {
			if (i->name == "0" && i->rules.size() > 1) {
				error("line %u: startup code is already defined at line %u",
					i->rules[1].code->fline, i->rules[0].code->fline);
				exit(1);
			}
		}
	}
}

static void prepare(specs_t &specs, const Scanner &in)
{
	specs_t::iterator i, b = specs.begin(), e = specs.end();

	// merge <*> rules and <!*> setup to all conditions except "0"
	// star rules must have lower priority than normal rules
	for (i = b; i != e && i->name != "*"; ++i);
	if (i != e) {
		const specs_t::iterator star = i;

		for (i = b; i != e; ++i) {
			if (i == star || i->name == "0") continue;

			i->rules.insert(i->rules.end(), star->rules.begin(), star->rules.end());
			i->defs.insert(i->defs.end(), star->defs.begin(), star->defs.end());
			i->setup.insert(i->setup.end(), star->setup.begin(), star->setup.end());
		}

		specs.erase(star);
		e = specs.end();
	}

	// merge default rule with the lowest priority
	for (i = b; i != e; ++i) {
		if (!i->defs.empty()) {
			i->rules.push_back(RegExpRule(in.mkDefault(), i->defs[0]));
		}
	}

	// "0" condition must be the first one
	for (i = b; i != e && i->name != "0"; ++i);
	if (i != e && i != b) {
		const spec_t zero = *i;
		specs.erase(i);
		specs.insert(specs.begin(), zero);
	}
}

static spec_t &find(specs_t &specs, const std::string &name)
{
	for (specs_t::iterator i = specs.begin(); i != specs.end(); ++i) {
		if (i->name == name) return *i;
	}
	specs.push_back(spec_t(name));
	return specs.back();
}

%}

%start	spec

%lex-param   {context_t &context}
%parse-param {context_t &context}

%union {
	const re2c::RegExp * regexp;
	re2c::Code * code;
	char op;
	re2c::ExtOp extop;
	std::string * str;
	re2c::CondList * clist;
};

%token TOKEN_CLOSESIZE
%token TOKEN_CODE
%token TOKEN_CONF
%token TOKEN_ID
%token TOKEN_FID
%token TOKEN_FID_END
%token TOKEN_REGEXP

%type <op>      close closes
%type <extop>   TOKEN_CLOSESIZE
%type <code>    TOKEN_CODE ccode
%type <regexp>  TOKEN_REGEXP trailexpr rule expr diff term factor primary
%type <str>     TOKEN_ID TOKEN_FID name
%type <clist>   conds clist

%%

spec
	: /* empty */
	| spec TOKEN_CONF
	| spec def
	| spec rule
	;

def
	: name expr enddef {
		if (!context.symtab.insert(std::make_pair(*$1, $2)).second) {
			context.input.fatal("sym already defined");
		}
		delete $1;
	}
	/* errors */
	| name expr '/' {
		context.input.fatal("trailing contexts are not allowed in named definitions");
	};

name
	: TOKEN_ID '=' {
		$$ = $1;
	}
	| TOKEN_FID {
		$$ = $1;
	};

enddef: ';' | TOKEN_FID_END;

rule
	: trailexpr TOKEN_CODE {
		find(context.specs, "").rules.push_back(RegExpRule($1, $2));
	}

	| '*' TOKEN_CODE {
		find(context.specs, "").defs.push_back($2);
	}

	| '<' clist '>' trailexpr ccode {
		for(CondList::const_iterator i = $2->begin(); i != $2->end(); ++i) {
			find(context.specs, *i).rules.push_back(RegExpRule($4, $5));
		}
		delete $2;
	}

	| '<' clist '>' '*' ccode {
		for(CondList::const_iterator i = $2->begin(); i != $2->end(); ++i) {
			find(context.specs, *i).defs.push_back($5);
		}
		delete $2;
	}

	| '<' '!' clist '>' TOKEN_CODE {
		for (CondList::const_iterator i = $3->begin(); i != $3->end(); ++i) {
			find(context.specs, *i).setup.push_back($5);
		}
		delete $3;
	}

	| '<' '>' ccode {
		find(context.specs, "0").rules.push_back(RegExpRule(RegExp::make_nil(), $3));
	};

ccode
	: TOKEN_CODE

	| '=' '>' TOKEN_ID TOKEN_CODE {
		$$ = $4;
		$$->cond = *$3;
		delete $3;
	}

	| ':' '=' '>' TOKEN_ID {
		$$ = new Code(context.input.get_fname(), context.input.get_cline());
		$$->cond = *$4;
		delete $4;
	};

clist
	: conds
	| '*' {
		$$ = new CondList;
		$$->insert("*");
	};

conds
	: TOKEN_ID {
		$$ = new CondList;
		$$->insert(*$1);
		delete $1;
	}

	| conds ',' TOKEN_ID {
		$1->insert(*$3);
		delete $3;
		$$ = $1;
	};

trailexpr
	: expr
	| expr '/' expr {
		$$ = RegExp::make_cat($1, RegExp::make_cat(RegExp::make_tag(NULL), $3));
	};

expr:
		diff
		{
			$$ = $1;
		}
	|	expr '|' diff
		{
			$$ = mkAlt($1, $3);
		}
;

diff:
		term
		{
			$$ = $1;
		}
	|	diff '\\' term
		{
			$$ = context.input.mkDiff($1, $3);
		}
;

term:
		factor
		{
			$$ = $1;
		}
	|	term factor
		{
			$$ = RegExp::make_cat($1, $2);
		}
;

factor:
		primary
		{
			$$ = $1;
		}
	|	primary closes
		{
			// see note [Kleene star is expressed in terms of plus]
			switch($2)
			{
			case '*':
				$$ = RegExp::make_alt(RegExp::make_nil(),
					RegExp::make_iter($1));
				break;
			case '+':
				$$ = RegExp::make_iter($1);
				break;
			case '?':
				$$ = mkAlt($1, RegExp::make_nil());
				break;
			}
		}
	|	primary TOKEN_CLOSESIZE
		{
			if ($2.max == std::numeric_limits<uint32_t>::max())
			{
				$$ = repeat_from ($1, $2.min);
			}
			else if ($2.min == $2.max)
			{
				$$ = repeat ($1, $2.min);
			}
			else
			{
				$$ = repeat_from_to ($1, $2.min, $2.max);
			}
			$$ = $$ ? $$ : RegExp::make_nil();
		}
;

closes
	: close
	| closes close { $$ = ($1 == $2) ? $1 : '*'; }
	;

close
	: '*' { $$ = '*'; }
	| '+' { $$ = '+'; }
	| '?' { $$ = '?'; }
	;

primary:
		TOKEN_ID
		{
			symtab_t::iterator i = context.symtab.find(*$1);
			delete $1;
			if (i == context.symtab.end()) {
				context.input.fatal("can't find symbol");
			}
			$$ = i->second;
		}
	|	TOKEN_REGEXP
		{
			$$ = $1;
		}
	|	'(' expr ')'
		{
			$$ = $2;
		}
;

%%

extern "C" {

void yyerror(context_t &context, const char* s)
{
	context.input.fatal(s);
}

int yylex(context_t &context)
{
	return context.input.scan();
}

} // extern "C"

namespace re2c
{

void parse(Scanner &input, Output & o)
{
	specs_t specs;
	symtab_t symtab;
	dfas_t dfas;
	ScannerState rules_state, curr_state;
	Opt &opts = input.opts;

	o.source.new_block(opts);

	o.source.wversion_time()
		.wline_info(input.get_cline(), input.get_fname().c_str());
	if (opts->target == opt_t::SKELETON)
	{
		emit_prolog (o.source);
	}

	Enc encodingOld = opts->encoding;
	for (Scanner::ParseMode mode; (mode = input.echo()) != Scanner::Stop;) {

		input.save_state(curr_state);
		if (opts->rFlag && mode == Scanner::Rules && !dfas.empty())
		{
			input.fatal("cannot have a second 'rules:re2c' block");
		}
		if (mode == Scanner::Reuse)
		{
			if (dfas.empty())
			{
				input.fatal("got 'use:re2c' without 'rules:re2c'");
			}
		}
		else if (mode == Scanner::Rules)
		{
			input.save_state(rules_state);
		}
		else
		{
			dfas.clear();
		}

		// parse next re2c block
		context_t context = {input, specs, symtab};
		specs.clear();
		yyparse(context);
		if (opts->rFlag && mode == Scanner::Reuse) {
			if (!specs.empty() || opts->encoding != encodingOld) {
				// Re-parse rules
				mode = Scanner::Parse;
				input.restore_state(rules_state);
				input.reuse();
				dfas.clear();
				specs.clear();
				symtab.clear();
				yyparse(context);

				// Now append potential new rules
				input.restore_state(curr_state);
				mode = Scanner::Parse;
				yyparse(context);
			}
			encodingOld = opts->encoding;
		}

		// start new output block with accumulated options
		o.source.new_block(opts);

		// compile regular expressions to automata
		if (mode != Scanner::Reuse) {
			check(specs, opts->cFlag);
			prepare(specs, input);
			o.source.block().line = input.get_cline();
			for (specs_t::const_iterator i = specs.begin(); i != specs.end(); ++i) {
				dfas.push_back(compile(*i, o));
			}
		}

		// generate code
		if (mode != Scanner::Rules) {
			bool prolog = false;
			uint32_t ind = opts->topIndent;
			for (dfas_t::const_iterator i = dfas.begin(); i != dfas.end(); ++i) {
				(*i)->emit(o, ind, (i + 1) == dfas.end(), prolog);
			}
		}

		o.source.wline_info (input.get_cline (), input.get_fname ().c_str ());
		/* restore original char handling mode*/
		opts.reset_encoding (encodingOld);
	}

	if (opts->target == opt_t::SKELETON)
	{
		emit_epilog (o.source, o.skeletons);
	}

	RegExp::flist.clear();
	Code::flist.clear();
	Range::vFreeList.clear();
	RangeSuffix::freeList.clear();
}

} // end namespace re2c
